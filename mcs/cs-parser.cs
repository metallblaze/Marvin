// created by jay 0.7 (c) 1998 Axel.Schreiner@informatik.uni-osnabrueck.de

#line 2 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
//
// cs-parser.jay: The Parser for the C# compiler
//
// Authors: Miguel de Icaza (miguel@gnome.org)
//          Ravi Pratap     (ravi@ximian.com)
//          Marek Safar	    (marek.safar@gmail.com)
//
// Dual Licensed under the terms of the GNU GPL and the MIT X11 license
//
// (C) 2001 Ximian, Inc (http://www.ximian.com)
// (C) 2004-2011 Novell, Inc
// Copyright 2011 Xamarin Inc.
//
// TODO:
//   (1) Figure out why error productions dont work.  `type-declaration' is a
//       great spot to put an `error' because you can reproduce it with this input:
//	 "public X { }"
//

using System.Text;
using System.IO;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Mono.CSharp
{
	/// <summary>
	///    The C# Parser
	/// </summary>
	public class CSharpParser
	{
		[Flags]
		enum ParameterModifierType
		{
			Ref		= 1 << 1,
			Out		= 1 << 2,
			This	= 1 << 3,
			Params	= 1 << 4,
			Arglist	= 1 << 5,
			DefaultValue = 1 << 6,
			
			All = Ref | Out | This | Params | Arglist | DefaultValue
		}
		
		static readonly object ModifierNone = 0;
	
		NamespaceContainer  current_namespace;
		TypeContainer   current_container;
		DeclSpace	current_class,current_extensionContainer;
		System.Collections.Generic.HashSet<string> roleExtensionMethodDummies = new System.Collections.Generic.HashSet<string>();
		PropertyBase current_property;
		EventProperty current_event;
		EventField current_event_field;
		FieldBase current_field,current_role;
		bool isInteraction;
	    bool interactionInitializationDone;
		bool isInteractionArgumentList;
		bool isRoleMethod;
		
		/// <summary>
		///   Current block is used to add statements as we find
		///   them.  
		/// </summary>
		Block      current_block;
		MemberBase current_method;
		BlockVariableDeclaration current_variable;

		Delegate   current_delegate;
		
		AnonymousMethodExpression current_anonymous_method;

		/// <summary>
		///   This is used by the unary_expression code to resolve
		///   a name against a parameter.  
		/// </summary>
		
		// FIXME: This is very ugly and it's very hard to reset it correctly
		// on all places, especially when some parameters are autogenerated.
		ParametersCompiled current_local_parameters;

		bool parsing_anonymous_method;
		
		bool async_block;

		///
		/// An out-of-band stack.
		///
		static Stack<object> oob_stack;

		///
		/// Controls the verbosity of the errors produced by the parser
		///
		static public int yacc_verbose_flag;

		/// 
		/// Used by the interactive shell, flags whether EOF was reached
		/// and an error was produced
		///
		public bool UnexpectedEOF;

		///
		/// The current file.
		///
		readonly CompilationSourceFile file;

		///
		/// Temporary Xml documentation cache.
		/// For enum types, we need one more temporary store.
		///
		string tmpComment;
		string enumTypeComment;
	       		
		/// Current attribute target
		string current_attr_target;
		
		ParameterModifierType valid_param_mod;
		
		bool default_parameter_used;

		/// When using the interactive parser, this holds the
		/// resulting expression
		public Class InteractiveResult;

		//
		// Keeps track of global data changes to undo on parser error
		//
		public Undo undo;
		
		Stack<Linq.QueryBlock> linq_clause_blocks;

		ModuleContainer module;
		
		readonly CompilerContext compiler;
		readonly LanguageVersion lang_version;
		readonly bool doc_support;
		readonly CompilerSettings settings;
		readonly Report report;
        public static readonly Dictionary<string,Interface> RoleContracts = new Dictionary<string,Interface>();
		
		//
		// Instead of allocating carrier array everytime we
		// share the bucket for very common constructs which can never
		// be recursive
		//
		static List<Parameter> parameters_bucket = new List<Parameter> (6);
		
		//
		// Full AST support members
		//
		LocationsBag lbag;
		List<Tuple<Modifiers, Location>> mod_locations;
#line default

  /** error output stream.
      It should be changeable.
    */
  public System.IO.TextWriter ErrorOutput = System.Console.Out;

  /** simplified error message.
      @see <a href="#yyerror(java.lang.String, java.lang.String[])">yyerror</a>
    */
  public void yyerror (string message) {
    yyerror(message, null);
  }

  /* An EOF token */
  public int eof_token;

  /** (syntax) error message.
      Can be overwritten to control message format.
      @param message text to be displayed.
      @param expected vector of acceptable tokens, if available.
    */
  public void yyerror (string message, string[] expected) {
    if ((yacc_verbose_flag > 0) && (expected != null) && (expected.Length  > 0)) {
      ErrorOutput.Write (message+", expecting");
      for (int n = 0; n < expected.Length; ++ n)
        ErrorOutput.Write (" "+expected[n]);
        ErrorOutput.WriteLine ();
    } else
      ErrorOutput.WriteLine (message);
  }

  /** debugging support, requires the package jay.yydebug.
      Set to null to suppress debugging messages.
    */
  internal yydebug.yyDebug debug;

  protected static  int yyFinal = 7;
 // Put this array into a separate class so it is only initialized if debugging is actually used
 // Use MarshalByRefObject to disable inlining
 class YYRules : MarshalByRefObject {
  public static  string [] yyRule = {
    "$accept : compilation_unit",
    "compilation_unit : outer_declaration opt_EOF",
    "$$1 :",
    "compilation_unit : interactive_parsing $$1 opt_EOF",
    "compilation_unit : documentation_parsing",
    "outer_declaration : opt_extern_alias_directives opt_using_directives",
    "outer_declaration : opt_extern_alias_directives opt_using_directives namespace_or_type_declarations opt_attributes",
    "outer_declaration : opt_extern_alias_directives opt_using_directives attribute_sections",
    "outer_declaration : error",
    "opt_EOF :",
    "opt_EOF : EOF",
    "extern_alias_directives : extern_alias_directive",
    "extern_alias_directives : extern_alias_directives extern_alias_directive",
    "extern_alias_directive : EXTERN_ALIAS IDENTIFIER IDENTIFIER SEMICOLON",
    "extern_alias_directive : EXTERN_ALIAS error",
    "using_directives : using_directive",
    "using_directives : using_directives using_directive",
    "using_directive : using_alias_directive",
    "using_directive : using_namespace_directive",
    "using_alias_directive : USING IDENTIFIER ASSIGN namespace_or_type_name SEMICOLON",
    "using_alias_directive : USING error",
    "using_namespace_directive : USING namespace_name SEMICOLON",
    "$$2 :",
    "$$3 :",
    "namespace_declaration : opt_attributes NAMESPACE qualified_identifier $$2 OPEN_BRACE $$3 opt_extern_alias_directives opt_using_directives opt_namespace_or_type_declarations CLOSE_BRACE opt_semicolon",
    "qualified_identifier : IDENTIFIER",
    "qualified_identifier : qualified_identifier DOT IDENTIFIER",
    "qualified_identifier : error",
    "opt_semicolon :",
    "opt_semicolon : SEMICOLON",
    "opt_comma :",
    "opt_comma : COMMA",
    "namespace_name : namespace_or_type_name",
    "opt_using_directives :",
    "opt_using_directives : using_directives",
    "opt_extern_alias_directives :",
    "opt_extern_alias_directives : extern_alias_directives",
    "opt_namespace_or_type_declarations :",
    "opt_namespace_or_type_declarations : namespace_or_type_declarations",
    "namespace_or_type_declarations : namespace_or_type_declaration",
    "namespace_or_type_declarations : namespace_or_type_declarations namespace_or_type_declaration",
    "namespace_or_type_declaration : type_declaration",
    "namespace_or_type_declaration : namespace_declaration",
    "type_declaration : class_declaration",
    "type_declaration : struct_declaration",
    "type_declaration : interface_declaration",
    "type_declaration : enum_declaration",
    "type_declaration : delegate_declaration",
    "opt_attributes :",
    "opt_attributes : attribute_sections",
    "attribute_sections : attribute_section",
    "attribute_sections : attribute_sections attribute_section",
    "$$4 :",
    "attribute_section : OPEN_BRACKET $$4 attribute_section_cont",
    "$$5 :",
    "attribute_section_cont : attribute_target COLON $$5 attribute_list opt_comma CLOSE_BRACKET",
    "attribute_section_cont : attribute_list opt_comma CLOSE_BRACKET",
    "attribute_target : IDENTIFIER",
    "attribute_target : EVENT",
    "attribute_target : RETURN",
    "attribute_target : error",
    "attribute_list : attribute",
    "attribute_list : attribute_list COMMA attribute",
    "$$6 :",
    "attribute : attribute_name $$6 opt_attribute_arguments",
    "attribute_name : namespace_or_type_name",
    "opt_attribute_arguments :",
    "opt_attribute_arguments : OPEN_PARENS attribute_arguments CLOSE_PARENS",
    "attribute_arguments :",
    "attribute_arguments : positional_or_named_argument",
    "attribute_arguments : named_attribute_argument",
    "attribute_arguments : attribute_arguments COMMA positional_or_named_argument",
    "attribute_arguments : attribute_arguments COMMA named_attribute_argument",
    "positional_or_named_argument : expression",
    "positional_or_named_argument : named_argument",
    "$$7 :",
    "named_attribute_argument : IDENTIFIER ASSIGN $$7 expression",
    "named_argument : identifier_inside_body COLON opt_named_modifier expression",
    "opt_named_modifier :",
    "opt_named_modifier : REF",
    "opt_named_modifier : OUT",
    "opt_class_member_declarations :",
    "opt_class_member_declarations : class_member_declarations",
    "class_member_declarations : class_member_declaration",
    "class_member_declarations : class_member_declarations class_member_declaration",
    "class_member_declaration : constant_declaration",
    "class_member_declaration : interaction_method_declaration",
    "class_member_declaration : role_declaration",
    "class_member_declaration : field_declaration",
    "class_member_declaration : method_declaration",
    "class_member_declaration : property_declaration",
    "class_member_declaration : event_declaration",
    "class_member_declaration : indexer_declaration",
    "class_member_declaration : operator_declaration",
    "class_member_declaration : constructor_declaration",
    "class_member_declaration : destructor_declaration",
    "class_member_declaration : type_declaration",
    "class_member_declaration : error",
    "$$8 :",
    "$$9 :",
    "$$10 :",
    "$$11 :",
    "$$12 :",
    "struct_declaration : opt_attributes opt_modifiers opt_partial STRUCT $$8 type_declaration_name $$9 opt_class_base opt_type_parameter_constraints_clauses $$10 OPEN_BRACE $$11 opt_class_member_declarations CLOSE_BRACE $$12 opt_semicolon",
    "struct_declaration : opt_attributes opt_modifiers opt_partial STRUCT error",
    "$$13 :",
    "constant_declaration : opt_attributes opt_modifiers CONST type IDENTIFIER $$13 constant_initializer opt_constant_declarators SEMICOLON",
    "opt_constant_declarators :",
    "opt_constant_declarators : constant_declarators",
    "opt_method_declarations :",
    "opt_method_declarations : method_declarations",
    "method_declarations : method_declaration",
    "method_declarations : method_declarations method_declaration",
    "opt_role_method_declarations :",
    "opt_role_method_declarations : role_method_declarations",
    "role_method_declarations : role_method_declaration",
    "role_method_declarations : role_method_declarations role_method_declaration",
    "opt_role_type : COLON type_expression",
    "opt_role_type :",
    "$$14 :",
    "role_declaration : ROLE IDENTIFIER opt_role_type $$14 OPEN_BRACE opt_contract opt_role_method_declarations CLOSE_BRACE",
    "opt_contract :",
    "$$15 :",
    "opt_contract : CONTRACT $$15 OPEN_BRACE interface_member_declarations CLOSE_BRACE",
    "constant_declarators : constant_declarator",
    "constant_declarators : constant_declarators constant_declarator",
    "constant_declarator : COMMA IDENTIFIER constant_initializer",
    "$$16 :",
    "constant_initializer : ASSIGN $$16 constant_initializer_expr",
    "constant_initializer : error",
    "constant_initializer_expr : constant_expression",
    "constant_initializer_expr : array_initializer",
    "$$17 :",
    "field_declaration : opt_attributes opt_modifiers member_type IDENTIFIER $$17 opt_field_initializer opt_field_declarators SEMICOLON",
    "$$18 :",
    "field_declaration : opt_attributes opt_modifiers FIXED simple_type IDENTIFIER $$18 fixed_field_size opt_fixed_field_declarators SEMICOLON",
    "field_declaration : opt_attributes opt_modifiers FIXED simple_type error SEMICOLON",
    "opt_field_initializer :",
    "$$19 :",
    "opt_field_initializer : ASSIGN $$19 variable_initializer",
    "opt_field_declarators :",
    "opt_field_declarators : field_declarators",
    "field_declarators : field_declarator",
    "field_declarators : field_declarators field_declarator",
    "field_declarator : COMMA IDENTIFIER",
    "$$20 :",
    "field_declarator : COMMA IDENTIFIER ASSIGN $$20 variable_initializer",
    "opt_fixed_field_declarators :",
    "opt_fixed_field_declarators : fixed_field_declarators",
    "fixed_field_declarators : fixed_field_declarator",
    "fixed_field_declarators : fixed_field_declarators fixed_field_declarator",
    "fixed_field_declarator : COMMA IDENTIFIER fixed_field_size",
    "$$21 :",
    "fixed_field_size : OPEN_BRACKET $$21 expression CLOSE_BRACKET",
    "fixed_field_size : OPEN_BRACKET error",
    "variable_initializer : expression",
    "variable_initializer : array_initializer",
    "variable_initializer : error",
    "$$22 :",
    "method_declaration : method_header $$22 method_body",
    "$$23 :",
    "interaction_method_declaration : interaction_method_header $$23 method_body",
    "$$24 :",
    "$$25 :",
    "$$26 :",
    "interaction_method_header : opt_attributes INTERACTION $$24 member_type method_declaration_name OPEN_PARENS $$25 opt_formal_parameter_list CLOSE_PARENS $$26 opt_type_parameter_constraints_clauses",
    "$$27 :",
    "role_method_declaration : role_method_header $$27 method_body",
    "opt_entry :",
    "opt_entry : ENTRY",
    "$$28 :",
    "$$29 :",
    "role_method_header : opt_attributes opt_entry member_type method_declaration_name OPEN_PARENS $$28 opt_formal_parameter_list CLOSE_PARENS $$29 opt_type_parameter_constraints_clauses",
    "$$30 :",
    "$$31 :",
    "method_header : opt_attributes opt_modifiers member_type method_declaration_name OPEN_PARENS $$30 opt_formal_parameter_list CLOSE_PARENS $$31 opt_type_parameter_constraints_clauses",
    "$$32 :",
    "$$33 :",
    "$$34 :",
    "method_header : opt_attributes opt_modifiers PARTIAL VOID $$32 method_declaration_name OPEN_PARENS $$33 opt_formal_parameter_list CLOSE_PARENS $$34 opt_type_parameter_constraints_clauses",
    "method_header : opt_attributes opt_modifiers member_type modifiers method_declaration_name OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS",
    "method_body : block",
    "method_body : SEMICOLON",
    "opt_formal_parameter_list :",
    "opt_formal_parameter_list : formal_parameter_list",
    "formal_parameter_list : fixed_parameters",
    "formal_parameter_list : fixed_parameters COMMA parameter_array",
    "formal_parameter_list : fixed_parameters COMMA arglist_modifier",
    "formal_parameter_list : parameter_array COMMA error",
    "formal_parameter_list : fixed_parameters COMMA parameter_array COMMA error",
    "formal_parameter_list : arglist_modifier COMMA error",
    "formal_parameter_list : fixed_parameters COMMA ARGLIST COMMA error",
    "formal_parameter_list : parameter_array",
    "formal_parameter_list : arglist_modifier",
    "formal_parameter_list : error",
    "fixed_parameters : fixed_parameter",
    "fixed_parameters : fixed_parameters COMMA fixed_parameter",
    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type IDENTIFIER",
    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type IDENTIFIER OPEN_BRACKET CLOSE_BRACKET",
    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type error",
    "$$35 :",
    "fixed_parameter : opt_attributes opt_parameter_modifier parameter_type IDENTIFIER ASSIGN $$35 constant_expression",
    "opt_parameter_modifier :",
    "opt_parameter_modifier : parameter_modifiers",
    "parameter_modifiers : parameter_modifier",
    "parameter_modifiers : parameter_modifiers parameter_modifier",
    "parameter_modifier : REF",
    "parameter_modifier : OUT",
    "parameter_modifier : THIS",
    "parameter_array : opt_attributes params_modifier type IDENTIFIER",
    "parameter_array : opt_attributes params_modifier type IDENTIFIER ASSIGN constant_expression",
    "parameter_array : opt_attributes params_modifier type error",
    "params_modifier : PARAMS",
    "params_modifier : PARAMS parameter_modifier",
    "params_modifier : PARAMS params_modifier",
    "arglist_modifier : ARGLIST",
    "$$36 :",
    "$$37 :",
    "$$38 :",
    "property_declaration : opt_attributes opt_modifiers member_type member_declaration_name $$36 OPEN_BRACE $$37 accessor_declarations $$38 CLOSE_BRACE",
    "$$39 :",
    "$$40 :",
    "$$41 :",
    "indexer_declaration : opt_attributes opt_modifiers member_type indexer_declaration_name OPEN_BRACKET $$39 opt_formal_parameter_list CLOSE_BRACKET OPEN_BRACE $$40 accessor_declarations $$41 CLOSE_BRACE",
    "accessor_declarations : get_accessor_declaration",
    "accessor_declarations : get_accessor_declaration accessor_declarations",
    "accessor_declarations : set_accessor_declaration",
    "accessor_declarations : set_accessor_declaration accessor_declarations",
    "accessor_declarations : error",
    "$$42 :",
    "get_accessor_declaration : opt_attributes opt_modifiers GET $$42 accessor_body",
    "$$43 :",
    "set_accessor_declaration : opt_attributes opt_modifiers SET $$43 accessor_body",
    "accessor_body : block",
    "accessor_body : SEMICOLON",
    "accessor_body : error",
    "$$44 :",
    "$$45 :",
    "$$46 :",
    "$$47 :",
    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE $$44 type_declaration_name $$45 opt_class_base opt_type_parameter_constraints_clauses $$46 OPEN_BRACE opt_interface_member_declarations CLOSE_BRACE $$47 opt_semicolon",
    "interface_declaration : opt_attributes opt_modifiers opt_partial INTERFACE error",
    "opt_interface_member_declarations :",
    "opt_interface_member_declarations : interface_member_declarations",
    "interface_member_declarations : interface_member_declaration",
    "interface_member_declarations : interface_member_declarations interface_member_declaration",
    "interface_member_declaration : constant_declaration",
    "interface_member_declaration : field_declaration",
    "interface_member_declaration : method_declaration",
    "interface_member_declaration : property_declaration",
    "interface_member_declaration : event_declaration",
    "interface_member_declaration : indexer_declaration",
    "interface_member_declaration : operator_declaration",
    "interface_member_declaration : constructor_declaration",
    "interface_member_declaration : type_declaration",
    "$$48 :",
    "operator_declaration : opt_attributes opt_modifiers operator_declarator $$48 operator_body",
    "operator_body : block",
    "operator_body : SEMICOLON",
    "operator_type : type_expression_or_array",
    "operator_type : VOID",
    "$$49 :",
    "operator_declarator : operator_type OPERATOR overloadable_operator OPEN_PARENS $$49 opt_formal_parameter_list CLOSE_PARENS",
    "operator_declarator : conversion_operator_declarator",
    "overloadable_operator : BANG",
    "overloadable_operator : TILDE",
    "overloadable_operator : OP_INC",
    "overloadable_operator : OP_DEC",
    "overloadable_operator : TRUE",
    "overloadable_operator : FALSE",
    "overloadable_operator : PLUS",
    "overloadable_operator : MINUS",
    "overloadable_operator : STAR",
    "overloadable_operator : DIV",
    "overloadable_operator : PERCENT",
    "overloadable_operator : BITWISE_AND",
    "overloadable_operator : BITWISE_OR",
    "overloadable_operator : CARRET",
    "overloadable_operator : OP_SHIFT_LEFT",
    "overloadable_operator : OP_SHIFT_RIGHT",
    "overloadable_operator : OP_EQ",
    "overloadable_operator : OP_NE",
    "overloadable_operator : OP_GT",
    "overloadable_operator : OP_LT",
    "overloadable_operator : OP_GE",
    "overloadable_operator : OP_LE",
    "$$50 :",
    "conversion_operator_declarator : IMPLICIT OPERATOR type OPEN_PARENS $$50 opt_formal_parameter_list CLOSE_PARENS",
    "$$51 :",
    "conversion_operator_declarator : EXPLICIT OPERATOR type OPEN_PARENS $$51 opt_formal_parameter_list CLOSE_PARENS",
    "conversion_operator_declarator : IMPLICIT error",
    "conversion_operator_declarator : EXPLICIT error",
    "constructor_declaration : constructor_declarator constructor_body",
    "$$52 :",
    "$$53 :",
    "constructor_declarator : opt_attributes opt_modifiers IDENTIFIER $$52 OPEN_PARENS opt_formal_parameter_list CLOSE_PARENS $$53 opt_constructor_initializer",
    "constructor_body : block_prepared",
    "constructor_body : SEMICOLON",
    "opt_constructor_initializer :",
    "opt_constructor_initializer : constructor_initializer",
    "$$54 :",
    "constructor_initializer : COLON BASE OPEN_PARENS $$54 opt_argument_list CLOSE_PARENS",
    "$$55 :",
    "constructor_initializer : COLON THIS OPEN_PARENS $$55 opt_argument_list CLOSE_PARENS",
    "constructor_initializer : error",
    "$$56 :",
    "destructor_declaration : opt_attributes opt_modifiers TILDE $$56 IDENTIFIER OPEN_PARENS CLOSE_PARENS method_body",
    "$$57 :",
    "event_declaration : opt_attributes opt_modifiers EVENT type member_declaration_name $$57 opt_event_initializer opt_event_declarators SEMICOLON",
    "$$58 :",
    "$$59 :",
    "event_declaration : opt_attributes opt_modifiers EVENT type member_declaration_name OPEN_BRACE $$58 event_accessor_declarations $$59 CLOSE_BRACE",
    "opt_event_initializer :",
    "$$60 :",
    "opt_event_initializer : ASSIGN $$60 event_variable_initializer",
    "opt_event_declarators :",
    "opt_event_declarators : event_declarators",
    "event_declarators : event_declarator",
    "event_declarators : event_declarators event_declarator",
    "event_declarator : COMMA IDENTIFIER",
    "$$61 :",
    "event_declarator : COMMA IDENTIFIER ASSIGN $$61 event_variable_initializer",
    "$$62 :",
    "event_variable_initializer : $$62 variable_initializer",
    "event_accessor_declarations : add_accessor_declaration remove_accessor_declaration",
    "event_accessor_declarations : remove_accessor_declaration add_accessor_declaration",
    "event_accessor_declarations : add_accessor_declaration",
    "event_accessor_declarations : remove_accessor_declaration",
    "event_accessor_declarations : error",
    "$$63 :",
    "add_accessor_declaration : opt_attributes opt_modifiers ADD $$63 event_accessor_block",
    "$$64 :",
    "remove_accessor_declaration : opt_attributes opt_modifiers REMOVE $$64 event_accessor_block",
    "event_accessor_block : opt_semicolon",
    "event_accessor_block : block",
    "$$65 :",
    "$$66 :",
    "$$67 :",
    "enum_declaration : opt_attributes opt_modifiers ENUM type_declaration_name opt_enum_base $$65 OPEN_BRACE $$66 opt_enum_member_declarations $$67 CLOSE_BRACE opt_semicolon",
    "opt_enum_base :",
    "opt_enum_base : COLON type",
    "opt_enum_base : COLON error",
    "opt_enum_member_declarations :",
    "opt_enum_member_declarations : enum_member_declarations",
    "opt_enum_member_declarations : enum_member_declarations COMMA",
    "enum_member_declarations : enum_member_declaration",
    "enum_member_declarations : enum_member_declarations COMMA enum_member_declaration",
    "enum_member_declaration : opt_attributes IDENTIFIER",
    "$$68 :",
    "enum_member_declaration : opt_attributes IDENTIFIER $$68 ASSIGN constant_expression",
    "$$69 :",
    "$$70 :",
    "$$71 :",
    "delegate_declaration : opt_attributes opt_modifiers DELEGATE member_type type_declaration_name OPEN_PARENS $$69 opt_formal_parameter_list CLOSE_PARENS $$70 opt_type_parameter_constraints_clauses $$71 SEMICOLON",
    "opt_nullable :",
    "opt_nullable : INTERR_NULLABLE",
    "namespace_or_type_name : member_name",
    "namespace_or_type_name : qualified_alias_member IDENTIFIER opt_type_argument_list",
    "member_name : type_name",
    "member_name : namespace_or_type_name DOT IDENTIFIER opt_type_argument_list",
    "type_name : IDENTIFIER opt_type_argument_list",
    "opt_type_argument_list :",
    "opt_type_argument_list : OP_GENERICS_LT type_arguments OP_GENERICS_GT",
    "opt_type_argument_list : OP_GENERICS_LT error",
    "type_arguments : type",
    "type_arguments : type_arguments COMMA type",
    "$$72 :",
    "type_declaration_name : IDENTIFIER $$72 opt_type_parameter_list",
    "member_declaration_name : method_declaration_name",
    "method_declaration_name : type_declaration_name",
    "method_declaration_name : explicit_interface IDENTIFIER opt_type_parameter_list",
    "indexer_declaration_name : THIS",
    "indexer_declaration_name : explicit_interface THIS",
    "explicit_interface : IDENTIFIER opt_type_argument_list DOT",
    "explicit_interface : qualified_alias_member IDENTIFIER opt_type_argument_list DOT",
    "explicit_interface : explicit_interface IDENTIFIER opt_type_argument_list DOT",
    "opt_type_parameter_list :",
    "opt_type_parameter_list : OP_GENERICS_LT_DECL type_parameters OP_GENERICS_GT",
    "type_parameters : type_parameter",
    "type_parameters : type_parameters COMMA type_parameter",
    "type_parameter : opt_attributes opt_type_parameter_variance IDENTIFIER",
    "type_parameter : error",
    "type_and_void : type_expression_or_array",
    "type_and_void : VOID",
    "member_type : type_and_void",
    "type : type_expression_or_array",
    "type : VOID",
    "simple_type : type_expression",
    "simple_type : VOID",
    "parameter_type : type_expression_or_array",
    "parameter_type : VOID",
    "type_expression_or_array : type_expression",
    "type_expression_or_array : type_expression rank_specifiers",
    "type_expression : namespace_or_type_name opt_nullable",
    "type_expression : namespace_or_type_name pointer_stars",
    "type_expression : builtin_types opt_nullable",
    "type_expression : builtin_types pointer_stars",
    "type_expression : VOID pointer_stars",
    "type_list : base_type_name",
    "type_list : type_list COMMA base_type_name",
    "base_type_name : type",
    "base_type_name : error",
    "builtin_types : OBJECT",
    "builtin_types : STRING",
    "builtin_types : BOOL",
    "builtin_types : DECIMAL",
    "builtin_types : FLOAT",
    "builtin_types : DOUBLE",
    "builtin_types : integral_type",
    "integral_type : SBYTE",
    "integral_type : BYTE",
    "integral_type : SHORT",
    "integral_type : USHORT",
    "integral_type : INT",
    "integral_type : UINT",
    "integral_type : LONG",
    "integral_type : ULONG",
    "integral_type : CHAR",
    "primary_expression : checkForInteractionExpression",
    "checkForInteractionExpression : primary_expression_or_type",
    "checkForInteractionExpression : literal",
    "checkForInteractionExpression : array_creation_expression",
    "checkForInteractionExpression : parenthesized_expression",
    "checkForInteractionExpression : default_value_expression",
    "checkForInteractionExpression : invocation_expression",
    "checkForInteractionExpression : element_access",
    "checkForInteractionExpression : this_access",
    "checkForInteractionExpression : base_access",
    "checkForInteractionExpression : post_increment_expression",
    "checkForInteractionExpression : post_decrement_expression",
    "checkForInteractionExpression : object_or_delegate_creation_expression",
    "checkForInteractionExpression : anonymous_type_expression",
    "checkForInteractionExpression : typeof_expression",
    "checkForInteractionExpression : sizeof_expression",
    "checkForInteractionExpression : checked_expression",
    "checkForInteractionExpression : unchecked_expression",
    "checkForInteractionExpression : pointer_member_access",
    "checkForInteractionExpression : anonymous_method_expression",
    "checkForInteractionExpression : undocumented_expressions",
    "primary_expression_or_type : IDENTIFIER opt_type_argument_list",
    "primary_expression_or_type : IDENTIFIER GENERATE_COMPLETION",
    "primary_expression_or_type : member_access",
    "literal : boolean_literal",
    "literal : LITERAL",
    "literal : NULL",
    "boolean_literal : TRUE",
    "boolean_literal : FALSE",
    "open_parens_any : OPEN_PARENS",
    "open_parens_any : OPEN_PARENS_CAST",
    "close_parens : CLOSE_PARENS",
    "close_parens : COMPLETE_COMPLETION",
    "parenthesized_expression : OPEN_PARENS expression CLOSE_PARENS",
    "parenthesized_expression : OPEN_PARENS expression COMPLETE_COMPLETION",
    "member_access : primary_expression DOT IDENTIFIER opt_type_argument_list",
    "member_access : builtin_types DOT IDENTIFIER opt_type_argument_list",
    "member_access : BASE DOT IDENTIFIER opt_type_argument_list",
    "member_access : qualified_alias_member IDENTIFIER opt_type_argument_list",
    "member_access : primary_expression DOT GENERATE_COMPLETION",
    "member_access : primary_expression DOT IDENTIFIER GENERATE_COMPLETION",
    "member_access : builtin_types DOT GENERATE_COMPLETION",
    "member_access : builtin_types DOT IDENTIFIER GENERATE_COMPLETION",
    "$$73 :",
    "$$74 :",
    "invocation_expression : primary_expression open_parens_any $$73 opt_argument_list $$74 close_parens",
    "opt_object_or_collection_initializer :",
    "opt_object_or_collection_initializer : object_or_collection_initializer",
    "object_or_collection_initializer : OPEN_BRACE opt_member_initializer_list close_brace_or_complete_completion",
    "object_or_collection_initializer : OPEN_BRACE member_initializer_list COMMA CLOSE_BRACE",
    "opt_member_initializer_list :",
    "opt_member_initializer_list : member_initializer_list",
    "member_initializer_list : member_initializer",
    "member_initializer_list : member_initializer_list COMMA member_initializer",
    "member_initializer_list : member_initializer_list error",
    "member_initializer : IDENTIFIER ASSIGN initializer_value",
    "member_initializer : GENERATE_COMPLETION",
    "member_initializer : non_assignment_expression opt_COMPLETE_COMPLETION",
    "member_initializer : OPEN_BRACE expression_list CLOSE_BRACE",
    "member_initializer : OPEN_BRACE CLOSE_BRACE",
    "initializer_value : expression",
    "initializer_value : object_or_collection_initializer",
    "opt_argument_list :",
    "opt_argument_list : argument_list",
    "argument_list : argument_or_named_argument",
    "argument_list : argument_list COMMA argument",
    "argument_list : argument_list COMMA named_argument",
    "argument_list : argument_list COMMA",
    "argument_list : COMMA error",
    "argument : expression",
    "argument : non_simple_argument",
    "argument_or_named_argument : argument",
    "argument_or_named_argument : named_argument",
    "non_simple_argument : REF variable_reference",
    "non_simple_argument : OUT variable_reference",
    "non_simple_argument : ARGLIST OPEN_PARENS argument_list CLOSE_PARENS",
    "non_simple_argument : ARGLIST OPEN_PARENS CLOSE_PARENS",
    "variable_reference : expression",
    "element_access : primary_expression OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
    "expression_list : expression",
    "expression_list : expression_list COMMA expression",
    "expression_list : expression_list error",
    "expression_list_arguments : expression_list_argument",
    "expression_list_arguments : expression_list_arguments COMMA expression_list_argument",
    "expression_list_argument : expression",
    "expression_list_argument : named_argument",
    "this_access : THIS",
    "base_access : BASE OPEN_BRACKET_EXPR expression_list_arguments CLOSE_BRACKET",
    "base_access : BASE OPEN_BRACKET error",
    "post_increment_expression : primary_expression OP_INC",
    "post_decrement_expression : primary_expression OP_DEC",
    "object_or_delegate_creation_expression : NEW new_expr_type open_parens_any opt_argument_list CLOSE_PARENS opt_object_or_collection_initializer",
    "object_or_delegate_creation_expression : NEW new_expr_type object_or_collection_initializer",
    "array_creation_expression : NEW new_expr_type OPEN_BRACKET_EXPR expression_list CLOSE_BRACKET opt_rank_specifier opt_array_initializer",
    "array_creation_expression : NEW new_expr_type rank_specifiers opt_array_initializer",
    "array_creation_expression : NEW rank_specifier array_initializer",
    "array_creation_expression : NEW new_expr_type OPEN_BRACKET CLOSE_BRACKET OPEN_BRACKET_EXPR error CLOSE_BRACKET",
    "array_creation_expression : NEW new_expr_type error",
    "$$75 :",
    "new_expr_type : $$75 simple_type",
    "anonymous_type_expression : NEW OPEN_BRACE anonymous_type_parameters_opt_comma CLOSE_BRACE",
    "anonymous_type_parameters_opt_comma : anonymous_type_parameters_opt",
    "anonymous_type_parameters_opt_comma : anonymous_type_parameters COMMA",
    "anonymous_type_parameters_opt :",
    "anonymous_type_parameters_opt : anonymous_type_parameters",
    "anonymous_type_parameters : anonymous_type_parameter",
    "anonymous_type_parameters : anonymous_type_parameters COMMA anonymous_type_parameter",
    "anonymous_type_parameter : IDENTIFIER ASSIGN variable_initializer",
    "anonymous_type_parameter : IDENTIFIER",
    "anonymous_type_parameter : member_access",
    "anonymous_type_parameter : error",
    "opt_rank_specifier :",
    "opt_rank_specifier : rank_specifiers",
    "rank_specifiers : rank_specifier",
    "rank_specifiers : rank_specifier rank_specifiers",
    "rank_specifier : OPEN_BRACKET CLOSE_BRACKET",
    "rank_specifier : OPEN_BRACKET dim_separators CLOSE_BRACKET",
    "dim_separators : COMMA",
    "dim_separators : dim_separators COMMA",
    "opt_array_initializer :",
    "opt_array_initializer : array_initializer",
    "array_initializer : OPEN_BRACE CLOSE_BRACE",
    "array_initializer : OPEN_BRACE variable_initializer_list opt_comma CLOSE_BRACE",
    "variable_initializer_list : variable_initializer",
    "variable_initializer_list : variable_initializer_list COMMA variable_initializer",
    "$$76 :",
    "typeof_expression : TYPEOF $$76 open_parens_any typeof_type_expression CLOSE_PARENS",
    "typeof_type_expression : type_and_void",
    "typeof_type_expression : unbound_type_name",
    "typeof_type_expression : error",
    "unbound_type_name : identifier_inside_body generic_dimension",
    "unbound_type_name : qualified_alias_member identifier_inside_body generic_dimension",
    "unbound_type_name : unbound_type_name DOT identifier_inside_body",
    "unbound_type_name : unbound_type_name DOT identifier_inside_body generic_dimension",
    "unbound_type_name : namespace_or_type_name DOT identifier_inside_body generic_dimension",
    "generic_dimension : GENERIC_DIMENSION",
    "qualified_alias_member : IDENTIFIER DOUBLE_COLON",
    "sizeof_expression : SIZEOF open_parens_any type CLOSE_PARENS",
    "checked_expression : CHECKED open_parens_any expression CLOSE_PARENS",
    "unchecked_expression : UNCHECKED open_parens_any expression CLOSE_PARENS",
    "pointer_member_access : primary_expression OP_PTR IDENTIFIER opt_type_argument_list",
    "$$77 :",
    "anonymous_method_expression : DELEGATE opt_anonymous_method_signature $$77 block",
    "$$78 :",
    "anonymous_method_expression : ASYNC DELEGATE opt_anonymous_method_signature $$78 block",
    "opt_anonymous_method_signature :",
    "opt_anonymous_method_signature : anonymous_method_signature",
    "$$79 :",
    "anonymous_method_signature : OPEN_PARENS $$79 opt_formal_parameter_list CLOSE_PARENS",
    "default_value_expression : DEFAULT open_parens_any type CLOSE_PARENS",
    "unary_expression : primary_expression",
    "unary_expression : BANG prefixed_unary_expression",
    "unary_expression : TILDE prefixed_unary_expression",
    "unary_expression : OPEN_PARENS_CAST type CLOSE_PARENS prefixed_unary_expression",
    "unary_expression : AWAIT prefixed_unary_expression",
    "prefixed_unary_expression : unary_expression",
    "prefixed_unary_expression : PLUS prefixed_unary_expression",
    "prefixed_unary_expression : MINUS prefixed_unary_expression",
    "prefixed_unary_expression : OP_INC prefixed_unary_expression",
    "prefixed_unary_expression : OP_DEC prefixed_unary_expression",
    "prefixed_unary_expression : STAR prefixed_unary_expression",
    "prefixed_unary_expression : BITWISE_AND prefixed_unary_expression",
    "multiplicative_expression : prefixed_unary_expression",
    "multiplicative_expression : multiplicative_expression STAR prefixed_unary_expression",
    "multiplicative_expression : multiplicative_expression DIV prefixed_unary_expression",
    "multiplicative_expression : multiplicative_expression PERCENT prefixed_unary_expression",
    "additive_expression : multiplicative_expression",
    "additive_expression : additive_expression PLUS multiplicative_expression",
    "additive_expression : additive_expression MINUS multiplicative_expression",
    "additive_expression : parenthesized_expression MINUS multiplicative_expression",
    "additive_expression : additive_expression AS type",
    "additive_expression : additive_expression IS type",
    "shift_expression : additive_expression",
    "shift_expression : shift_expression OP_SHIFT_LEFT additive_expression",
    "shift_expression : shift_expression OP_SHIFT_RIGHT additive_expression",
    "relational_expression : shift_expression",
    "relational_expression : relational_expression OP_LT shift_expression",
    "relational_expression : relational_expression OP_GT shift_expression",
    "relational_expression : relational_expression OP_LE shift_expression",
    "relational_expression : relational_expression OP_GE shift_expression",
    "equality_expression : relational_expression",
    "equality_expression : equality_expression OP_EQ relational_expression",
    "equality_expression : equality_expression OP_NE relational_expression",
    "and_expression : equality_expression",
    "and_expression : and_expression BITWISE_AND equality_expression",
    "exclusive_or_expression : and_expression",
    "exclusive_or_expression : exclusive_or_expression CARRET and_expression",
    "inclusive_or_expression : exclusive_or_expression",
    "inclusive_or_expression : inclusive_or_expression BITWISE_OR exclusive_or_expression",
    "conditional_and_expression : inclusive_or_expression",
    "conditional_and_expression : conditional_and_expression OP_AND inclusive_or_expression",
    "conditional_or_expression : conditional_and_expression",
    "conditional_or_expression : conditional_or_expression OP_OR conditional_and_expression",
    "null_coalescing_expression : conditional_or_expression",
    "null_coalescing_expression : conditional_or_expression OP_COALESCING null_coalescing_expression",
    "conditional_expression : null_coalescing_expression",
    "conditional_expression : null_coalescing_expression INTERR expression COLON expression",
    "assignment_expression : prefixed_unary_expression ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_MULT_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_DIV_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_MOD_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_ADD_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_SUB_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_SHIFT_LEFT_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_SHIFT_RIGHT_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_AND_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_OR_ASSIGN expression",
    "assignment_expression : prefixed_unary_expression OP_XOR_ASSIGN expression",
    "lambda_parameter_list : lambda_parameter",
    "lambda_parameter_list : lambda_parameter_list COMMA lambda_parameter",
    "lambda_parameter : parameter_modifier parameter_type identifier_inside_body",
    "lambda_parameter : parameter_type identifier_inside_body",
    "lambda_parameter : IDENTIFIER",
    "opt_lambda_parameter_list :",
    "opt_lambda_parameter_list : lambda_parameter_list",
    "lambda_expression_body : lambda_expression_body_simple",
    "lambda_expression_body : block",
    "$$80 :",
    "lambda_expression_body_simple : $$80 expression_or_error",
    "expression_or_error : expression",
    "expression_or_error : error",
    "$$81 :",
    "lambda_expression : IDENTIFIER ARROW $$81 lambda_expression_body",
    "$$82 :",
    "lambda_expression : ASYNC identifier_inside_body ARROW $$82 lambda_expression_body",
    "$$83 :",
    "$$84 :",
    "lambda_expression : OPEN_PARENS_LAMBDA $$83 opt_lambda_parameter_list CLOSE_PARENS ARROW $$84 lambda_expression_body",
    "$$85 :",
    "$$86 :",
    "lambda_expression : ASYNC OPEN_PARENS_LAMBDA $$85 opt_lambda_parameter_list CLOSE_PARENS ARROW $$86 lambda_expression_body",
    "expression : assignment_expression",
    "expression : non_assignment_expression",
    "non_assignment_expression : conditional_expression",
    "non_assignment_expression : lambda_expression",
    "non_assignment_expression : query_expression",
    "non_assignment_expression : ARGLIST",
    "undocumented_expressions : REFVALUE OPEN_PARENS non_assignment_expression COMMA type CLOSE_PARENS",
    "undocumented_expressions : REFTYPE open_parens_any expression CLOSE_PARENS",
    "undocumented_expressions : MAKEREF open_parens_any expression CLOSE_PARENS",
    "constant_expression : expression",
    "boolean_expression : expression",
    "$$87 :",
    "$$88 :",
    "$$89 :",
    "$$90 :",
    "class_declaration : opt_attributes opt_modifiers opt_partial CLASS $$87 type_declaration_name $$88 opt_class_base opt_type_parameter_constraints_clauses $$89 OPEN_BRACE opt_class_member_declarations CLOSE_BRACE $$90 opt_semicolon",
    "opt_partial :",
    "opt_partial : PARTIAL",
    "opt_modifiers :",
    "opt_modifiers : modifiers",
    "modifiers : modifier",
    "modifiers : modifiers modifier",
    "modifier : NEW",
    "modifier : PUBLIC",
    "modifier : PROTECTED",
    "modifier : INTERNAL",
    "modifier : PRIVATE",
    "modifier : ABSTRACT",
    "modifier : SEALED",
    "modifier : STATIC",
    "modifier : READONLY",
    "modifier : VIRTUAL",
    "modifier : OVERRIDE",
    "modifier : EXTERN",
    "modifier : VOLATILE",
    "modifier : UNSAFE",
    "modifier : ASYNC",
    "opt_class_base :",
    "opt_class_base : COLON type_list",
    "opt_type_parameter_constraints_clauses :",
    "opt_type_parameter_constraints_clauses : type_parameter_constraints_clauses",
    "opt_type_parameter_constraints_clauses : error",
    "type_parameter_constraints_clauses : type_parameter_constraints_clause",
    "type_parameter_constraints_clauses : type_parameter_constraints_clauses type_parameter_constraints_clause",
    "type_parameter_constraints_clause : WHERE IDENTIFIER COLON type_parameter_constraints",
    "type_parameter_constraints : type_parameter_constraint",
    "type_parameter_constraints : type_parameter_constraints COMMA type_parameter_constraint",
    "type_parameter_constraint : type",
    "type_parameter_constraint : NEW OPEN_PARENS CLOSE_PARENS",
    "type_parameter_constraint : CLASS",
    "type_parameter_constraint : STRUCT",
    "opt_type_parameter_variance :",
    "opt_type_parameter_variance : type_parameter_variance",
    "type_parameter_variance : OUT",
    "type_parameter_variance : IN",
    "$$91 :",
    "block : OPEN_BRACE $$91 opt_statement_list block_end",
    "block_end : CLOSE_BRACE",
    "block_end : COMPLETE_COMPLETION",
    "$$92 :",
    "block_prepared : OPEN_BRACE $$92 opt_statement_list CLOSE_BRACE",
    "opt_statement_list :",
    "opt_statement_list : statement_list",
    "statement_list : statement",
    "statement_list : statement_list statement",
    "statement : block_variable_declaration",
    "statement : valid_declaration_statement",
    "statement : labeled_statement",
    "statement : error",
    "interactive_statement_list : interactive_statement",
    "interactive_statement_list : interactive_statement_list interactive_statement",
    "interactive_statement : block_variable_declaration",
    "interactive_statement : interactive_valid_declaration_statement",
    "interactive_statement : labeled_statement",
    "valid_declaration_statement : block",
    "valid_declaration_statement : empty_statement",
    "valid_declaration_statement : expression_statement",
    "valid_declaration_statement : selection_statement",
    "valid_declaration_statement : iteration_statement",
    "valid_declaration_statement : jump_statement",
    "valid_declaration_statement : try_statement",
    "valid_declaration_statement : checked_statement",
    "valid_declaration_statement : unchecked_statement",
    "valid_declaration_statement : lock_statement",
    "valid_declaration_statement : using_statement",
    "valid_declaration_statement : unsafe_statement",
    "valid_declaration_statement : fixed_statement",
    "interactive_valid_declaration_statement : block",
    "interactive_valid_declaration_statement : empty_statement",
    "interactive_valid_declaration_statement : interactive_expression_statement",
    "interactive_valid_declaration_statement : selection_statement",
    "interactive_valid_declaration_statement : iteration_statement",
    "interactive_valid_declaration_statement : jump_statement",
    "interactive_valid_declaration_statement : try_statement",
    "interactive_valid_declaration_statement : checked_statement",
    "interactive_valid_declaration_statement : unchecked_statement",
    "interactive_valid_declaration_statement : lock_statement",
    "interactive_valid_declaration_statement : using_statement",
    "interactive_valid_declaration_statement : unsafe_statement",
    "interactive_valid_declaration_statement : fixed_statement",
    "embedded_statement : valid_declaration_statement",
    "embedded_statement : block_variable_declaration",
    "embedded_statement : labeled_statement",
    "embedded_statement : error",
    "empty_statement : SEMICOLON",
    "$$93 :",
    "labeled_statement : identifier_inside_body COLON $$93 statement",
    "variable_type : variable_type_simple",
    "variable_type : variable_type_simple rank_specifiers",
    "variable_type_simple : primary_expression_or_type opt_nullable",
    "variable_type_simple : primary_expression_or_type pointer_stars",
    "variable_type_simple : builtin_types opt_nullable",
    "variable_type_simple : builtin_types pointer_stars",
    "variable_type_simple : VOID pointer_stars",
    "variable_type_simple : VOID",
    "pointer_stars : pointer_star",
    "pointer_stars : pointer_star pointer_stars",
    "pointer_star : STAR",
    "identifier_inside_body : IDENTIFIER",
    "identifier_inside_body : AWAIT",
    "$$94 :",
    "block_variable_declaration : variable_type identifier_inside_body $$94 opt_local_variable_initializer opt_variable_declarators SEMICOLON",
    "$$95 :",
    "block_variable_declaration : CONST variable_type identifier_inside_body $$95 const_variable_initializer opt_const_declarators SEMICOLON",
    "opt_local_variable_initializer :",
    "opt_local_variable_initializer : ASSIGN block_variable_initializer",
    "opt_local_variable_initializer : error",
    "opt_variable_declarators :",
    "opt_variable_declarators : variable_declarators",
    "opt_using_or_fixed_variable_declarators :",
    "opt_using_or_fixed_variable_declarators : variable_declarators",
    "variable_declarators : variable_declarator",
    "variable_declarators : variable_declarators variable_declarator",
    "variable_declarator : COMMA identifier_inside_body",
    "variable_declarator : COMMA identifier_inside_body ASSIGN block_variable_initializer",
    "const_variable_initializer :",
    "const_variable_initializer : ASSIGN constant_initializer_expr",
    "opt_const_declarators :",
    "opt_const_declarators : const_declarators",
    "const_declarators : const_declarator",
    "const_declarators : const_declarators const_declarator",
    "const_declarator : COMMA identifier_inside_body ASSIGN constant_initializer_expr",
    "block_variable_initializer : variable_initializer",
    "block_variable_initializer : STACKALLOC simple_type OPEN_BRACKET_EXPR expression CLOSE_BRACKET",
    "block_variable_initializer : STACKALLOC simple_type",
    "expression_statement : statement_expression SEMICOLON",
    "expression_statement : statement_expression COMPLETE_COMPLETION",
    "interactive_expression_statement : interactive_statement_expression SEMICOLON",
    "interactive_expression_statement : interactive_statement_expression COMPLETE_COMPLETION",
    "statement_expression : expression",
    "interactive_statement_expression : expression",
    "interactive_statement_expression : error",
    "selection_statement : if_statement",
    "selection_statement : switch_statement",
    "if_statement : IF open_parens_any boolean_expression CLOSE_PARENS embedded_statement",
    "if_statement : IF open_parens_any boolean_expression CLOSE_PARENS embedded_statement ELSE embedded_statement",
    "$$96 :",
    "switch_statement : SWITCH open_parens_any expression CLOSE_PARENS OPEN_BRACE $$96 opt_switch_sections CLOSE_BRACE",
    "opt_switch_sections :",
    "opt_switch_sections : switch_sections",
    "switch_sections : switch_section",
    "switch_sections : switch_sections switch_section",
    "switch_sections : error",
    "$$97 :",
    "switch_section : switch_labels $$97 statement_list",
    "switch_labels : switch_label",
    "switch_labels : switch_labels switch_label",
    "switch_label : CASE constant_expression COLON",
    "switch_label : DEFAULT_COLON",
    "iteration_statement : while_statement",
    "iteration_statement : do_statement",
    "iteration_statement : for_statement",
    "iteration_statement : foreach_statement",
    "while_statement : WHILE open_parens_any boolean_expression CLOSE_PARENS embedded_statement",
    "do_statement : DO embedded_statement WHILE open_parens_any boolean_expression CLOSE_PARENS SEMICOLON",
    "$$98 :",
    "for_statement : FOR open_parens_any $$98 for_statement_cont",
    "for_statement_cont : opt_for_initializer SEMICOLON opt_for_condition SEMICOLON opt_for_iterator CLOSE_PARENS embedded_statement",
    "for_statement_cont : error",
    "opt_for_initializer :",
    "opt_for_initializer : for_initializer",
    "$$99 :",
    "for_initializer : variable_type identifier_inside_body $$99 opt_local_variable_initializer opt_variable_declarators",
    "for_initializer : statement_expression_list",
    "opt_for_condition :",
    "opt_for_condition : boolean_expression",
    "opt_for_iterator :",
    "opt_for_iterator : for_iterator",
    "for_iterator : statement_expression_list",
    "statement_expression_list : statement_expression",
    "statement_expression_list : statement_expression_list COMMA statement_expression",
    "foreach_statement : FOREACH open_parens_any type IN expression CLOSE_PARENS",
    "$$100 :",
    "foreach_statement : FOREACH open_parens_any type identifier_inside_body IN expression CLOSE_PARENS $$100 embedded_statement",
    "jump_statement : break_statement",
    "jump_statement : continue_statement",
    "jump_statement : goto_statement",
    "jump_statement : return_statement",
    "jump_statement : throw_statement",
    "jump_statement : yield_statement",
    "break_statement : BREAK SEMICOLON",
    "continue_statement : CONTINUE SEMICOLON",
    "goto_statement : GOTO identifier_inside_body SEMICOLON",
    "goto_statement : GOTO CASE constant_expression SEMICOLON",
    "goto_statement : GOTO DEFAULT SEMICOLON",
    "return_statement : RETURN opt_expression SEMICOLON",
    "throw_statement : THROW opt_expression SEMICOLON",
    "yield_statement : identifier_inside_body RETURN opt_expression SEMICOLON",
    "yield_statement : identifier_inside_body BREAK SEMICOLON",
    "opt_expression :",
    "opt_expression : expression",
    "try_statement : TRY block catch_clauses",
    "try_statement : TRY block FINALLY block",
    "try_statement : TRY block catch_clauses FINALLY block",
    "try_statement : TRY block error",
    "catch_clauses : catch_clause",
    "catch_clauses : catch_clauses catch_clause",
    "opt_identifier :",
    "opt_identifier : identifier_inside_body",
    "catch_clause : CATCH block",
    "$$101 :",
    "catch_clause : CATCH open_parens_any type opt_identifier CLOSE_PARENS $$101 block_prepared",
    "catch_clause : CATCH open_parens_any error",
    "checked_statement : CHECKED block",
    "unchecked_statement : UNCHECKED block",
    "$$102 :",
    "unsafe_statement : UNSAFE $$102 block",
    "lock_statement : LOCK open_parens_any expression CLOSE_PARENS embedded_statement",
    "$$103 :",
    "$$104 :",
    "fixed_statement : FIXED open_parens_any variable_type identifier_inside_body $$103 using_or_fixed_variable_initializer opt_using_or_fixed_variable_declarators CLOSE_PARENS $$104 embedded_statement",
    "$$105 :",
    "$$106 :",
    "using_statement : USING open_parens_any variable_type identifier_inside_body $$105 using_or_fixed_variable_initializer opt_using_or_fixed_variable_declarators CLOSE_PARENS $$106 embedded_statement",
    "using_statement : USING open_parens_any expression CLOSE_PARENS embedded_statement",
    "using_or_fixed_variable_initializer :",
    "using_or_fixed_variable_initializer : ASSIGN variable_initializer",
    "query_expression : first_from_clause query_body",
    "query_expression : nested_from_clause query_body",
    "query_expression : first_from_clause COMPLETE_COMPLETION",
    "query_expression : nested_from_clause COMPLETE_COMPLETION",
    "first_from_clause : FROM_FIRST identifier_inside_body IN expression",
    "first_from_clause : FROM_FIRST type identifier_inside_body IN expression",
    "nested_from_clause : FROM identifier_inside_body IN expression",
    "nested_from_clause : FROM type identifier_inside_body IN expression",
    "$$107 :",
    "from_clause : FROM identifier_inside_body IN $$107 expression",
    "$$108 :",
    "from_clause : FROM type identifier_inside_body IN $$108 expression",
    "query_body : opt_query_body_clauses select_or_group_clause opt_query_continuation",
    "query_body : opt_query_body_clauses COMPLETE_COMPLETION",
    "query_body : error",
    "$$109 :",
    "select_or_group_clause : SELECT $$109 expression",
    "$$110 :",
    "$$111 :",
    "select_or_group_clause : GROUP $$110 expression $$111 BY expression",
    "opt_query_body_clauses :",
    "opt_query_body_clauses : query_body_clauses",
    "query_body_clauses : query_body_clause",
    "query_body_clauses : query_body_clauses query_body_clause",
    "query_body_clause : from_clause",
    "query_body_clause : let_clause",
    "query_body_clause : where_clause",
    "query_body_clause : join_clause",
    "query_body_clause : orderby_clause",
    "$$112 :",
    "let_clause : LET identifier_inside_body ASSIGN $$112 expression",
    "$$113 :",
    "where_clause : WHERE $$113 expression",
    "$$114 :",
    "$$115 :",
    "$$116 :",
    "join_clause : JOIN identifier_inside_body IN $$114 expression ON $$115 expression EQUALS $$116 expression opt_join_into",
    "$$117 :",
    "$$118 :",
    "$$119 :",
    "join_clause : JOIN type identifier_inside_body IN $$117 expression ON $$118 expression EQUALS $$119 expression opt_join_into",
    "opt_join_into :",
    "opt_join_into : INTO identifier_inside_body",
    "$$120 :",
    "orderby_clause : ORDERBY $$120 orderings",
    "orderings : order_by",
    "$$121 :",
    "orderings : order_by COMMA $$121 orderings_then_by",
    "orderings_then_by : then_by",
    "$$122 :",
    "orderings_then_by : orderings_then_by COMMA $$122 then_by",
    "order_by : expression",
    "order_by : expression ASCENDING",
    "order_by : expression DESCENDING",
    "then_by : expression",
    "then_by : expression ASCENDING",
    "then_by : expression DESCENDING",
    "opt_query_continuation :",
    "$$123 :",
    "opt_query_continuation : INTO identifier_inside_body $$123 query_body",
    "interactive_parsing : EVAL_STATEMENT_PARSER EOF",
    "interactive_parsing : EVAL_USING_DECLARATIONS_UNIT_PARSER using_directives opt_COMPLETE_COMPLETION",
    "$$124 :",
    "interactive_parsing : EVAL_STATEMENT_PARSER $$124 interactive_statement_list opt_COMPLETE_COMPLETION",
    "interactive_parsing : EVAL_COMPILATION_UNIT_PARSER interactive_compilation_unit",
    "interactive_compilation_unit : opt_extern_alias_directives opt_using_directives",
    "interactive_compilation_unit : opt_extern_alias_directives opt_using_directives namespace_or_type_declarations",
    "opt_COMPLETE_COMPLETION :",
    "opt_COMPLETE_COMPLETION : COMPLETE_COMPLETION",
    "close_brace_or_complete_completion : CLOSE_BRACE",
    "close_brace_or_complete_completion : COMPLETE_COMPLETION",
    "documentation_parsing : DOC_SEE doc_cref",
    "doc_cref : doc_type_declaration_name opt_doc_method_sig",
    "doc_cref : builtin_types opt_doc_method_sig",
    "doc_cref : builtin_types DOT IDENTIFIER opt_doc_method_sig",
    "doc_cref : doc_type_declaration_name DOT THIS",
    "$$125 :",
    "doc_cref : doc_type_declaration_name DOT THIS OPEN_BRACKET $$125 opt_doc_parameters CLOSE_BRACKET",
    "doc_cref : EXPLICIT OPERATOR type opt_doc_method_sig",
    "doc_cref : IMPLICIT OPERATOR type opt_doc_method_sig",
    "doc_cref : OPERATOR overloadable_operator opt_doc_method_sig",
    "doc_type_declaration_name : type_declaration_name",
    "doc_type_declaration_name : doc_type_declaration_name DOT type_declaration_name",
    "opt_doc_method_sig :",
    "$$126 :",
    "opt_doc_method_sig : OPEN_PARENS $$126 opt_doc_parameters CLOSE_PARENS",
    "opt_doc_parameters :",
    "opt_doc_parameters : doc_parameters",
    "doc_parameters : doc_parameter",
    "doc_parameters : doc_parameters COMMA doc_parameter",
    "doc_parameter : opt_parameter_modifier parameter_type",
  };
 public static string getRule (int index) {
    return yyRule [index];
 }
}
  protected static  string [] yyNames = {    
    "end-of-file",null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,null,null,null,null,null,null,null,
    null,null,null,null,null,null,null,"EOF","NONE","ERROR",
    "FIRST_KEYWORD","ABSTRACT","AS","ADD","BASE","BOOL","BREAK","BYTE",
    "CASE","CATCH","CHAR","CHECKED","CLASS","CONST","CONTINUE","DECIMAL",
    "DEFAULT","DELEGATE","DO","DOUBLE","ELSE","ENUM","EVENT","EXPLICIT",
    "EXTERN","FALSE","FINALLY","FIXED","FLOAT","FOR","FOREACH","GOTO",
    "IF","IMPLICIT","IN","INT","INTERFACE","INTERNAL","IS","LOCK","LONG",
    "NAMESPACE","NEW","NULL","OBJECT","OPERATOR","OUT","OVERRIDE",
    "PARAMS","PRIVATE","PROTECTED","PUBLIC","READONLY","REF","RETURN",
    "REMOVE","SBYTE","SEALED","SHORT","SIZEOF","STACKALLOC","STATIC",
    "STRING","STRUCT","SWITCH","THIS","THROW","TRUE","TRY","TYPEOF",
    "UINT","ULONG","UNCHECKED","UNSAFE","USHORT","USING","VIRTUAL","VOID",
    "VOLATILE","WHERE","WHILE","ARGLIST","PARTIAL","ARROW","FROM",
    "FROM_FIRST","JOIN","ON","EQUALS","SELECT","GROUP","BY","LET",
    "ORDERBY","ASCENDING","DESCENDING","INTO","INTERR_NULLABLE",
    "EXTERN_ALIAS","REFVALUE","REFTYPE","MAKEREF","ASYNC","AWAIT","ROLE",
    "CONTRACT","INTERACTION","ENTRY","GET","SET","LAST_KEYWORD",
    "OPEN_BRACE","CLOSE_BRACE","OPEN_BRACKET","CLOSE_BRACKET",
    "OPEN_PARENS","CLOSE_PARENS","DOT","COMMA","COLON","SEMICOLON",
    "TILDE","PLUS","MINUS","BANG","ASSIGN","OP_LT","OP_GT","BITWISE_AND",
    "BITWISE_OR","STAR","PERCENT","DIV","CARRET","INTERR","DOUBLE_COLON",
    "OP_INC","OP_DEC","OP_SHIFT_LEFT","OP_SHIFT_RIGHT","OP_LE","OP_GE",
    "OP_EQ","OP_NE","OP_AND","OP_OR","OP_MULT_ASSIGN","OP_DIV_ASSIGN",
    "OP_MOD_ASSIGN","OP_ADD_ASSIGN","OP_SUB_ASSIGN",
    "OP_SHIFT_LEFT_ASSIGN","OP_SHIFT_RIGHT_ASSIGN","OP_AND_ASSIGN",
    "OP_XOR_ASSIGN","OP_OR_ASSIGN","OP_PTR","OP_COALESCING",
    "OP_GENERICS_LT","OP_GENERICS_LT_DECL","OP_GENERICS_GT","LITERAL",
    "IDENTIFIER","OPEN_PARENS_LAMBDA","OPEN_PARENS_CAST",
    "GENERIC_DIMENSION","DEFAULT_COLON","OPEN_BRACKET_EXPR",
    "EVAL_STATEMENT_PARSER","EVAL_COMPILATION_UNIT_PARSER",
    "EVAL_USING_DECLARATIONS_UNIT_PARSER","DOC_SEE","GENERATE_COMPLETION",
    "COMPLETE_COMPLETION","UMINUS",
  };

  /** index-checked interface to yyNames[].
      @param token single character or %token value.
      @return token name or [illegal] or [unknown].
    */
  public static string yyname (int token) {
    if ((token < 0) || (token > yyNames.Length)) return "[illegal]";
    string name;
    if ((name = yyNames[token]) != null) return name;
    return "[unknown]";
  }

  int yyExpectingState;
  /** computes list of expected tokens on error by tracing the tables.
      @param state for which to compute the list.
      @return list of token names.
    */
  protected int [] yyExpectingTokens (int state){
    int token, n, len = 0;
    bool[] ok = new bool[yyNames.Length];
    if ((n = yySindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    if ((n = yyRindex[state]) != 0)
      for (token = n < 0 ? -n : 0;
           (token < yyNames.Length) && (n+token < yyTable.Length); ++ token)
        if (yyCheck[n+token] == token && !ok[token] && yyNames[token] != null) {
          ++ len;
          ok[token] = true;
        }
    int [] result = new int [len];
    for (n = token = 0; n < len;  ++ token)
      if (ok[token]) result[n++] = token;
    return result;
  }
  protected string[] yyExpecting (int state) {
    int [] tokens = yyExpectingTokens (state);
    string [] result = new string[tokens.Length];
    for (int n = 0; n < tokens.Length;  n++)
      result[n++] = yyNames[tokens [n]];
    return result;
  }

  /** the generated parser, with debugging messages.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @param yydebug debug message writer implementing yyDebug, or null.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex, Object yyd)
				 {
    this.debug = (yydebug.yyDebug)yyd;
    return yyparse(yyLex);
  }

  /** initial size and increment of the state/value stack [default 256].
      This is not final so that it can be overwritten outside of invocations
      of yyparse().
    */
  protected int yyMax;

  /** executed at the beginning of a reduce action.
      Used as $$ = yyDefault($1), prior to the user-specified action, if any.
      Can be overwritten to provide deep copy, etc.
      @param first value for $1, or null.
      @return first.
    */
  protected Object yyDefault (Object first) {
    return first;
  }

  /** the generated parser.
      Maintains a state and a value stack, currently with fixed maximum size.
      @param yyLex scanner.
      @return result of the last reduction, if any.
      @throws yyException on irrecoverable parse error.
    */
  internal Object yyparse (yyParser.yyInput yyLex)
  {
    if (yyMax <= 0) yyMax = 256;			// initial size
    int yyState = 0;                                   // state stack ptr
    int [] yyStates = new int[yyMax];	                // state stack 
    Object yyVal = null;                               // value stack ptr
    Object [] yyVals = new Object[yyMax];	        // value stack
    int yyToken = -1;					// current input
    int yyErrorFlag = 0;				// #tks to shift

    /*yyLoop:*/ for (int yyTop = 0;; ++ yyTop) {
      if (yyTop >= yyStates.Length) {			// dynamically increase
        int[] i = new int[yyStates.Length+yyMax];
        yyStates.CopyTo (i, 0);
        yyStates = i;
        Object[] o = new Object[yyVals.Length+yyMax];
        yyVals.CopyTo (o, 0);
        yyVals = o;
      }
      yyStates[yyTop] = yyState;
      yyVals[yyTop] = yyVal;
      if (debug != null) debug.push(yyState, yyVal);

      /*yyDiscarded:*/ for (;;) {	// discarding a token does not change stack
        int yyN;
        if ((yyN = yyDefRed[yyState]) == 0) {	// else [default] reduce (yyN)
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
            if (debug != null)
              debug.lex(yyState, yyToken, yyname(yyToken), yyLex.value());
          }
          if ((yyN = yySindex[yyState]) != 0 && ((yyN += yyToken) >= 0)
              && (yyN < yyTable.Length) && (yyCheck[yyN] == yyToken)) {
            if (debug != null)
              debug.shift(yyState, yyTable[yyN], yyErrorFlag-1);
            yyState = yyTable[yyN];		// shift to yyN
            yyVal = yyLex.value();
            yyToken = -1;
            if (yyErrorFlag > 0) -- yyErrorFlag;
            goto continue_yyLoop;
          }
          if ((yyN = yyRindex[yyState]) != 0 && (yyN += yyToken) >= 0
              && yyN < yyTable.Length && yyCheck[yyN] == yyToken)
            yyN = yyTable[yyN];			// reduce (yyN)
          else
            switch (yyErrorFlag) {
  
            case 0:
              yyExpectingState = yyState;
              // yyerror(String.Format ("syntax error, got token `{0}'", yyname (yyToken)), yyExpecting(yyState));
              if (debug != null) debug.error("syntax error");
              if (yyToken == 0 /*eof*/ || yyToken == eof_token) throw new yyParser.yyUnexpectedEof ();
              goto case 1;
            case 1: case 2:
              yyErrorFlag = 3;
              do {
                if ((yyN = yySindex[yyStates[yyTop]]) != 0
                    && (yyN += Token.yyErrorCode) >= 0 && yyN < yyTable.Length
                    && yyCheck[yyN] == Token.yyErrorCode) {
                  if (debug != null)
                    debug.shift(yyStates[yyTop], yyTable[yyN], 3);
                  yyState = yyTable[yyN];
                  yyVal = yyLex.value();
                  goto continue_yyLoop;
                }
                if (debug != null) debug.pop(yyStates[yyTop]);
              } while (-- yyTop >= 0);
              if (debug != null) debug.reject();
              throw new yyParser.yyException("irrecoverable syntax error");
  
            case 3:
              if (yyToken == 0) {
                if (debug != null) debug.reject();
                throw new yyParser.yyException("irrecoverable syntax error at end-of-file");
              }
              if (debug != null)
                debug.discard(yyState, yyToken, yyname(yyToken),
  							yyLex.value());
              yyToken = -1;
              goto continue_yyDiscarded;		// leave stack alone
            }
        }
        int yyV = yyTop + 1-yyLen[yyN];
        if (debug != null)
          debug.reduce(yyState, yyStates[yyV-1], yyN, YYRules.getRule (yyN), yyLen[yyN]);
        yyVal = yyDefault(yyV > yyTop ? null : yyVals[yyV]);
        switch (yyN) {
case 1:
#line 391 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		Lexer.check_incorrect_doc_comment ();
	  }
  break;
case 2:
#line 394 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { Lexer.CompleteOnEOF = false; }
  break;
case 6:
#line 401 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (yyVals[0+yyTop] != null) {
			Attributes attrs = (Attributes) yyVals[0+yyTop];
			report.Error (1730, attrs.Attrs [0].Location,
				"Assembly and module attributes must precede all other elements except using clauses and extern alias declarations");
		}
	  }
  break;
case 7:
#line 409 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		module.AddAttributes ((Attributes) yyVals[0+yyTop], current_namespace);
	  }
  break;
case 8:
#line 413 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (yyToken == Token.EXTERN_ALIAS)
			report.Error (439, lexer.Location, "An extern alias declaration must precede all other elements");
		else
			Error_SyntaxError (yyToken);
	  }
  break;
case 13:
#line 433 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		string s = lt.Value;
		if (s != "alias"){
			syntax_error (lt.Location, "`alias' expected");
		} else if (lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (lt.Location, "external alias");
		} else {
			lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop]; 
			current_namespace.AddUsingExternalAlias (lt.Value, lt.Location, report);
		}
	  }
  break;
case 14:
#line 446 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	syntax_error (GetLocation (yyVals[-1+yyTop]), "`alias' expected");   /* TODO: better*/
	  }
  break;
case 17:
#line 458 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 18:
#line 463 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 19:
#line 471 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		if (lang_version != LanguageVersion.ISO_1 && lt.Value == "global") {
			report.Warning (440, 2, lt.Location,
			 "An alias named `global' will not be used when resolving `global::'. The global namespace will be used instead");
		}

		current_namespace.AddUsingAlias (lt.Value, (MemberName) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
	  }
  break;
case 20:
#line 481 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }
  break;
case 21:
#line 489 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		current_namespace.AddUsing ((MemberName) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 22:
#line 501 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		Attributes attrs = (Attributes) yyVals[-2+yyTop];
		MemberName name = (MemberName) yyVals[0+yyTop];
		if (attrs != null) {
			bool valid_global_attrs = true;
			if ((current_namespace.DeclarationFound || current_namespace != file.NamespaceContainer)) {
				valid_global_attrs = false;
			} else {
				foreach (var a in attrs.Attrs) {
					if (a.ExplicitTarget == "assembly" || a.ExplicitTarget == "module")
						continue;
						
					valid_global_attrs = false;
					break;
				}
			}
			
			if (!valid_global_attrs)
				report.Error (1671, name.Location, "A namespace declaration cannot have modifiers or attributes");
		}
	
		module.AddAttributes (attrs, current_namespace);
		
		current_namespace = new NamespaceContainer (name, module, current_namespace, file);
		module.AddTypesContainer (current_namespace);
		current_class = current_namespace.SlaveDeclSpace;
		current_container = current_class.PartialContainer;
	  }
  break;
case 23:
#line 530 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 24:
#line 535 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (yyVals[0+yyTop] != null)
			lbag.AddLocation (current_namespace, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
		else
			lbag.AddLocation (current_namespace, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  
		current_namespace = current_namespace.Parent;
		current_class = current_namespace.SlaveDeclSpace;
		current_container = current_class.PartialContainer;
	  }
  break;
case 25:
#line 549 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName (lt.Value, lt.Location);
	  }
  break;
case 26:
#line 554 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], lt.Value, lt.Location);		
	  }
  break;
case 27:
#line 559 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new MemberName ("<invalid>", lexer.Location);
	  }
  break;
case 32:
#line 577 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		MemberName name = (MemberName) yyVals[0+yyTop];

		if (name.TypeArguments != null)
			syntax_error (lexer.Location, "namespace name expected");

		yyVal = name;
	  }
  break;
case 41:
#line 609 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (yyVals[0+yyTop] != null) {
			TypeContainer ds = (TypeContainer)yyVals[0+yyTop];

			if ((ds.ModFlags & (Modifiers.PRIVATE | Modifiers.PROTECTED)) != 0){
				report.Error (1527, ds.Location, 
				"Namespace elements cannot be explicitly declared as private, protected or protected internal");
			}

			/* Here is a trick, for explicit attributes we don't know where they belong to until*/
			/* we parse succeeding declaration hence we parse them as normal and re-attach them*/
			/* when we know whether they are global (assembly:, module:) or local (type:).*/
			if (ds.OptAttributes != null) {
				ds.OptAttributes.ConvertGlobalAttributes (ds, current_namespace, !current_namespace.DeclarationFound && current_namespace == file.NamespaceContainer);
			}
		}
		current_namespace.DeclarationFound = true;
	  }
  break;
case 42:
#line 628 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		current_namespace.DeclarationFound = true;
	  }
  break;
case 50:
#line 659 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var sect = (List<Attribute>) yyVals[0+yyTop];
		yyVal = new Attributes (sect);
	  }
  break;
case 51:
#line 664 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		Attributes attrs = yyVals[-1+yyTop] as Attributes;
		var sect = (List<Attribute>) yyVals[0+yyTop];
		if (attrs == null)
			attrs = new Attributes (sect);
		else
			attrs.AddAttributes (sect);
		yyVal = attrs;
	  }
  break;
case 52:
#line 677 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		lexer.parsing_attribute_section = true;
	  }
  break;
case 53:
#line 681 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		lexer.parsing_attribute_section = false;
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 54:
#line 689 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		current_attr_target = (string) yyVals[-1+yyTop];
		if (current_attr_target == "assembly" || current_attr_target == "module") {
			Lexer.check_incorrect_doc_comment ();
		}
	  }
  break;
case 55:
#line 696 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		/* when attribute target is invalid*/
		if (current_attr_target == string.Empty)
			yyVal = new List<Attribute> (0);
		else
			yyVal = yyVals[-2+yyTop];
	  
		current_attr_target = null;
		lexer.parsing_attribute_section = false;
 	  }
  break;
case 56:
#line 707 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = yyVals[-2+yyTop];
	  }
  break;
case 57:
#line 714 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = CheckAttributeTarget (lt.Value, lt.Location);
	  }
  break;
case 58:
#line 718 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = "event"; }
  break;
case 59:
#line 719 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = "return"; }
  break;
case 60:
#line 721 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (yyToken == Token.IDENTIFIER) {
			Error_SyntaxError (yyToken);
			yyVal = null;
		} else {
			string name = GetTokenName (yyToken);
			yyVal = CheckAttributeTarget (name, GetLocation (yyVals[0+yyTop]));
		}
	  }
  break;
case 61:
#line 734 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new List<Attribute> (4) { (Attribute) yyVals[0+yyTop] };
	  }
  break;
case 62:
#line 738 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var attrs = (List<Attribute>) yyVals[-2+yyTop];
		attrs.Add ((Attribute) yyVals[0+yyTop]);

		yyVal = attrs;
	  }
  break;
case 63:
#line 748 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 64:
#line 752 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		--lexer.parsing_block;
		MemberName mname = (MemberName) yyVals[-2+yyTop];
		if (mname.IsGeneric) {
			report.Error (404, lexer.Location,
				      "'<' unexpected: attributes cannot be generic");
		}

		Arguments [] arguments = (Arguments []) yyVals[0+yyTop];
		ATypeNameExpression expr = mname.GetTypeExpression ();
		yyVal = new Attribute (current_attr_target, expr, arguments, mname.Location, lexer.IsEscapedIdentifier (mname));
	  }
  break;
case 66:
#line 771 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = null; }
  break;
case 67:
#line 773 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 68:
#line 780 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = null; }
  break;
case 69:
#line 782 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	Arguments a = new Arguments (4);
		a.Add ((Argument) yyVals[0+yyTop]);
		yyVal = new Arguments [] { a, null };
	  }
  break;
case 70:
#line 788 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	Arguments a = new Arguments (4);
		a.Add ((Argument) yyVals[0+yyTop]);  
		yyVal = new Arguments [] { null, a };
	  }
  break;
case 71:
#line 794 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		Arguments[] o = (Arguments[]) yyVals[-2+yyTop];
		if (o [1] != null) {
			report.Error (1016, ((Argument) yyVals[0+yyTop]).Expr.Location, "Named attribute arguments must appear after the positional arguments");
			o [0] = new Arguments (4);
		}
		
		Arguments args = ((Arguments) o [0]);
		if (args.Count > 0 && !(yyVals[0+yyTop] is NamedArgument) && args [args.Count - 1] is NamedArgument)
			Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);
		
		args.Add ((Argument) yyVals[0+yyTop]);
	  }
  break;
case 72:
#line 808 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		Arguments[] o = (Arguments[]) yyVals[-2+yyTop];
		if (o [1] == null) {
			o [1] = new Arguments (4);
		}

		((Arguments) o [1]).Add ((Argument) yyVals[0+yyTop]);
	  }
  break;
case 73:
#line 820 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 75:
#line 828 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 76:
#line 832 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	--lexer.parsing_block;
	  	var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop]);	  
	  }
  break;
case 77:
#line 841 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (lang_version <= LanguageVersion.V_3)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "named argument");
			
		/* Avoid boxing in common case (no modifier)*/
		var arg_mod = yyVals[-1+yyTop] == null ? Argument.AType.None : (Argument.AType) yyVals[-1+yyTop];
			
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		yyVal = new NamedArgument (lt.Value, lt.Location, (Expression) yyVals[0+yyTop], arg_mod);
	  }
  break;
case 78:
#line 854 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = null; }
  break;
case 79:
#line 856 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { 
		yyVal = Argument.AType.Ref;
	  }
  break;
case 80:
#line 860 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { 
		yyVal = Argument.AType.Out;
	  }
  break;
case 83:
#line 872 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		lexer.parsing_modifiers = true;
	  }
  break;
case 84:
#line 876 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		lexer.parsing_modifiers = true;
	  }
  break;
case 97:
#line 895 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		report.Error (1519, lexer.Location, "Unexpected symbol `{0}' in class, struct, or interface member declaration",
			GetSymbolName (yyToken));
		yyVal = null;
		lexer.parsing_generic_declaration = false;
	  }
  break;
case 98:
#line 908 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 99:
#line 912 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { 
		MemberName name = MakeName ((MemberName) yyVals[0+yyTop]);
		push_current_class (new Struct (current_namespace, current_class, name, (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), yyVals[-3+yyTop]);
	  }
  break;
case 100:
#line 918 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		lexer.ConstraintsParsing = false;

		current_class.SetParameterInfo ((List<Constraints>) yyVals[0+yyTop]);

		if (doc_support)
			current_container.DocComment = Lexer.consume_doc_comment ();

		lbag.AddMember (current_class, mod_locations, GetLocation (yyVals[-5+yyTop]));
		
		lexer.parsing_modifiers = true;
	  }
  break;
case 101:
#line 931 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 102:
#line 936 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		--lexer.parsing_declaration;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 103:
#line 942 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		lbag.AppendToMember (current_class, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = pop_current_class ();
	  }
  break;
case 104:
#line 947 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
	  }
  break;
case 105:
#line 956 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var mod = (Modifiers) yyVals[-3+yyTop];
		current_field = new Const (current_class, (FullNamedExpression) yyVals[-1+yyTop], mod, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
		current_container.AddConstant ((Const) current_field);
		
		if ((mod & Modifiers.STATIC) != 0) {
			report.Error (504, current_field.Location, "The constant `{0}' cannot be marked static", current_field.GetSignatureForError ());
		}
		
		yyVal = current_field;
	  }
  break;
case 106:
#line 969 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		current_field.Initializer = (ConstInitializer) yyVals[-2+yyTop];
		lbag.AddMember (current_field, mod_locations, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[0+yyTop]));
		current_field = null;
	  }
  break;
case 117:
#line 1003 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
         yyVal = yyVals[0+yyTop];
      }
  break;
case 118:
#line 1007 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
        yyVal = new SimpleName("dynamic",new Location(0,0));
      }
  break;
case 119:
#line 1013 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	lexer.parsing_generic_declaration = false;
	  	var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		FullNamedExpression type = yyVals[0+yyTop] as FullNamedExpression;
        if(type == null){
           report.Error (10008, GetLocation (yyVals[0+yyTop]), "Could not resolve type expression");
        }

		current_field = new RoleField (current_class, type, Modifiers.PRIVATE | Modifiers.ROLE, new MemberName (lt.Value, lt.Location),null);
		current_container.AddField (current_field);
		yyVal = current_field;
	  
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
			
		lbag.AddMember (current_field, mod_locations, GetLocation (yyVals[-1+yyTop]));
		yyVal = current_field;
        current_role = current_field;
		current_field = null;
	  }
  break;
case 120:
#line 1039 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
         current_role = null;
      }
  break;
case 121:
#line 1045 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {   yyVal = null;  }
  break;
case 122:
#line 1047 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
        TypeParameter tparam = null;
        var simple = current_role.TypeExpression as SimpleName;
        if((simple != null && simple.Name != "dynamic") || (simple.Type != null && simple.Type.BuiltinType != BuiltinTypeSpec.Type.Dynamic)){
           if(current_class.IsGeneric){
             for(int i = 0; tparam == null && i<current_class.TypeParameters.Length;i++){
                 if(simple.Name == current_class.TypeParameters[i].Name){
                   tparam = current_class.TypeParameters[i];
                 }
             }
           }
           if(tparam == null) {
              report.Error (10009, GetLocation (yyVals[0+yyTop]), "Contracts can only be used for none typed roles");            
           }
        }
        var contractName = GetCurrentRoleContractName();
		MemberName name = MakeName (new MemberName(contractName));
        var inter = new Interface (current_namespace, current_class, name, Modifiers.PUBLIC, null);
        if(tparam != null) {
          tparam.Type.RolePlayerContract = inter.Type;

          var ns = current_namespace.NS;
          var className = new MemberName (ns.MemberName, new MemberName("><_extensionContainerFor" + GetCurrentRoleContractName(),GetLocation (yyVals[0+yyTop])));
          current_extensionContainer = new Class (current_namespace,
                                              current_class.Parent, 
                                              className, 
                                              Modifiers.PUBLIC | Modifiers.STATIC, 
                                              null);
        }
        RoleContracts.Add(contractName,inter);
		push_current_class (inter, null);
		lbag.AddMember (current_class, mod_locations, GetLocation (yyVals[0+yyTop]));		
	}
  break;
case 123:
#line 1081 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		--lexer.parsing_declaration;	  
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	    lbag.AppendToMember (current_class, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
        if(current_extensionContainer != null) {
            var cls = current_class;
            var container = current_container;
            current_container = current_class.Module;
            push_current_class((Class)current_extensionContainer, null);
            lbag.AddMember (current_extensionContainer, mod_locations, GetLocation (yyVals[-4+yyTop]));	
            lbag.AppendToMember (current_extensionContainer, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
            pop_current_class();
            current_class = cls;
            current_container = container;
	        current_extensionContainer = null;
        }
		yyVal = pop_current_class ();
	  }
  break;
case 124:
#line 1104 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 125:
#line 1108 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 126:
#line 1115 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (ConstInitializer) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 127:
#line 1124 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 128:
#line 1128 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		--lexer.parsing_block;
		yyVal = new ConstInitializer (current_field, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 129:
#line 1133 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		report.Error (145, lexer.Location, "A const field requires a value to be provided");
		yyVal = null;
	  }
  break;
case 132:
#line 1148 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	lexer.parsing_generic_declaration = false;

		FullNamedExpression type = (FullNamedExpression) yyVals[-1+yyTop];
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (670, GetLocation (yyVals[-1+yyTop]), "Fields cannot have void type");
			
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		current_field = new Field (current_class, type, (Modifiers) yyVals[-2+yyTop], new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-3+yyTop]);
		current_container.AddField (current_field);
		yyVal = current_field;
	  }
  break;
case 133:
#line 1163 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { 
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
			
		lbag.AddMember (current_field, mod_locations, GetLocation (yyVals[0+yyTop]));
		yyVal = current_field;
		current_field = null;
	  }
  break;
case 134:
#line 1176 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { 
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "fixed size buffers");

		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		current_field = new FixedField (current_class, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-3+yyTop],
			new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
			
		current_container.AddField (current_field);
	  }
  break;
case 135:
#line 1187 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (doc_support) {
			current_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
	    }

		current_field.Initializer = (ConstInitializer) yyVals[-2+yyTop];	    
		lbag.AddMember (current_field, mod_locations, GetLocation (yyVals[0+yyTop]));
		yyVal = current_field;
	    current_field = null;
	  }
  break;
case 136:
#line 1202 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		report.Error (1641, GetLocation (yyVals[-1+yyTop]), "A fixed size buffer field must have the array size specifier after the field name");
	  }
  break;
case 138:
#line 1210 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	++lexer.parsing_block;
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  	start_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 139:
#line 1216 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	--lexer.parsing_block;
		current_field.Initializer = (Expression) yyVals[0+yyTop];
		end_block (lexer.Location);
		current_local_parameters = null;
	  }
  break;
case 142:
#line 1231 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 143:
#line 1235 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 144:
#line 1242 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), null);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 145:
#line 1248 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 146:
#line 1252 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		--lexer.parsing_block;
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];	  
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (Expression) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 149:
#line 1267 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 150:
#line 1271 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		current_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 151:
#line 1278 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];	  
		yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (ConstInitializer) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 152:
#line 1287 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 153:
#line 1291 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		--lexer.parsing_block;
		yyVal = new ConstInitializer (current_field, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 154:
#line 1297 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		report.Error (443, lexer.Location, "Value or constant expected");
		yyVal = null;
	  }
  break;
case 157:
#line 1307 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		/* It has to be here for the parent to safely restore artificial block*/
	  	Error_SyntaxError (yyToken);
	  	yyVal = null;
	  }
  break;
case 158:
#line 1316 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (doc_support)
			Lexer.doc_state = XmlCommentState.NotAllowed;

		/* Add it early in the case of body being eof for full ast*/
		Method m = (Method) yyVals[0+yyTop];
		async_block = (m.ModFlags & Modifiers.ASYNC) != 0;
		current_container.AddMethod (m);
		
	  }
  break;
case 159:
#line 1327 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		Method method = (Method) yyVals[-2+yyTop];
		method.Block = (ToplevelBlock) yyVals[0+yyTop];
		async_block = false;
		
		if (method.Block == null) {
			method.ParameterInfo.CheckParameters (method);

			if ((method.ModFlags & Modifiers.ASYNC) != 0) {
				report.Error (1994, method.Location, "`{0}': The async modifier can only be used with methods that have a body",
					method.GetSignatureForError ());
			}
		} else {
			if (current_container.Kind == MemberKind.Interface) {
				report.Error (531, method.Location, "`{0}': interface members cannot have a definition",
					method.GetSignatureForError ());
			}
		}

		current_local_parameters = null;

		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 160:
#line 1355 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (doc_support)
			Lexer.doc_state = XmlCommentState.NotAllowed;

		/* Add it early in the case of body being eof for full ast*/
		Method m = (Method) yyVals[0+yyTop];
		async_block = (m.ModFlags & Modifiers.ASYNC) != 0;
		current_container.AddMethod (m);
	  }
  break;
case 161:
#line 1365 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
        try{
		    Method method = (Method) yyVals[-2+yyTop];
		    method.Block = (ToplevelBlock) yyVals[0+yyTop];
		    async_block = false;
		
		    if (method.Block == null) {
			    method.ParameterInfo.CheckParameters (method);

			    if ((method.ModFlags & Modifiers.ASYNC) != 0) {
				    report.Error (1994, method.Location, "`{0}': The async modifier can only be used with methods that have a body",
					    method.GetSignatureForError ());
			    }
		    } else {
			    if (current_container.Kind == MemberKind.Interface) {
				    report.Error (531, method.Location, "`{0}': interface members cannot have a definition",
					    method.GetSignatureForError ());
			    }
		    }

		    current_local_parameters = null;

		    if (doc_support)
			    Lexer.doc_state = XmlCommentState.Allowed;
        } finally {
          isInteraction = false;
          interactionInitializationDone = false;
        }
	  }
  break;
case 162:
#line 1399 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	      isInteraction = true;
          interactionInitializationDone = false;		  
	  }
  break;
case 163:
#line 1405 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.All;
	  }
  break;
case 164:
#line 1409 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 165:
#line 1413 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		lexer.ConstraintsParsing = false;
		valid_param_mod = 0;
		MemberName name = (MemberName) yyVals[-6+yyTop];
		current_local_parameters = (ParametersCompiled) yyVals[-3+yyTop];

		GenericMethod generic = null;
		if (name.TypeArguments != null) {
			generic = new GenericMethod (current_namespace, current_class, name,
						     (FullNamedExpression) yyVals[-7+yyTop], current_local_parameters);

			generic.SetParameterInfo ((List<Constraints>) yyVals[0+yyTop]);
		} else if (yyVals[0+yyTop] != null) {
			report.Error (80, GetLocation (yyVals[0+yyTop]),
				"Constraints are not allowed on non-generic declarations");
		}
		var modifiers = Modifiers.PUBLIC;
		
		var method = Method.Create (current_class, generic, (FullNamedExpression) yyVals[-7+yyTop], modifiers,
				     name, current_local_parameters, (Attributes) yyVals[-10+yyTop], yyVals[0+yyTop] != null);
				     
		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		lbag.AddMember (method, mod_locations, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = method;
	  }
  break;
case 166:
#line 1444 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (doc_support)
			Lexer.doc_state = XmlCommentState.NotAllowed;
        isRoleMethod = true;
		/* Add it early in the case of body being eof for full ast*/
		var m = (Method) yyVals[0+yyTop];
        async_block = (m.ModFlags & Modifiers.ASYNC) != 0;
		current_container.AddMethod (m);
	  }
  break;
case 167:
#line 1454 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var method = (Method) yyVals[-2+yyTop];
		method.Block = (ToplevelBlock) yyVals[0+yyTop];
		async_block = false;
		
		if (method.Block == null) {
		    method.ParameterInfo.CheckParameters (method);

		    if ((method.ModFlags & Modifiers.ASYNC) != 0) {
			    report.Error (1994, method.Location, "`{0}': The async modifier can only be used with methods that have a body",
				    method.GetSignatureForError ());
		    }
		} else {
		    if (current_container.Kind == MemberKind.Interface) {
			    report.Error (531, method.Location, "`{0}': interface members cannot have a definition",
				    method.GetSignatureForError ());
		    }
		}

		current_local_parameters = null;

		if (doc_support)
		    Lexer.doc_state = XmlCommentState.Allowed;
		isRoleMethod = false;
	  }
  break;
case 168:
#line 1483 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
    yyVal = Modifiers.PRIVATE | Modifiers.ROLE;
  }
  break;
case 169:
#line 1487 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
    {
    yyVal = Modifiers.PRIVATE | Modifiers.ROLE |Modifiers.ENTRY;
  }
  }
  break;
case 170:
#line 1499 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	    isInteraction = false;
		valid_param_mod = ParameterModifierType.All;
	  }
  break;
case 171:
#line 1504 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 172:
#line 1508 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		lexer.ConstraintsParsing = false;
		valid_param_mod = 0;
		MemberName name = (MemberName) yyVals[-6+yyTop];
		current_local_parameters = (ParametersCompiled) yyVals[-3+yyTop];
		var tempParameters = current_local_parameters.FixedParameters;
        var roleArgLocation = GetLocation (yyVals[-9+yyTop]);
		var realParameters = new Parameter[tempParameters.Length+1];
		realParameters[0] = new Self(GetCurrentRoleContractName(), current_role.TypeExpression,"self",Parameter.Modifier.NONE,null,roleArgLocation);
		Array.Copy(tempParameters,0,realParameters,1,tempParameters.Length);
		current_local_parameters = new ParametersCompiled(realParameters);
		GenericMethod generic = null;
		if (name.TypeArguments != null) {
			generic = new GenericMethod (current_namespace, current_class, name,
						     (FullNamedExpression) yyVals[-7+yyTop], current_local_parameters);

			generic.SetParameterInfo ((List<Constraints>) yyVals[0+yyTop]);
		} else if (yyVals[0+yyTop] != null) {
			report.Error (80, GetLocation (yyVals[0+yyTop]),
				"Constraints are not allowed on non-generic declarations");
		}

        var typeExpr = (FullNamedExpression) yyVals[-7+yyTop];
		var method = Method.Create (current_class, generic, typeExpr, (Modifiers)yyVals[-8+yyTop] | Modifiers.ROLE,
				     name, current_local_parameters, (Attributes) yyVals[-9+yyTop], yyVals[0+yyTop] != null);
        
        lbag.AddMember (method, mod_locations, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
        if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		  yyVal = method;  
	  }
  break;
case 173:
#line 1547 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	    isInteraction = false;
		valid_param_mod = ParameterModifierType.All;
	  }
  break;
case 174:
#line 1552 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 175:
#line 1556 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		lexer.ConstraintsParsing = false;
		valid_param_mod = 0;
		MemberName name = (MemberName) yyVals[-6+yyTop];
		current_local_parameters = (ParametersCompiled) yyVals[-3+yyTop];

		GenericMethod generic = null;
		if (name.TypeArguments != null) {
			generic = new GenericMethod (current_namespace, current_class, name,
						     (FullNamedExpression) yyVals[-7+yyTop], current_local_parameters);

			generic.SetParameterInfo ((List<Constraints>) yyVals[0+yyTop]);
		} else if (yyVals[0+yyTop] != null) {
			report.Error (80, GetLocation (yyVals[0+yyTop]),
				"Constraints are not allowed on non-generic declarations");
		}
		var modifiers = (Modifiers) yyVals[-8+yyTop];
		if((Modifiers.INTERACTION & modifiers) != 0){
		   modifiers = (modifiers ^ Modifiers.INTERACTION) | Modifiers.PUBLIC;
		   isInteraction = true;		   
		} else {
		   isInteraction = false;
		}
		var method = Method.Create (current_class, generic, (FullNamedExpression) yyVals[-7+yyTop], modifiers,
				     name, current_local_parameters, (Attributes) yyVals[-9+yyTop], yyVals[0+yyTop] != null);
		if(current_container.Kind == MemberKind.Interface && current_extensionContainer != null){
		    var parameters = new List<Parameter>();
            var typeExpression = new TypeExpression (compiler.BuiltinTypes.Object, GetLocation (yyVals[-9+yyTop]));
            var parameter = new Parameter(typeExpression, "self", Parameter.Modifier.This, null, GetLocation(yyVals[-9+yyTop]));
            parameters.Add(parameter);
            parameters.Add(new Parameter(typeExpression, "ctx", Parameter.Modifier.NONE, null, GetLocation(yyVals[-9+yyTop])));
		    var clone = current_local_parameters.Clone();
		    for(var i = 0; i < clone.Count; i++){
		       parameters.Add(clone[i]);
		    }
		    
			var parameterTypeExpressions = parameters.Select(p=>p.TypeExpression).ToList();
			var key = current_namespace.NS.Name + "," + name.Name + "," + string.Join(",",parameterTypeExpressions.Select(p => p.ToString()));
			if(roleExtensionMethodDummies.Add(key)){
               var returnType = (FullNamedExpression) yyVals[-7+yyTop];
			   var parametersCompiled = new ParametersCompiled(parameters.ToArray(),false);
		       var dummy = Method.Create (current_extensionContainer, generic, (FullNamedExpression) yyVals[-7+yyTop], Modifiers.PUBLIC | Modifiers.STATIC,
				       name, parametersCompiled, (Attributes) yyVals[-9+yyTop], yyVals[0+yyTop] != null);
                var location = GetLocation(yyVals[-9+yyTop]);
				var parameterName = new SimpleName("self", null, location);
				var getTypeAccess = new MemberAccess(parameterName, "GetType", null, location);
                var getTypeExpression =  new Invocation(getTypeAccess, new Arguments(0));
                var argCount = parameterTypeExpressions.Count-1;
                var argumentsForGetMethod = new Arguments(2);
				var stringLiteral =  new StringLiteral(compiler.BuiltinTypes,name.Name,location);
                argumentsForGetMethod.Add(new Argument(stringLiteral));
				var typeName = new SimpleName("Type", null, location);
				var types = parameterTypeExpressions.Skip(2)
				                          .Select(t =>(Expression)(t.Type != null 
										                             ? new TypeOf(t.Type,location) 
																	 : new TypeOf(t,location))
									  ).ToList();
				var initializer = new ArrayInitializer(types,location);
                var parameterTypes = new ImplicitlyTypedArrayCreation (
				                           new ComposedTypeSpecifier (1, location), 
										   initializer, 
										   location);
		        lbag.AddLocation (parameterTypes, location, location);
				
                argumentsForGetMethod.Add(new Argument(parameterTypes));
                var getMethodExpression = new Invocation(new MemberAccess(getTypeExpression,"GetMethod"),argumentsForGetMethod);
                var argumentsForMethod = new Arguments(2);

                var delegatedArguments = parameters.Skip(2).Select(p =>
                         (Expression)new Cast(
                                  new TypeExpression(compiler.BuiltinTypes.Object,location),
                                  new SimpleName(p.Name,location),
                                  location)).ToList();
		        argumentsForMethod.Add(new Argument(new SimpleName("self", null, location)));
                if(delegatedArguments.Any()){
				      initializer = new ArrayInitializer(delegatedArguments,location);
				
				      argumentsForMethod.Add(new Argument(new ImplicitlyTypedArrayCreation(
				                           new ComposedTypeSpecifier (1, location), 
										   initializer, 
										   location)));
                } else {
				   argumentsForMethod.Add(new Argument(new ArrayCreation(new TypeExpression(compiler.BuiltinTypes.Object,location),new ArrayInitializer(0,location)))); 
				}    

                var invocation = new Invocation(new MemberAccess(getMethodExpression,"Invoke"),argumentsForMethod);
				Statement statement = new StatementExpression(invocation);
				var retType = (returnType as TypeExpression);
                if(retType != null && retType.Type.Name != "Void"){
				    var cast = new Cast(returnType,invocation,location);
                    statement = new Return(cast,location);
                }
			    
				dummy.Block = new ToplevelBlock (compiler, parametersCompiled, GetLocation(yyVals[-9+yyTop]));
				/*var exceptionExpression = new New(new MemberName("InvalidOperationException",GetLocation($1)).GetTypeExpression(),new Arguments(0),GetLocation($1));*/
				dummy.Block.AddStatement( statement);
				lbag.AddMember(dummy,mod_locations, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
				((Class)current_extensionContainer).AddMethod(dummy);
			}
		}		     
		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		lbag.AddMember (method, mod_locations, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = method;
	  }
  break;
case 176:
#line 1666 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 177:
#line 1671 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		lexer.parsing_generic_declaration = false;
	  	valid_param_mod = ParameterModifierType.All;
	  }
  break;
case 178:
#line 1676 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 179:
#line 1680 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		lexer.ConstraintsParsing = false;
		valid_param_mod = 0;

		MemberName name = (MemberName) yyVals[-6+yyTop];
		current_local_parameters = (ParametersCompiled) yyVals[-3+yyTop];

		if (yyVals[-1+yyTop] != null && name.TypeArguments == null)
			report.Error (80, lexer.Location,
				      "Constraints are not allowed on non-generic declarations");

		GenericMethod generic = null;
		if (name.TypeArguments != null) {
			generic = new GenericMethod (current_namespace, current_class, name,
				new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-8+yyTop])),
				current_local_parameters);

			generic.SetParameterInfo ((List<Constraints>) yyVals[-1+yyTop]);
		}

		var modifiers = (Modifiers) yyVals[-10+yyTop];
		modifiers |= Modifiers.PARTIAL;

		var method = Method.Create (current_class, generic, new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-8+yyTop])),
				     modifiers, name, current_local_parameters, (Attributes) yyVals[-11+yyTop], yyVals[-1+yyTop] != null);

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		StoreModifierLocation (Modifiers.PARTIAL, GetLocation (yyVals[-9+yyTop]));
		lbag.AddMember (method, mod_locations, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = method;
	  }
  break;
case 180:
#line 1717 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		MemberName name = (MemberName) yyVals[-3+yyTop];
		report.Error (1585, name.Location, 
			"Member modifier `{0}' must precede the member type and name", ModifiersExtensions.Name ((Modifiers) yyVals[-4+yyTop]));

		var method = Method.Create (current_class, null, (FullNamedExpression) yyVals[-5+yyTop],
					    0, name, (ParametersCompiled) yyVals[-1+yyTop], (Attributes) yyVals[-7+yyTop], false);

		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];

		if (doc_support)
			method.DocComment = Lexer.consume_doc_comment ();

		yyVal = method;
	  }
  break;
case 182:
#line 1736 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = null; }
  break;
case 183:
#line 1740 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = ParametersCompiled.EmptyReadOnlyParameters; }
  break;
case 185:
#line 1746 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var pars_list = (List<Parameter>) yyVals[0+yyTop];
	  	yyVal = new ParametersCompiled (pars_list.ToArray ());
	  }
  break;
case 186:
#line 1751 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var pars_list = (List<Parameter>) yyVals[-2+yyTop];
		pars_list.Add ((Parameter) yyVals[0+yyTop]);

		yyVal = new ParametersCompiled (pars_list.ToArray ()); 
	  }
  break;
case 187:
#line 1758 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var pars_list = (List<Parameter>) yyVals[-2+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[0+yyTop])));
		yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  }
  break;
case 188:
#line 1764 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (yyVals[-2+yyTop] != null)
			report.Error (231, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");

		yyVal = new ParametersCompiled (new Parameter[] { (Parameter) yyVals[-2+yyTop] } );			
	  }
  break;
case 189:
#line 1771 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (yyVals[-2+yyTop] != null)
			report.Error (231, ((Parameter) yyVals[-2+yyTop]).Location, "A params parameter must be the last parameter in a formal parameter list");

		var pars_list = (List<Parameter>) yyVals[-4+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[-2+yyTop])));

		yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  }
  break;
case 190:
#line 1781 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		report.Error (257, GetLocation (yyVals[-2+yyTop]), "An __arglist parameter must be the last parameter in a formal parameter list");

		yyVal = new ParametersCompiled (new Parameter [] { new ArglistParameter (GetLocation (yyVals[-2+yyTop])) }, true);
	  }
  break;
case 191:
#line 1787 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		report.Error (257, GetLocation (yyVals[-2+yyTop]), "An __arglist parameter must be the last parameter in a formal parameter list");

		var pars_list = (List<Parameter>) yyVals[-4+yyTop];
		pars_list.Add (new ArglistParameter (GetLocation (yyVals[-2+yyTop])));

		yyVal = new ParametersCompiled (pars_list.ToArray (), true);
	  }
  break;
case 192:
#line 1796 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new ParametersCompiled (new Parameter[] { (Parameter) yyVals[0+yyTop] } );
	  }
  break;
case 193:
#line 1800 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new ParametersCompiled (new Parameter [] { new ArglistParameter (GetLocation (yyVals[0+yyTop])) }, true);
	  }
  break;
case 194:
#line 1804 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = ParametersCompiled.EmptyReadOnlyParameters;
	  }
  break;
case 195:
#line 1812 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		parameters_bucket.Clear ();
		Parameter p = (Parameter) yyVals[0+yyTop];
		parameters_bucket.Add (p);
		
		default_parameter_used = p.HasDefaultValue;
		yyVal = parameters_bucket;
	  }
  break;
case 196:
#line 1821 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var pars = (List<Parameter>) yyVals[-2+yyTop];
		Parameter p = (Parameter) yyVals[0+yyTop];
		if (p != null) {
			if (p.HasExtensionMethodModifier)
				report.Error (1100, p.Location, "The parameter modifier `this' can only be used on the first parameter");
			else if (!p.HasDefaultValue && default_parameter_used)
				report.Error (1737, p.Location, "Optional parameter cannot precede required parameters");

			default_parameter_used |= p.HasDefaultValue;
			pars.Add (p);
			
			lbag.AddLocation (p, GetLocation (yyVals[-1+yyTop]));
		}
		
		yyVal = yyVals[-2+yyTop];
	  }
  break;
case 197:
#line 1845 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Parameter.Modifier) yyVals[-2+yyTop], (Attributes) yyVals[-3+yyTop], lt.Location);
	  }
  break;
case 198:
#line 1853 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		report.Error (1552, lt.Location, "Array type specifier, [], must appear before parameter name");
		yyVal = new Parameter ((FullNamedExpression) yyVals[-3+yyTop], lt.Value, (Parameter.Modifier) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop], lt.Location);
	  }
  break;
case 199:
#line 1862 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);	  
	  	Location l = GetLocation (yyVals[0+yyTop]);
		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], null, (Parameter.Modifier) yyVals[-2+yyTop], (Attributes) yyVals[-3+yyTop], l);
	  }
  break;
case 200:
#line 1872 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	++lexer.parsing_block;
	  }
  break;
case 201:
#line 1876 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	--lexer.parsing_block;
		if (lang_version <= LanguageVersion.V_3) {
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "optional parameter");
		}
		
		Parameter.Modifier mod = (Parameter.Modifier) yyVals[-5+yyTop];
		if (mod != Parameter.Modifier.NONE) {
			switch (mod) {
			case Parameter.Modifier.REF:
			case Parameter.Modifier.OUT:
				report.Error (1741, GetLocation (yyVals[-5+yyTop]), "Cannot specify a default value for the `{0}' parameter",
					Parameter.GetModifierSignature (mod));
				break;
				
			case Parameter.Modifier.This:
				report.Error (1743, GetLocation (yyVals[-5+yyTop]), "Cannot specify a default value for the `{0}' parameter",
					Parameter.GetModifierSignature (mod));
				break;
			default:
				throw new NotImplementedException (mod.ToString ());
			}
				
			mod = Parameter.Modifier.NONE;
		}
		
		if ((valid_param_mod & ParameterModifierType.DefaultValue) == 0)
			report.Error (1065, GetLocation (yyVals[-2+yyTop]), "Optional parameter is not valid in this context");
		
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		yyVal = new Parameter ((FullNamedExpression) yyVals[-4+yyTop], lt.Value, mod, (Attributes) yyVals[-6+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
		
		if (yyVals[0+yyTop] != null)
			((Parameter) yyVal).DefaultValue = new DefaultParameterValueExpression ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 202:
#line 1915 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = Parameter.Modifier.NONE; }
  break;
case 204:
#line 1921 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 205:
#line 1925 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		Parameter.Modifier p2 = (Parameter.Modifier)yyVals[0+yyTop];
  		Parameter.Modifier mod = (Parameter.Modifier)yyVals[-1+yyTop] | p2;
  		if (((Parameter.Modifier)yyVals[-1+yyTop] & p2) == p2) {
  			Error_DuplicateParameterModifier (lexer.Location, p2);
  		} else {
	  		switch (mod & ~Parameter.Modifier.This) {
  				case Parameter.Modifier.REF:
					report.Error (1101, lexer.Location, "The parameter modifiers `this' and `ref' cannot be used altogether");
  					break;
   				case Parameter.Modifier.OUT:
					report.Error (1102, lexer.Location, "The parameter modifiers `this' and `out' cannot be used altogether");
  					break;
  				default:
 					report.Error (1108, lexer.Location, "A parameter cannot have specified more than one modifier");
 					break;
 			}
  		}
  		yyVal = mod;
	  }
  break;
case 206:
#line 1949 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	if ((valid_param_mod & ParameterModifierType.Ref) == 0)
	  		Error_ParameterModifierNotValid ("ref", GetLocation (yyVals[0+yyTop]));
	  		
	  	yyVal = Parameter.Modifier.REF;
	  }
  break;
case 207:
#line 1956 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	if ((valid_param_mod & ParameterModifierType.Out) == 0)
	  		Error_ParameterModifierNotValid ("out", GetLocation (yyVals[0+yyTop]));
	  
	  	yyVal = Parameter.Modifier.OUT;
	  }
  break;
case 208:
#line 1963 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if ((valid_param_mod & ParameterModifierType.This) == 0)
	  		Error_ParameterModifierNotValid ("this", GetLocation (yyVals[0+yyTop]));

	  	if (lang_version <= LanguageVersion.ISO_2)
	  		FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "extension methods");
	  			
		yyVal = Parameter.Modifier.This;
	  }
  break;
case 209:
#line 1976 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new ParamsParameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Attributes) yyVals[-3+yyTop], lt.Location);
	  }
  break;
case 210:
#line 1981 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		report.Error (1751, GetLocation (yyVals[-4+yyTop]), "Cannot specify a default value for a parameter array");
		
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new ParamsParameter ((FullNamedExpression) yyVals[-3+yyTop], lt.Value, (Attributes) yyVals[-5+yyTop], lt.Location);		
	  }
  break;
case 211:
#line 1988 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }
  break;
case 212:
#line 1996 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if ((valid_param_mod & ParameterModifierType.Params) == 0)
			report.Error (1670, (GetLocation (yyVals[0+yyTop])), "The `params' modifier is not allowed in current context");
	  }
  break;
case 213:
#line 2001 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		Parameter.Modifier mod = (Parameter.Modifier)yyVals[0+yyTop];
		if ((mod & Parameter.Modifier.This) != 0) {
			report.Error (1104, GetLocation (yyVals[-1+yyTop]), "The parameter modifiers `this' and `params' cannot be used altogether");
		} else {
			report.Error (1611, GetLocation (yyVals[-1+yyTop]), "The params parameter cannot be declared as ref or out");
		}	  
	  }
  break;
case 214:
#line 2010 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		Error_DuplicateParameterModifier (GetLocation (yyVals[-1+yyTop]), Parameter.Modifier.PARAMS);
	  }
  break;
case 215:
#line 2017 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	if ((valid_param_mod & ParameterModifierType.Arglist) == 0)
	  		report.Error (1669, GetLocation (yyVals[0+yyTop]), "__arglist is not valid in this context");
	  }
  break;
case 216:
#line 2028 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (doc_support)
			tmpComment = Lexer.consume_doc_comment ();
	  }
  break;
case 217:
#line 2033 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var type = (FullNamedExpression) yyVals[-3+yyTop];
		current_property = new Property (current_class, type, (Modifiers) yyVals[-4+yyTop],
			(MemberName) yyVals[-2+yyTop], (Attributes) yyVals[-5+yyTop]);
			
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (547, GetLocation (yyVals[-3+yyTop]), "`{0}': property or indexer cannot have void type", current_property.GetSignatureForError ());					
			
		current_container.AddProperty ((Property)current_property);
		lbag.AddMember (current_property, mod_locations, GetLocation (yyVals[0+yyTop]));
		
		lexer.PropertyParsing = true;
	  }
  break;
case 218:
#line 2047 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		lexer.PropertyParsing = false;
		
		if (doc_support)
			current_property.DocComment = ConsumeStoredComment ();				
	  }
  break;
case 219:
#line 2054 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		lbag.AppendToMember (current_property, GetLocation (yyVals[0+yyTop]));
		current_property = null;
	  }
  break;
case 220:
#line 2064 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Params | ParameterModifierType.DefaultValue;
	  }
  break;
case 221:
#line 2068 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		valid_param_mod = 0;
		var type = (FullNamedExpression) yyVals[-6+yyTop];
		Indexer indexer = new Indexer (current_class, type, (MemberName) yyVals[-5+yyTop], (Modifiers) yyVals[-7+yyTop], (ParametersCompiled) yyVals[-2+yyTop], (Attributes) yyVals[-8+yyTop]);
			
		current_property = indexer;

  		current_container.AddIndexer (indexer);
		lbag.AddMember (current_property, mod_locations, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
  		
		if (type.Type != null && type.Type.Kind == MemberKind.Void)
			report.Error (620, GetLocation (yyVals[-6+yyTop]), "`{0}': indexer return type cannot be `void'", indexer.GetSignatureForError ());  		

		if (indexer.ParameterInfo.IsEmpty) {
			report.Error (1551, GetLocation (yyVals[-4+yyTop]), "Indexers must have at least one parameter");
		}

		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		lexer.PropertyParsing = true;
	  }
  break;
case 222:
#line 2093 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		lexer.PropertyParsing = false;
	  }
  break;
case 223:
#line 2097 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (current_property.AccessorFirst != null && current_property.AccessorFirst.Block == null)
			((Indexer) current_property).ParameterInfo.CheckParameters (current_property);
	  
		if (doc_support)
			current_property.DocComment = ConsumeStoredComment ();
			
		lbag.AppendToMember (current_property, GetLocation (yyVals[-1+yyTop]));
		current_property = null;		
	  }
  break;
case 228:
#line 2116 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	if (yyToken == Token.CLOSE_BRACE) {
	  		report.Error (548, lexer.Location, "`{0}': property or indexer must have at least one accessor", current_property.GetSignatureForError ());
		} else {
			if (yyToken == Token.SEMICOLON)
				report.Error (1597, lexer.Location, "Semicolon after method or accessor block is not valid");
			else
				report.Error (1014, GetLocation (yyVals[0+yyTop]), "A get or set accessor expected");
		}
	  }
  break;
case 229:
#line 2130 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (yyVals[-1+yyTop] != ModifierNone && lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "access modifiers on properties");
		}
	  
		if (current_property.Get != null) {
			report.Error (1007, GetLocation (yyVals[0+yyTop]), "Property accessor already defined");
		}
		
		if (current_property is Indexer) {
			current_property.Get = new Indexer.GetIndexerMethod (current_property, (Modifiers) yyVals[-1+yyTop], ((Indexer)current_property).ParameterInfo.Clone (),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		} else {
			current_property.Get = new Property.GetMethod (current_property,
				(Modifiers) yyVals[-1+yyTop], (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		}	
	  
		current_local_parameters = current_property.Get.ParameterInfo;	  
		lbag.AddMember (current_property.Get, mod_locations);
		lexer.PropertyParsing = false;
	  }
  break;
case 230:
#line 2152 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	if (yyVals[0+yyTop] != null) {
	  		current_property.Get.Block = (ToplevelBlock) yyVals[0+yyTop];			
	  	
			if (current_container.Kind == MemberKind.Interface) {
				report.Error (531, current_property.Get.Block.StartLocation,
					"`{0}': interface members cannot have a definition", current_property.Get.GetSignatureForError ());
			}		
		}
	  
		current_local_parameters = null;
		lexer.PropertyParsing = true;

		if (doc_support)
			if (Lexer.doc_state == XmlCommentState.Error)
				Lexer.doc_state = XmlCommentState.NotAllowed;
	  }
  break;
case 231:
#line 2173 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (yyVals[-1+yyTop] != ModifierNone && lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "access modifiers on properties");
		}
		
		if (current_property.Set != null) {
			report.Error (1007, GetLocation (yyVals[0+yyTop]), "Property accessor already defined");
		}
	  
		if (current_property is Indexer) {
			current_property.Set = new Indexer.SetIndexerMethod (current_property, (Modifiers) yyVals[-1+yyTop],
				ParametersCompiled.MergeGenerated (compiler,
				((Indexer)current_property).ParameterInfo, true, new Parameter (
					current_property.TypeExpression, "value", Parameter.Modifier.NONE, null, GetLocation (yyVals[0+yyTop])),
					null),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		} else {
			current_property.Set = new Property.SetMethod (current_property, (Modifiers) yyVals[-1+yyTop], 
				ParametersCompiled.CreateImplicitParameter (current_property.TypeExpression, GetLocation (yyVals[0+yyTop])),
				(Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		}
		
		current_local_parameters = current_property.Set.ParameterInfo;	
		lbag.AddMember (current_property.Set, mod_locations);
		lexer.PropertyParsing = false;
	  }
  break;
case 232:
#line 2200 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (yyVals[0+yyTop] != null) {		
			current_property.Set.Block = (ToplevelBlock) yyVals[0+yyTop];
		
			if (current_container.Kind == MemberKind.Interface) {
				report.Error (531, current_property.Set.Block.StartLocation,
					"`{0}': interface members cannot have a definition", current_property.Set.GetSignatureForError ());
			}
		}
		
		current_local_parameters = null;
		lexer.PropertyParsing = true;

		if (doc_support
			&& Lexer.doc_state == XmlCommentState.Error)
			Lexer.doc_state = XmlCommentState.NotAllowed;
	  }
  break;
case 234:
#line 2222 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		/* TODO: lbag*/
	  	yyVal = null;
	  }
  break;
case 235:
#line 2227 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	Error_SyntaxError (1043, yyToken, "Invalid accessor body");
	  	yyVal = null;
	  }
  break;
case 236:
#line 2238 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 237:
#line 2242 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		MemberName name = MakeName ((MemberName) yyVals[0+yyTop]);
		push_current_class (new Interface (current_namespace, current_class, name, (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]), yyVals[-3+yyTop]);
		lbag.AddMember (current_class, mod_locations, GetLocation (yyVals[-2+yyTop]));		
	  }
  break;
case 238:
#line 2249 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		lexer.ConstraintsParsing = false;

		current_class.SetParameterInfo ((List<Constraints>) yyVals[0+yyTop]);

		if (doc_support) {
			current_container.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lexer.parsing_modifiers = true;
	  }
  break;
case 239:
#line 2262 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		--lexer.parsing_declaration;	  
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 240:
#line 2268 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	    lbag.AppendToMember (current_class, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = pop_current_class ();
	  }
  break;
case 241:
#line 2273 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);	  
	  }
  break;
case 244:
#line 2285 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		lexer.parsing_modifiers = true;
	  }
  break;
case 245:
#line 2289 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		lexer.parsing_modifiers = true;
	  }
  break;
case 246:
#line 2296 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		report.Error (525, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 247:
#line 2300 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		report.Error (525, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain fields or constants");
	  }
  break;
case 252:
#line 2308 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	report.Error (567, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain operators");
	  }
  break;
case 253:
#line 2312 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	report.Error (526, GetLocation (yyVals[0+yyTop]), "Interfaces cannot contain contructors");
	  }
  break;
case 254:
#line 2316 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	report.Error (524, GetLocation (yyVals[0+yyTop]), "Interfaces cannot declare classes, structs, interfaces, delegates, or enumerations");
	  }
  break;
case 255:
#line 2323 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  }
  break;
case 256:
#line 2326 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		OperatorDeclaration decl = (OperatorDeclaration) yyVals[-2+yyTop];
		if (decl != null) {
			Operator op = new Operator (
				current_class, decl.optype, decl.ret_type, (Modifiers) yyVals[-3+yyTop], 
				current_local_parameters,
				(ToplevelBlock) yyVals[0+yyTop], (Attributes) yyVals[-4+yyTop], decl.location);
				
			if (op.Block == null)
				op.ParameterInfo.CheckParameters (op);

			if (doc_support) {
				op.DocComment = tmpComment;
				Lexer.doc_state = XmlCommentState.Allowed;
			}

			/* Note again, checking is done in semantic analysis*/
			current_container.AddOperator (op);

			lbag.AddMember (op, mod_locations, lbag.GetLocations (decl));
		}
		
		current_local_parameters = null;
	  }
  break;
case 258:
#line 2354 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = null; }
  break;
case 260:
#line 2360 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		report.Error (590, GetLocation (yyVals[0+yyTop]), "User-defined operators cannot return void");
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 261:
#line 2368 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 262:
#line 2372 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		valid_param_mod = 0;

		Location loc = GetLocation (yyVals[-5+yyTop]);
		Operator.OpType op = (Operator.OpType) yyVals[-4+yyTop];
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];
		
		int p_count = current_local_parameters.Count;
		if (p_count == 1) {
			if (op == Operator.OpType.Addition)
				op = Operator.OpType.UnaryPlus;
			else if (op == Operator.OpType.Subtraction)
				op = Operator.OpType.UnaryNegation;
		}
		
		if (IsUnaryOperator (op)) {
			if (p_count == 2) {
				report.Error (1020, loc, "Overloadable binary operator expected");
			} else if (p_count != 1) {
				report.Error (1535, loc, "Overloaded unary operator `{0}' takes one parameter",
					Operator.GetName (op));
			}
		} else {
			if (p_count > 2) {
				report.Error (1534, loc, "Overloaded binary operator `{0}' takes two parameters",
					Operator.GetName (op));
			} else if (p_count != 2) {
				report.Error (1019, loc, "Overloadable unary operator expected");
			}
		}
		
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (op, (FullNamedExpression) yyVals[-6+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 264:
#line 2416 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.LogicalNot; }
  break;
case 265:
#line 2417 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.OnesComplement; }
  break;
case 266:
#line 2418 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.Increment; }
  break;
case 267:
#line 2419 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.Decrement; }
  break;
case 268:
#line 2420 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.True; }
  break;
case 269:
#line 2421 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.False; }
  break;
case 270:
#line 2423 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.Addition; }
  break;
case 271:
#line 2424 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.Subtraction; }
  break;
case 272:
#line 2426 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.Multiply; }
  break;
case 273:
#line 2427 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {  yyVal = Operator.OpType.Division; }
  break;
case 274:
#line 2428 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.Modulus; }
  break;
case 275:
#line 2429 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.BitwiseAnd; }
  break;
case 276:
#line 2430 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.BitwiseOr; }
  break;
case 277:
#line 2431 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.ExclusiveOr; }
  break;
case 278:
#line 2432 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.LeftShift; }
  break;
case 279:
#line 2433 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.RightShift; }
  break;
case 280:
#line 2434 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.Equality; }
  break;
case 281:
#line 2435 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.Inequality; }
  break;
case 282:
#line 2436 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.GreaterThan; }
  break;
case 283:
#line 2437 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.LessThan; }
  break;
case 284:
#line 2438 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.GreaterThanOrEqual; }
  break;
case 285:
#line 2439 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = Operator.OpType.LessThanOrEqual; }
  break;
case 286:
#line 2444 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 287:
#line 2448 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		valid_param_mod = 0;

		Location loc = GetLocation (yyVals[-5+yyTop]);
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];  
		  
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (Operator.OpType.Implicit, (FullNamedExpression) yyVals[-4+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 288:
#line 2463 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.DefaultValue;
	  }
  break;
case 289:
#line 2467 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		valid_param_mod = 0;
		
		Location loc = GetLocation (yyVals[-5+yyTop]);
		current_local_parameters = (ParametersCompiled)yyVals[-1+yyTop];  
		  
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}

		yyVal = new OperatorDeclaration (Operator.OpType.Explicit, (FullNamedExpression) yyVals[-4+yyTop], loc);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 290:
#line 2482 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
		yyVal = new OperatorDeclaration (Operator.OpType.Implicit, null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 291:
#line 2488 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	Error_SyntaxError (yyToken);
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  	yyVal = new OperatorDeclaration (Operator.OpType.Explicit, null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 292:
#line 2498 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { 
		Constructor c = (Constructor) yyVals[-1+yyTop];
		c.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (doc_support)
			c.DocComment = ConsumeStoredComment ();

		current_container.AddConstructor (c);

		current_local_parameters = null;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
        current_method = null;
	  }
  break;
case 293:
#line 2518 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		valid_param_mod = ParameterModifierType.All;
	  }
  break;
case 294:
#line 2527 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		valid_param_mod = 0;
		current_local_parameters = (ParametersCompiled) yyVals[-1+yyTop];  
		
		/**/
		/* start block here, so possible anonymous methods inside*/
		/* constructor initializer can get correct parent block*/
		/**/
	  	start_block (lexer.Location);
	  }
  break;
case 295:
#line 2538 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-6+yyTop];
		var mods = (Modifiers) yyVals[-7+yyTop];
		ConstructorInitializer ci = (ConstructorInitializer) yyVals[0+yyTop];

		Constructor c = new Constructor (current_class, lt.Value, mods,
			(Attributes) yyVals[-8+yyTop], current_local_parameters, ci, lt.Location);
		current_method = c;
		if (lt.Value != current_container.MemberName.Name) {
			report.Error (1520, c.Location, "Class, struct, or interface method must have a return type");
		} else if ((mods & Modifiers.STATIC) != 0) {
			if ((mods & Modifiers.AccessibilityMask) != 0){
				report.Error (515, c.Location,
					"`{0}': static constructor cannot have an access modifier",
					c.GetSignatureForError ());
			}
			if (ci != null) {
				report.Error (514, c.Location,
					"`{0}': static constructor cannot have an explicit `this' or `base' constructor call",
					c.GetSignatureForError ());
			
			}
		}
		
		lbag.AddMember (c, mod_locations, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = c; 
	  }
  break;
case 297:
#line 2569 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { current_block = null; yyVal = null; }
  break;
case 300:
#line 2579 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 301:
#line 2583 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	--lexer.parsing_block;
		yyVal = new ConstructorBaseInitializer ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 302:
#line 2589 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 303:
#line 2593 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	--lexer.parsing_block;
		yyVal = new ConstructorThisInitializer ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 304:
#line 2599 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }
  break;
case 305:
#line 2607 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}
		
		current_local_parameters = ParametersCompiled.EmptyReadOnlyParameters;
	  }
  break;
case 306:
#line 2616 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		if (lt.Value != current_container.MemberName.Name){
			report.Error (574, lt.Location, "Name of destructor must match name of class");
		} else if (current_container.Kind != MemberKind.Class){
			report.Error (575, lt.Location, "Only class types can contain destructor");
		}
		
		Destructor d = new Destructor (current_class, (Modifiers) yyVals[-6+yyTop],
			ParametersCompiled.EmptyReadOnlyParameters, (Attributes) yyVals[-7+yyTop], lt.Location);
		if (doc_support)
			d.DocComment = ConsumeStoredComment ();
		  
		d.Block = (ToplevelBlock) yyVals[0+yyTop];
		current_container.AddMethod (d);
		lbag.AddMember (d, mod_locations, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[-1+yyTop]));

		current_local_parameters = null;
	  }
  break;
case 307:
#line 2641 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		current_event_field = new EventField (current_class, (FullNamedExpression) yyVals[-1+yyTop], (Modifiers) yyVals[-3+yyTop], (MemberName) yyVals[0+yyTop], (Attributes) yyVals[-4+yyTop]);
		current_container.AddEvent (current_event_field);
		
		if (current_event_field.MemberName.Left != null) {
			report.Error (71, current_event_field.Location, "`{0}': An explicit interface implementation of an event must use property syntax",
			current_event_field.GetSignatureForError ());
		}
		
		yyVal = current_event_field;
	  }
  break;
case 308:
#line 2655 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (doc_support) {
			current_event_field.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lbag.AddMember (current_event_field, mod_locations, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[0+yyTop]));
		current_event_field = null;
	  }
  break;
case 309:
#line 2668 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		current_event = new EventProperty (current_class, (FullNamedExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-4+yyTop], (MemberName) yyVals[-1+yyTop], (Attributes) yyVals[-5+yyTop]);
		current_container.AddEvent (current_event);
		lbag.AddMember (current_event, mod_locations, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
		
		lexer.EventParsing = true;
	  }
  break;
case 310:
#line 2676 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (current_container.Kind == MemberKind.Interface)
			report.Error (69, GetLocation (yyVals[-2+yyTop]), "Event in interface cannot have add or remove accessors");
	  
		lexer.EventParsing = false;
	  }
  break;
case 311:
#line 2683 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (doc_support) {
			current_event.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lbag.AppendToMember (current_event, GetLocation (yyVals[-1+yyTop]));
	  	current_event = null;	
		current_local_parameters = null;
	  }
  break;
case 313:
#line 2698 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	++lexer.parsing_block;
	  }
  break;
case 314:
#line 2702 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	--lexer.parsing_block;
		current_event_field.Initializer = (Expression) yyVals[0+yyTop];
	  }
  break;
case 317:
#line 2715 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		current_event_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 318:
#line 2719 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		current_event_field.AddDeclarator ((FieldDeclarator) yyVals[0+yyTop]);
	  }
  break;
case 319:
#line 2726 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), null);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 320:
#line 2732 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		++lexer.parsing_block;
	  }
  break;
case 321:
#line 2736 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		--lexer.parsing_block;
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];	  
	  	yyVal = new FieldDeclarator (new SimpleMemberName (lt.Value, lt.Location), (Expression) yyVals[0+yyTop]);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 322:
#line 2745 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (current_container.Kind == MemberKind.Interface) {
			report.Error (68, lexer.Location, "`{0}': event in interface cannot have an initializer",
				current_event_field.GetSignatureForError ());
		}
		
	  	if ((current_event_field.ModFlags & Modifiers.ABSTRACT) != 0) {
			report.Error (74, lexer.Location, "`{0}': abstract event cannot have an initializer",
				current_event_field.GetSignatureForError ());
	  	}		
	  }
  break;
case 323:
#line 2757 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 326:
#line 2766 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		report.Error (65, lexer.Location, "`{0}': event property must have both add and remove accessors",
			current_event.GetSignatureForError ());
	  }
  break;
case 327:
#line 2771 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		report.Error (65, lexer.Location, "`{0}': event property must have both add and remove accessors",
			current_event.GetSignatureForError ());
	  }
  break;
case 328:
#line 2776 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { 
		report.Error (1055, GetLocation (yyVals[0+yyTop]), "An add or remove accessor expected");
		yyVal = null;
	  }
  break;
case 329:
#line 2784 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	if (yyVals[-1+yyTop] != ModifierNone) {
			report.Error (1609, GetLocation (yyVals[-1+yyTop]), "Modifiers cannot be placed on event accessor declarations");
	  	}
	  	
	  	current_event.Add = new EventProperty.AddDelegateMethod (current_event, (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		current_local_parameters = current_event.Add.ParameterInfo;
		
		lbag.AddMember (current_event.Add, mod_locations);
		lexer.EventParsing = false;		
	  }
  break;
case 330:
#line 2796 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		lexer.EventParsing = true;
	  
	  	current_event.Add.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (current_container.Kind == MemberKind.Interface) {
			report.Error (531, current_event.Add.Block.StartLocation,
				"`{0}': interface members cannot have a definition", current_event.Add.GetSignatureForError ());
		}
		
		current_local_parameters = null;
	  }
  break;
case 331:
#line 2812 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	if (yyVals[-1+yyTop] != ModifierNone) {
			report.Error (1609, GetLocation (yyVals[-1+yyTop]), "Modifiers cannot be placed on event accessor declarations");
	  	}
	  	
	  	current_event.Remove = new EventProperty.RemoveDelegateMethod (current_event, (Attributes) yyVals[-2+yyTop], GetLocation (yyVals[0+yyTop]));
		current_local_parameters = current_event.Remove.ParameterInfo;

		lbag.AddMember (current_event.Remove, mod_locations);
		lexer.EventParsing = false;		
	  }
  break;
case 332:
#line 2824 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		lexer.EventParsing = true;
	  
	  	current_event.Remove.Block = (ToplevelBlock) yyVals[0+yyTop];
		
		if (current_container.Kind == MemberKind.Interface) {
			report.Error (531, current_event.Remove.Block.StartLocation,
				"`{0}': interface members cannot have a definition", current_event.Remove.GetSignatureForError ());
		}
		
		current_local_parameters = null;
	  }
  break;
case 333:
#line 2840 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		report.Error (73, lexer.Location, "An add or remove accessor must have a body");
		yyVal = null;
	  }
  break;
case 335:
#line 2852 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (doc_support)
			enumTypeComment = Lexer.consume_doc_comment ();
	  }
  break;
case 336:
#line 2857 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;

		MemberName name = (MemberName) yyVals[-3+yyTop];
		if (name.IsGeneric) {
			report.Error (1675, name.Location, "Enums cannot have type parameters");
		}
		
		push_current_class (new Enum (current_namespace, current_class, (TypeExpression) yyVals[-2+yyTop], (Modifiers) yyVals[-5+yyTop], MakeName (name), (Attributes) yyVals[-6+yyTop]), null);
	  }
  break;
case 337:
#line 2869 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	/* here will be evaluated after CLOSE_BLACE is consumed.*/
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 338:
#line 2875 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (doc_support)
			current_class.DocComment = enumTypeComment;
			
		--lexer.parsing_declaration;

/*			if (doc_support)*/
/*				em.DocComment = ev.DocComment;*/

		lbag.AddMember (current_class, mod_locations, GetLocation (yyVals[-9+yyTop]), GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-1+yyTop]));
		yyVal = pop_current_class ();
	  }
  break;
case 340:
#line 2892 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	 	var te = yyVals[0+yyTop] as TypeExpression;
		if (te == null || !EnumSpec.IsValidUnderlyingType (te.Type)) {
			Enum.Error_1008 (GetLocation (yyVals[0+yyTop]), report);
			yyVal = null;
		} else {
			yyVal = yyVals[0+yyTop];
		}
	 }
  break;
case 341:
#line 2902 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	 	Error_TypeExpected (GetLocation (yyVals[-1+yyTop]));
		yyVal = null;
	 }
  break;
case 344:
#line 2912 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	lbag.AddLocation (yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 346:
#line 2920 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	lbag.AddLocation (yyVals[-2+yyTop], GetLocation (yyVals[-1+yyTop]));
	  	yyVal = yyVals[0+yyTop];
	  }
  break;
case 347:
#line 2928 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
	  	var em = new EnumMember ((Enum) current_class, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-1+yyTop]);
	  	((Enum) current_class).AddEnumMember (em);

		if (doc_support) {
			em.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}

		yyVal = em;
	  }
  break;
case 348:
#line 2941 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	++lexer.parsing_block;
		if (doc_support) {
			tmpComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.NotAllowed;
		}
	  }
  break;
case 349:
#line 2949 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { 
		--lexer.parsing_block;
		
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
	  	var em = new EnumMember ((Enum) current_class, new MemberName (lt.Value, lt.Location), (Attributes) yyVals[-4+yyTop]);
	  	em.Initializer = new ConstInitializer (em, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  	((Enum) current_class).AddEnumMember (em);
		
		if (doc_support)
			em.DocComment = ConsumeStoredComment ();

		yyVal = em;
	  }
  break;
case 350:
#line 2970 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out | ParameterModifierType.Params | ParameterModifierType.DefaultValue;
	  }
  break;
case 351:
#line 2974 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		valid_param_mod = 0;

		MemberName name = MakeName ((MemberName) yyVals[-4+yyTop]);
		ParametersCompiled p = (ParametersCompiled) yyVals[-1+yyTop];

		Delegate del = new Delegate (current_namespace, current_class, (FullNamedExpression) yyVals[-5+yyTop],
					     (Modifiers) yyVals[-7+yyTop], name, p, (Attributes) yyVals[-8+yyTop]);

		p.CheckParameters (del);

		current_container.AddDelegate (del);
		current_delegate = del;
		lexer.ConstraintsParsing = true;
	  }
  break;
case 352:
#line 2990 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		lexer.ConstraintsParsing = false;
	  }
  break;
case 353:
#line 2994 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (doc_support) {
			current_delegate.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
	  
		current_delegate.SetParameterInfo ((List<Constraints>) yyVals[-2+yyTop]);
		lbag.AddMember (current_delegate, mod_locations, GetLocation (yyVals[-10+yyTop]), GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[0+yyTop]));

		yyVal = current_delegate;

		current_delegate = null;
	  }
  break;
case 355:
#line 3012 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "nullable types");
	  
	  	yyVal = ComposedTypeSpecifier.CreateNullable (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 357:
#line 3023 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt1 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		
		yyVal = new MemberName (lt1.Value, lt2.Value, (TypeArguments) yyVals[0+yyTop], lt1.Location);
	  }
  break;
case 359:
#line 3034 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));		
	  }
  break;
case 360:
#line 3043 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);	  
	  }
  break;
case 362:
#line 3055 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "generics");	  
	  
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 363:
#line 3062 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		Error_TypeExpected (lexer.Location);
		yyVal = new TypeArguments ();
	  }
  break;
case 364:
#line 3070 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		TypeArguments type_args = new TypeArguments ();
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
	  }
  break;
case 365:
#line 3076 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		TypeArguments type_args = (TypeArguments) yyVals[-2+yyTop];
		type_args.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = type_args;
	  }
  break;
case 366:
#line 3088 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 367:
#line 3092 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		lexer.parsing_generic_declaration = false;
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);
	  }
  break;
case 368:
#line 3101 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	MemberName mn = (MemberName)yyVals[0+yyTop];
	  	if (mn.TypeArguments != null)
	  		syntax_error (mn.Location, string.Format ("Member `{0}' cannot declare type arguments",
	  			mn.GetSignatureForError ()));
	  }
  break;
case 370:
#line 3112 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		lexer.parsing_generic_declaration = false;	  
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
	  }
  break;
case 371:
#line 3121 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		lexer.parsing_generic_declaration = false;	  
		yyVal = new MemberName (TypeContainer.DefaultIndexerName, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 372:
#line 3126 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		lexer.parsing_generic_declaration = false;
		yyVal = new MemberName ((MemberName) yyVals[-1+yyTop], TypeContainer.DefaultIndexerName, null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 373:
#line 3134 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberName (lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 374:
#line 3140 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt1 = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		
		yyVal = new MemberName (lt1.Value, lt2.Value, (TypeArguments) yyVals[-1+yyTop], lt1.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 375:
#line 3148 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[-1+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 377:
#line 3158 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "generics");
	  
		yyVal = yyVals[-1+yyTop];
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 378:
#line 3169 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		TypeArguments type_args = new TypeArguments ();
		type_args.Add ((FullNamedExpression)yyVals[0+yyTop]);
		yyVal = type_args;
	  }
  break;
case 379:
#line 3175 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		TypeArguments type_args = (TypeArguments) yyVals[-2+yyTop];
		type_args.Add ((FullNamedExpression)yyVals[0+yyTop]);
		yyVal = type_args;
		lbag.AddLocation (yyVals[0+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 380:
#line 3185 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken)yyVals[0+yyTop];
		yyVal = new TypeParameterName (lt.Value, (Attributes)yyVals[-2+yyTop], (Variance) yyVals[-1+yyTop], lt.Location);
  	  }
  break;
case 381:
#line 3190 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
  	  	if (GetTokenName (yyToken) == "type")
			report.Error (81, GetLocation (yyVals[0+yyTop]), "Type parameter declaration must be an identifier not a type");
		else
			Error_SyntaxError (yyToken);
			
  	  	yyVal = new TypeParameterName ("", null, lexer.Location);
  	  }
  break;
case 383:
#line 3206 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 384:
#line 3213 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		lexer.parsing_generic_declaration = true;
	  }
  break;
case 386:
#line 3224 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), report);
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 388:
#line 3233 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), report);
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 390:
#line 3242 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	report.Error (1536, GetLocation (yyVals[0+yyTop]), "Invalid parameter type `void'");
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 392:
#line 3251 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 393:
#line 3258 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		MemberName name = (MemberName) yyVals[-1+yyTop];

		if (yyVals[0+yyTop] != null) {
			yyVal = new ComposedCast (name.GetTypeExpression (), (ComposedTypeSpecifier) yyVals[0+yyTop]);
		} else {
			if (name.Left == null && name.Name == "var")
				yyVal = new VarExpr (name.Location);
			else
				yyVal = name.GetTypeExpression ();
		}
	  }
  break;
case 394:
#line 3271 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new ComposedCast (((MemberName) yyVals[-1+yyTop]).GetTypeExpression (), (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 395:
#line 3275 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (yyVals[0+yyTop] != null)
			yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 396:
#line 3280 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 397:
#line 3284 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new ComposedCast (new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-1+yyTop])), (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 398:
#line 3291 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var types = new List<FullNamedExpression> (2);
		types.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = types;
	  }
  break;
case 399:
#line 3297 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var types = (List<FullNamedExpression>) yyVals[-2+yyTop];
		types.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = types;
	  }
  break;
case 400:
#line 3306 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (yyVals[0+yyTop] is ComposedCast) {
			report.Error (1521, GetLocation (yyVals[0+yyTop]), "Invalid base type `{0}'", ((ComposedCast)yyVals[0+yyTop]).GetSignatureForError ());
		}
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 401:
#line 3313 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	Error_TypeExpected (lexer.Location);
		yyVal = null;
	  }
  break;
case 402:
#line 3324 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Object, GetLocation (yyVals[0+yyTop])); }
  break;
case 403:
#line 3325 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.String, GetLocation (yyVals[0+yyTop])); }
  break;
case 404:
#line 3326 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Bool, GetLocation (yyVals[0+yyTop])); }
  break;
case 405:
#line 3327 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Decimal, GetLocation (yyVals[0+yyTop])); }
  break;
case 406:
#line 3328 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Float, GetLocation (yyVals[0+yyTop])); }
  break;
case 407:
#line 3329 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Double, GetLocation (yyVals[0+yyTop])); }
  break;
case 409:
#line 3334 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.SByte, GetLocation (yyVals[0+yyTop])); }
  break;
case 410:
#line 3335 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Byte, GetLocation (yyVals[0+yyTop])); }
  break;
case 411:
#line 3336 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Short, GetLocation (yyVals[0+yyTop])); }
  break;
case 412:
#line 3337 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.UShort, GetLocation (yyVals[0+yyTop])); }
  break;
case 413:
#line 3338 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Int, GetLocation (yyVals[0+yyTop])); }
  break;
case 414:
#line 3339 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.UInt, GetLocation (yyVals[0+yyTop])); }
  break;
case 415:
#line 3340 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Long, GetLocation (yyVals[0+yyTop])); }
  break;
case 416:
#line 3341 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.ULong, GetLocation (yyVals[0+yyTop])); }
  break;
case 417:
#line 3342 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = new TypeExpression (compiler.BuiltinTypes.Char, GetLocation (yyVals[0+yyTop])); }
  break;
case 418:
#line 3352 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	   checkForInteraction((Expression)yyVals[0+yyTop]);
	}
  break;
case 439:
#line 3382 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new SimpleName (lt.Value, (TypeArguments)yyVals[0+yyTop], lt.Location);	  
	  }
  break;
case 440:
#line 3386 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
	       yyVal = new CompletionSimpleName (MemberName.MakeName (lt.Value, null), lt.Location);
	  }
  break;
case 444:
#line 3396 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = new NullLiteral (GetLocation (yyVals[0+yyTop])); }
  break;
case 445:
#line 3400 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = new BoolLiteral (compiler.BuiltinTypes, true, GetLocation (yyVals[0+yyTop])); }
  break;
case 446:
#line 3401 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = new BoolLiteral (compiler.BuiltinTypes, false, GetLocation (yyVals[0+yyTop])); }
  break;
case 451:
#line 3427 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 452:
#line 3432 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new ParenthesizedExpression ((Expression) yyVals[-1+yyTop]);
	  }
  break;
case 453:
#line 3439 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 454:
#line 3445 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 455:
#line 3451 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (new BaseThis (GetLocation (yyVals[-3+yyTop])), lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 456:
#line 3457 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt1 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-1+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (TypeArguments) yyVals[0+yyTop], lt1.Location);
	  }
  break;
case 457:
#line 3463 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-2+yyTop], null,GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 458:
#line 3466 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, lt.Location);
	  }
  break;
case 459:
#line 3471 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-2+yyTop], null, lexer.Location);
	  }
  break;
case 460:
#line 3474 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new CompletionMemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, lt.Location);
 	  }
  break;
case 461:
#line 3482 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		 isInteractionArgumentList = isInteraction;
	  }
  break;
case 462:
#line 3486 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	    isInteractionArgumentList = false;
	  }
  break;
case 463:
#line 3490 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { 
	    var instance = (Expression) yyVals[-5+yyTop]; 
	    var arguments =  (Arguments) yyVals[-2+yyTop]; 
	
	    yyVal = new Invocation (instance,arguments);
	    lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 464:
#line 3500 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = null; }
  break;
case 466:
#line 3506 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	if (yyVals[-1+yyTop] == null) {
	  		yyVal = CollectionOrObjectInitializers.Empty;
	  		/* TODO: lbag*/
	  	} else {
	  		yyVal = new CollectionOrObjectInitializers ((List<Expression>) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  	}
	  }
  break;
case 467:
#line 3516 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	yyVal = new CollectionOrObjectInitializers ((List<Expression>) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 468:
#line 3523 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = null; }
  break;
case 469:
#line 3525 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	}
  break;
case 470:
#line 3532 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	var a = new List<Expression> ();
	  	a.Add ((Expression) yyVals[0+yyTop]);
	  	yyVal = a;
	  }
  break;
case 471:
#line 3538 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	var a = (List<Expression>)yyVals[-2+yyTop];
	  	a.Add ((Expression) yyVals[0+yyTop]);
	  	yyVal = a;
	  }
  break;
case 472:
#line 3543 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	Error_SyntaxError (yyToken);
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 473:
#line 3551 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
	  	yyVal = new ElementInitializer (lt.Value, (Expression)yyVals[0+yyTop], lt.Location);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 474:
#line 3557 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new CompletionElementInitializer (null, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 475:
#line 3560 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		CompletionSimpleName csn = yyVals[-1+yyTop] as CompletionSimpleName;
		if (csn == null)
			yyVal = new CollectionElementInitializer ((Expression)yyVals[-1+yyTop]);
		else
			yyVal = new CompletionElementInitializer (csn.Prefix, csn.Location);
	  }
  break;
case 476:
#line 3568 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (yyVals[-1+yyTop] == null)
			yyVal = null;
		else
	  		yyVal = new CollectionElementInitializer ((List<Expression>)yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 477:
#line 3575 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	report.Error (1920, GetLocation (yyVals[-1+yyTop]), "An element initializer cannot be empty");
		yyVal = null;
	  }
  break;
case 480:
#line 3587 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = null; }
  break;
case 482:
#line 3593 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { 
		Arguments list = new Arguments (4);
		list.Add ((Argument) yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 483:
#line 3599 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		Arguments list = (Arguments) yyVals[-2+yyTop];
		if (list [list.Count - 1] is NamedArgument)
			Error_NamedArgumentExpected ((NamedArgument) list [list.Count - 1]);
		
		list.Add ((Argument) yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 484:
#line 3608 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		Arguments list = (Arguments) yyVals[-2+yyTop];
		NamedArgument a = (NamedArgument) yyVals[0+yyTop];
		for (int i = 0; i < list.Count; ++i) {
			NamedArgument na = list [i] as NamedArgument;
			if (na != null && na.Name == a.Name)
				report.Error (1740, na.Location, "Named argument `{0}' specified multiple times",
					na.Name);
		}
		
		list.Add (a);
		yyVal = list;
	  }
  break;
case 485:
#line 3622 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	report.Error (839, GetLocation (yyVals[0+yyTop]), "An argument is missing");
	  	yyVal = yyVals[-1+yyTop];
	  }
  break;
case 486:
#line 3627 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	report.Error (839, GetLocation (yyVals[-1+yyTop]), "An argument is missing");
	  	yyVal = null;
	  }
  break;
case 487:
#line 3635 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 491:
#line 3648 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { 
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Ref);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 492:
#line 3653 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { 
		yyVal = new Argument ((Expression) yyVals[0+yyTop], Argument.AType.Out);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 493:
#line 3658 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new Argument (new Arglist ((Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop])));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 494:
#line 3663 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new Argument (new Arglist (GetLocation (yyVals[-2+yyTop])));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 496:
#line 3675 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new ElementAccess ((Expression) yyVals[-3+yyTop], (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 497:
#line 3683 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var list = new List<Expression> (4);
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 498:
#line 3689 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 499:
#line 3694 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	Error_SyntaxError (yyToken);
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 500:
#line 3702 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		Arguments args = new Arguments (4);
		args.Add ((Argument) yyVals[0+yyTop]);
		yyVal = args;
	  }
  break;
case 501:
#line 3708 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		Arguments args = (Arguments) yyVals[-2+yyTop];
		if (args [args.Count - 1] is NamedArgument && !(yyVals[0+yyTop] is NamedArgument))
			Error_NamedArgumentExpected ((NamedArgument) args [args.Count - 1]);
	  
		args.Add ((Argument) yyVals[0+yyTop]);
		yyVal = args;	  
	  }
  break;
case 502:
#line 3720 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	yyVal = new Argument ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 504:
#line 3728 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	    if(isRoleMethod) {
		    report.Error (10077, lexer.Location,
			"Can't use this explicitly in role methods. Use self or role name to refer to the role");
		}
		yyVal = new This (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 505:
#line 3739 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	yyVal = new ElementAccess (new BaseThis (GetLocation (yyVals[-3+yyTop])), (Arguments) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 506:
#line 3744 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	Error_SyntaxError (yyToken);
		yyVal = new ElementAccess (null, null, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 507:
#line 3752 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PostIncrement, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 508:
#line 3759 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PostDecrement, (Expression) yyVals[-1+yyTop], GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 509:
#line 3766 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (yyVals[0+yyTop] != null) {
			if (lang_version <= LanguageVersion.ISO_2)
				FeatureIsNotAvailable (GetLocation (yyVals[-5+yyTop]), "object initializers");
				
			yyVal = new NewInitialize ((FullNamedExpression) yyVals[-4+yyTop], (Arguments) yyVals[-2+yyTop], (CollectionOrObjectInitializers) yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop]));
		} else {
			yyVal = new New ((FullNamedExpression) yyVals[-4+yyTop], (Arguments) yyVals[-2+yyTop], GetLocation (yyVals[-5+yyTop]));
		}
		
		lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 510:
#line 3779 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (lang_version <= LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "collection initializers");
	  
		yyVal = new NewInitialize ((FullNamedExpression) yyVals[-1+yyTop], null, (CollectionOrObjectInitializers) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 511:
#line 3791 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-5+yyTop], (List<Expression>) yyVals[-3+yyTop],
				new ComposedTypeSpecifier (((List<Expression>) yyVals[-3+yyTop]).Count, GetLocation (yyVals[-4+yyTop])) {
	  				Next = (ComposedTypeSpecifier) yyVals[-1+yyTop]
			  	}, (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-6+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 512:
#line 3799 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	if (yyVals[0+yyTop] == null)
	  		report.Error (1586, GetLocation (yyVals[-3+yyTop]), "Array creation must have array size or array initializer");

		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-2+yyTop], (ComposedTypeSpecifier) yyVals[-1+yyTop], (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 513:
#line 3806 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (lang_version <= LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-2+yyTop]), "implicitly typed arrays");
	  
		yyVal = new ImplicitlyTypedArrayCreation ((ComposedTypeSpecifier) yyVals[-1+yyTop], (ArrayInitializer) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 514:
#line 3813 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		report.Error (178, GetLocation (yyVals[-1+yyTop]), "Invalid rank specifier, expecting `,' or `]'");
		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-5+yyTop], null, GetLocation (yyVals[-6+yyTop]));
	  }
  break;
case 515:
#line 3818 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		Error_SyntaxError (1526, yyToken, "Unexpected symbol");
		yyVal = new ArrayCreation ((FullNamedExpression) yyVals[-1+yyTop], null, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 516:
#line 3825 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		++lexer.parsing_type;
	  }
  break;
case 517:
#line 3829 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		--lexer.parsing_type;
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 518:
#line 3837 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (lang_version <= LanguageVersion.ISO_2)
	  		FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "anonymous types");

		yyVal = new NewAnonymousType ((List<AnonymousTypeParameter>) yyVals[-1+yyTop], current_container, GetLocation (yyVals[-3+yyTop]));
		
		/* TODO: lbag comma location*/
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 521:
#line 3854 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = null; }
  break;
case 523:
#line 3860 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	var a = new List<AnonymousTypeParameter> (4);
	  	a.Add ((AnonymousTypeParameter) yyVals[0+yyTop]);
	  	yyVal = a;
	  }
  break;
case 524:
#line 3866 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	var a = (List<AnonymousTypeParameter>) yyVals[-2+yyTop];
	  	a.Add ((AnonymousTypeParameter) yyVals[0+yyTop]);
	  	yyVal = a;
	  }
  break;
case 525:
#line 3875 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken)yyVals[-2+yyTop];
	  	yyVal = new AnonymousTypeParameter ((Expression)yyVals[0+yyTop], lt.Value, lt.Location);
	  	lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 526:
#line 3881 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken)yyVals[0+yyTop];
	  	yyVal = new AnonymousTypeParameter (new SimpleName (lt.Value, lt.Location),
	  		lt.Value, lt.Location);
	  }
  break;
case 527:
#line 3887 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	MemberAccess ma = (MemberAccess) yyVals[0+yyTop];
	  	yyVal = new AnonymousTypeParameter (ma, ma.Name, ma.Location);
	  }
  break;
case 528:
#line 3892 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		report.Error (746, lexer.Location,
			"Invalid anonymous type member declarator. Anonymous type members must be a member assignment, simple name or member access expression");
		yyVal = null;
	  }
  break;
case 532:
#line 3907 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	((ComposedTypeSpecifier) yyVals[-1+yyTop]).Next = (ComposedTypeSpecifier) yyVals[0+yyTop];
	  	yyVal = yyVals[-1+yyTop];
	  }
  break;
case 533:
#line 3915 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = ComposedTypeSpecifier.CreateArrayDimension (1, GetLocation (yyVals[-1+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 534:
#line 3920 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = ComposedTypeSpecifier.CreateArrayDimension ((int)yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 535:
#line 3928 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = 2;
	  }
  break;
case 536:
#line 3932 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = ((int) yyVals[-1+yyTop]) + 1;
	  }
  break;
case 537:
#line 3939 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = null;
	  }
  break;
case 538:
#line 3943 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 539:
#line 3950 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var ai = new ArrayInitializer (0, GetLocation (yyVals[-1+yyTop]));
		ai.VariableDeclaration = current_variable;
		lbag.AddLocation (ai, GetLocation (yyVals[0+yyTop]));
		yyVal = ai;
	  }
  break;
case 540:
#line 3957 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var ai = new ArrayInitializer ((List<Expression>) yyVals[-2+yyTop], GetLocation (yyVals[-3+yyTop]));
		ai.VariableDeclaration = current_variable;
		if (yyVals[-1+yyTop] != null) {
			lbag.AddLocation (ai, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
		} else {
			lbag.AddLocation (ai, GetLocation (yyVals[0+yyTop]));
		}
		yyVal = ai;
	  }
  break;
case 541:
#line 3971 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var list = new List<Expression> (4);
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 542:
#line 3977 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var list = (List<Expression>) yyVals[-2+yyTop];
		list.Add ((Expression) yyVals[0+yyTop]);
		yyVal = list;
	  }
  break;
case 543:
#line 3986 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	lexer.TypeOfParsing = true;
	  }
  break;
case 544:
#line 3990 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	lexer.TypeOfParsing = false;
		yyVal = new TypeOf ((FullNamedExpression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 547:
#line 4001 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	 	Error_TypeExpected (lexer.Location);
	 	yyVal = null;
	 }
  break;
case 548:
#line 4009 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {  
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];

		yyVal = new SimpleName (lt.Value, (int) yyVals[0+yyTop], lt.Location);
	  }
  break;
case 549:
#line 4015 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt1 = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var lt2 = (Tokenizer.LocatedToken) yyVals[-1+yyTop];

		yyVal = new QualifiedAliasMember (lt1.Value, lt2.Value, (int) yyVals[0+yyTop], lt1.Location);
	  }
  break;
case 550:
#line 4022 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		
		yyVal = new MemberAccess ((Expression) yyVals[-2+yyTop], lt.Value, lt.Location);		
	  }
  break;
case 551:
#line 4028 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		
		yyVal = new MemberAccess ((Expression) yyVals[-3+yyTop], lt.Value, (int) yyVals[0+yyTop], lt.Location);		
	  }
  break;
case 552:
#line 4034 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var te = ((MemberName) yyVals[-3+yyTop]).GetTypeExpression ();
		if (te.HasTypeArguments)
			Error_TypeExpected (GetLocation (yyVals[0+yyTop]));

		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (te, lt.Value, (int) yyVals[0+yyTop], lt.Location);		
	  }
  break;
case 553:
#line 4046 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[0+yyTop]), "generics");

		yyVal = yyVals[0+yyTop];
	  }
  break;
case 554:
#line 4056 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		if (lang_version == LanguageVersion.ISO_1)
			FeatureIsNotAvailable (lt.Location, "namespace alias qualifier");

		yyVal = lt;		
	  }
  break;
case 555:
#line 4067 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { 
		yyVal = new SizeOf ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 556:
#line 4075 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new CheckedExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 557:
#line 4083 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new UnCheckedExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 558:
#line 4091 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberAccess (new Indirection ((Expression) yyVals[-3+yyTop], GetLocation (yyVals[-2+yyTop])), lt.Value, (TypeArguments) yyVals[0+yyTop], lt.Location);
	  }
  break;
case 559:
#line 4099 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		start_anonymous (false, (ParametersCompiled) yyVals[0+yyTop], false, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 560:
#line 4103 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
	  }
  break;
case 561:
#line 4107 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		start_anonymous (false, (ParametersCompiled) yyVals[0+yyTop], true, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 562:
#line 4111 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
	  }
  break;
case 563:
#line 4118 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = ParametersCompiled.Undefined;
	  }
  break;
case 565:
#line 4126 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 566:
#line 4130 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		valid_param_mod = 0;
	  	yyVal = yyVals[-1+yyTop];
	  }
  break;
case 567:
#line 4138 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-3+yyTop]), "default value expression");

		yyVal = new DefaultValueExpression ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 569:
#line 4150 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.LogicalNot, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 570:
#line 4154 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.OnesComplement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 571:
#line 4158 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new Cast ((FullNamedExpression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 572:
#line 4163 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (!async_block) {
			report.Error (1992, GetLocation (yyVals[-1+yyTop]),
				"The `await' operator can only be used when its containing method or lambda expression is marked with the `async' modifier");
		} else {
			current_block.ParametersBlock.IsAsync = true;
		}
		
		yyVal = new Await ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 574:
#line 4182 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { 
	  	yyVal = new Unary (Unary.Operator.UnaryPlus, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 575:
#line 4186 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { 
		yyVal = new Unary (Unary.Operator.UnaryNegation, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 576:
#line 4190 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PreIncrement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 577:
#line 4194 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new UnaryMutator (UnaryMutator.Mode.PreDecrement, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 578:
#line 4198 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new Indirection ((Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 579:
#line 4202 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new Unary (Unary.Operator.AddressOf, (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 581:
#line 4210 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.Multiply, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 582:
#line 4215 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.Division, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 583:
#line 4220 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.Modulus, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 585:
#line 4229 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.Addition, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 586:
#line 4234 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 587:
#line 4238 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	/* Shift/Reduce conflict*/
		yyVal = new Binary (Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
  	  }
  break;
case 588:
#line 4243 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new As ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 589:
#line 4247 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new Is ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 591:
#line 4255 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.LeftShift, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 592:
#line 4260 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.RightShift, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 594:
#line 4269 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.LessThan, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 595:
#line 4274 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.GreaterThan, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 596:
#line 4279 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.LessThanOrEqual, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 597:
#line 4284 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.GreaterThanOrEqual, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 599:
#line 4293 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.Equality, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 600:
#line 4298 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.Inequality, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 602:
#line 4307 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.BitwiseAnd, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 604:
#line 4316 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.ExclusiveOr, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 606:
#line 4325 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.BitwiseOr, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 608:
#line 4334 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.LogicalAnd, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 610:
#line 4343 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new Binary (Binary.Operator.LogicalOr, 
			         (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 612:
#line 4352 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (lang_version < LanguageVersion.ISO_2)
			FeatureIsNotAvailable (GetLocation (yyVals[-1+yyTop]), "null coalescing operator");
			
		yyVal = new Nullable.NullCoalescingOperator ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 614:
#line 4363 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new Conditional (new BooleanExpression ((Expression) yyVals[-4+yyTop]), (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 615:
#line 4371 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { 
        var potentialRolePlayer  = yyVals[0+yyTop] as Expression;
	    var memberExpression = yyVals[-2+yyTop] as MemberAccess;
	    var simpleNameForRole = memberExpression != null ? memberExpression.LeftExpression as SimpleName : yyVals[-2+yyTop] as SimpleName;
	    if(simpleNameForRole != null){
	      var role = FindField(simpleNameForRole.Name, GetLocation(yyVals[-2+yyTop]));
          var isRole = role != null && role.IsRole;
	      if(current_method as Constructor != null){
             /*might be assigning to a role*/
	         yyVal = new RoleAssign ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	      } else if(isRole) {
	        report.Error (10000, GetLocation(potentialRolePlayer), "Roles can only be assigned to players in constructor");
	      } else{
             yyVal = new SimpleAssign ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
          }
	    } else   {  
	       yyVal = new SimpleAssign ((Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	    }
	  }
  break;
case 616:
#line 4391 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new CompoundAssign (
			Binary.Operator.Multiply, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 617:
#line 4396 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new CompoundAssign (
			Binary.Operator.Division, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 618:
#line 4401 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new CompoundAssign (
			Binary.Operator.Modulus, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 619:
#line 4406 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new CompoundAssign (
			Binary.Operator.Addition, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 620:
#line 4411 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new CompoundAssign (
			Binary.Operator.Subtraction, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 621:
#line 4416 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new CompoundAssign (
			Binary.Operator.LeftShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 622:
#line 4421 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new CompoundAssign (
			Binary.Operator.RightShift, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 623:
#line 4426 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new CompoundAssign (
			Binary.Operator.BitwiseAnd, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 624:
#line 4431 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new CompoundAssign (
			Binary.Operator.BitwiseOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 625:
#line 4436 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new CompoundAssign (
			Binary.Operator.ExclusiveOr, (Expression) yyVals[-2+yyTop], (Expression) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 626:
#line 4444 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var pars = new List<Parameter> (4);
		pars.Add ((Parameter) yyVals[0+yyTop]);

		yyVal = pars;
	  }
  break;
case 627:
#line 4451 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var pars = (List<Parameter>) yyVals[-2+yyTop];
		Parameter p = (Parameter)yyVals[0+yyTop];
		if (pars[0].GetType () != p.GetType ()) {
			report.Error (748, p.Location, "All lambda parameters must be typed either explicitly or implicitly");
		}
		
		pars.Add (p);
		yyVal = pars;
	  }
  break;
case 628:
#line 4465 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];

		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, (Parameter.Modifier) yyVals[-2+yyTop], null, lt.Location);
	  }
  break;
case 629:
#line 4471 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];

		yyVal = new Parameter ((FullNamedExpression) yyVals[-1+yyTop], lt.Value, Parameter.Modifier.NONE, null, lt.Location);
	  }
  break;
case 630:
#line 4477 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		yyVal = new ImplicitLambdaParameter (lt.Value, lt.Location);
	  }
  break;
case 631:
#line 4484 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = ParametersCompiled.EmptyReadOnlyParameters; }
  break;
case 632:
#line 4485 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { 
		var pars_list = (List<Parameter>) yyVals[0+yyTop];
		yyVal = new ParametersCompiled (pars_list.ToArray ());
	  }
  break;
case 635:
#line 4497 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		start_block (lexer.Location);
	  }
  break;
case 636:
#line 4501 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		Block b = end_block (lexer.Location);
		b.AddStatement (new ContextualReturn ((Expression) yyVals[0+yyTop]));
		yyVal = b;
	  }
  break;
case 638:
#line 4511 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);	
		yyVal = EmptyExpression.Null;
	  }
  break;
case 639:
#line 4519 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];	
		Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);
		start_anonymous (true, new ParametersCompiled (p), false, lt.Location);
	  }
  break;
case 640:
#line 4525 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 641:
#line 4530 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		Parameter p = new ImplicitLambdaParameter (lt.Value, lt.Location);
		start_anonymous (true, new ParametersCompiled (p), true, lt.Location);
	  }
  break;
case 642:
#line 4536 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 643:
#line 4541 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 644:
#line 4545 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	valid_param_mod = 0;
		start_anonymous (true, (ParametersCompiled) yyVals[-2+yyTop], false, GetLocation (yyVals[-4+yyTop]));
	  }
  break;
case 645:
#line 4550 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 646:
#line 4555 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;	  
	  }
  break;
case 647:
#line 4559 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	valid_param_mod = 0;
		start_anonymous (true, (ParametersCompiled) yyVals[-2+yyTop], true, GetLocation (yyVals[-5+yyTop]));
	  }
  break;
case 648:
#line 4564 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = end_anonymous ((ParametersBlock) yyVals[0+yyTop]);
		lbag.AddLocation (yyVal, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 654:
#line 4580 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new ArglistAccess (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 655:
#line 4587 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new RefValueExpr ((Expression) yyVals[-3+yyTop], (FullNamedExpression) yyVals[-1+yyTop], GetLocation (yyVals[-5+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 656:
#line 4592 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new RefTypeExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 657:
#line 4597 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new MakeRefExpr ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));	  
	  }
  break;
case 659:
#line 4609 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new BooleanExpression ((Expression) yyVals[0+yyTop]);
	  }
  break;
case 660:
#line 4622 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		lexer.ConstraintsParsing = true;
	  }
  break;
case 661:
#line 4626 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		MemberName name = MakeName ((MemberName) yyVals[0+yyTop]);
		Class c = new Class (current_namespace, current_class, name, (Modifiers) yyVals[-4+yyTop], (Attributes) yyVals[-5+yyTop]);
		if (((c.ModFlags & Modifiers.STATIC) != 0) && lang_version == LanguageVersion.ISO_1) {
			FeatureIsNotAvailable (c.Location, "static classes");
		}
			
		push_current_class (c, yyVals[-3+yyTop]);
	  }
  break;
case 662:
#line 4637 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		lexer.ConstraintsParsing = false;

		current_class.SetParameterInfo ((List<Constraints>) yyVals[0+yyTop]);
		lbag.AddMember (current_class, mod_locations, GetLocation (yyVals[-5+yyTop]));

		if (doc_support) {
			current_container.DocComment = Lexer.consume_doc_comment ();
			Lexer.doc_state = XmlCommentState.Allowed;
		}
		
		lexer.parsing_modifiers = true;
	  }
  break;
case 663:
#line 4651 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		--lexer.parsing_declaration;
		if (doc_support)
			Lexer.doc_state = XmlCommentState.Allowed;
	  }
  break;
case 664:
#line 4657 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		lbag.AppendToMember (current_class, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = pop_current_class ();
	  }
  break;
case 665:
#line 4665 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = null; }
  break;
case 666:
#line 4667 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = yyVals[0+yyTop]; }
  break;
case 667:
#line 4672 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	    mod_locations = null;
		yyVal = ModifierNone;
		lexer.parsing_modifiers = false;
	  }
  break;
case 668:
#line 4678 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		lexer.parsing_modifiers = false;		
	  }
  break;
case 670:
#line 4686 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { 
		var m1 = (Modifiers) yyVals[-1+yyTop];
		var m2 = (Modifiers) yyVals[0+yyTop];
        
		if ((m1 & m2) != 0) {
			report.Error (1004, lexer.Location - ModifiersExtensions.Name (m2).Length,
				"Duplicate `{0}' modifier", ModifiersExtensions.Name (m2));
		} else if ((m2 & Modifiers.AccessibilityMask) != 0 && (m1 & Modifiers.AccessibilityMask) != 0 &&
			((m2 | m1 & Modifiers.AccessibilityMask) != (Modifiers.PROTECTED | Modifiers.INTERNAL))) {
			report.Error (107, lexer.Location - ModifiersExtensions.Name (m2).Length,
				"More than one protection modifier specified");
		}
		
		yyVal = m1 | m2;
	  }
  break;
case 671:
#line 4705 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = Modifiers.NEW;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
		
		if (current_container == module)
			report.Error (1530, GetLocation (yyVals[0+yyTop]), "Keyword `new' is not allowed on namespace elements");
	  }
  break;
case 672:
#line 4713 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = Modifiers.PUBLIC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 673:
#line 4718 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = Modifiers.PROTECTED;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 674:
#line 4723 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = Modifiers.INTERNAL;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 675:
#line 4728 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = Modifiers.PRIVATE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 676:
#line 4733 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = Modifiers.ABSTRACT;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 677:
#line 4738 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = Modifiers.SEALED;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 678:
#line 4743 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = Modifiers.STATIC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 679:
#line 4748 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = Modifiers.READONLY;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 680:
#line 4753 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = Modifiers.VIRTUAL;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 681:
#line 4758 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = Modifiers.OVERRIDE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 682:
#line 4763 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = Modifiers.EXTERN;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 683:
#line 4768 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = Modifiers.VOLATILE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 684:
#line 4773 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = Modifiers.UNSAFE;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
		if (!settings.Unsafe)
			Error_UnsafeCodeNotAllowed (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 685:
#line 4780 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = Modifiers.ASYNC;
		StoreModifierLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 687:
#line 4789 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		current_container.AddBasesForPart (current_class, (List<FullNamedExpression>) yyVals[0+yyTop]);
	 }
  break;
case 689:
#line 4797 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 690:
#line 4801 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = null;
	 }
  break;
case 691:
#line 4809 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var constraints = new List<Constraints> (1);
		constraints.Add ((Constraints) yyVals[0+yyTop]);
		yyVal = constraints;
	  }
  break;
case 692:
#line 4815 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var constraints = (List<Constraints>) yyVals[-1+yyTop];
		Constraints new_constraint = (Constraints)yyVals[0+yyTop];

		foreach (Constraints c in constraints) {
			if (new_constraint.TypeParameter.Value == c.TypeParameter.Value) {
				report.Error (409, new_constraint.Location,
					"A constraint clause has already been specified for type parameter `{0}'",
					new_constraint.TypeParameter.Value);
			}
		}

		constraints.Add (new_constraint);
		yyVal = constraints;
	  }
  break;
case 693:
#line 4834 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		yyVal = new Constraints (new SimpleMemberName (lt.Value, lt.Location), (List<FullNamedExpression>) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
	  }
  break;
case 694:
#line 4842 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var constraints = new List<FullNamedExpression> (1);
		constraints.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = constraints;
	  }
  break;
case 695:
#line 4848 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var constraints = (List<FullNamedExpression>) yyVals[-2+yyTop];
		var prev = constraints [constraints.Count - 1] as SpecialContraintExpr;
		if (prev != null && (prev.Constraint & SpecialConstraint.Constructor) != 0) {			
			report.Error (401, GetLocation (yyVals[-1+yyTop]), "The `new()' constraint must be the last constraint specified");
		}
		
		prev = yyVals[0+yyTop] as SpecialContraintExpr;
		if (prev != null) {
			if ((prev.Constraint & (SpecialConstraint.Class | SpecialConstraint.Struct)) != 0) {
				report.Error (449, prev.Location, "The `class' or `struct' constraint must be the first constraint specified");			
			} else {
			 	prev = constraints [0] as SpecialContraintExpr;
			 	if (prev != null && (prev.Constraint & SpecialConstraint.Struct) != 0) {			
					report.Error (451, GetLocation (yyVals[0+yyTop]), "The `new()' constraint cannot be used with the `struct' constraint");
				}
			}
		}

		constraints.Add ((FullNamedExpression) yyVals[0+yyTop]);
		yyVal = constraints;
	  }
  break;
case 696:
#line 4874 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (yyVals[0+yyTop] is ComposedCast)
			report.Error (706, GetLocation (yyVals[0+yyTop]), "Invalid constraint type `{0}'", ((ComposedCast)yyVals[0+yyTop]).GetSignatureForError ());
	  
	  	yyVal = yyVals[0+yyTop];
	  }
  break;
case 697:
#line 4881 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Constructor, GetLocation (yyVals[-2+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 698:
#line 4886 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Class, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 699:
#line 4890 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new SpecialContraintExpr (SpecialConstraint.Struct, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 700:
#line 4897 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = Variance.None;
	  }
  break;
case 701:
#line 4901 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (lang_version <= LanguageVersion.V_3)
			FeatureIsNotAvailable (lexer.Location, "generic type variance");

		yyVal = yyVals[0+yyTop];
	  }
  break;
case 702:
#line 4911 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = Variance.Covariant;
	  }
  break;
case 703:
#line 4915 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = Variance.Contravariant;
	  }
  break;
case 704:
#line 4935 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		++lexer.parsing_block;
		start_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 705:
#line 4940 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 706:
#line 4947 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	 	--lexer.parsing_block;
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 707:
#line 4952 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	 	--lexer.parsing_block;
		yyVal = end_block (lexer.Location);
	  }
  break;
case 708:
#line 4961 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		++lexer.parsing_block;
		current_block.StartLocation = GetLocation (yyVals[0+yyTop]);
	  }
  break;
case 709:
#line 4966 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		--lexer.parsing_block;
		yyVal = end_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 714:
#line 4984 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 715:
#line 4988 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 717:
#line 4993 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }
  break;
case 720:
#line 5012 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 721:
#line 5016 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		current_block.AddStatement ((Statement) yyVals[0+yyTop]);
	  }
  break;
case 750:
#line 5057 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		  report.Error (1023, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
		  yyVal = null;
	  }
  break;
case 751:
#line 5062 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		  report.Error (1023, GetLocation (yyVals[0+yyTop]), "An embedded statement may not be a declaration or labeled statement");
		  yyVal = null;
	  }
  break;
case 752:
#line 5067 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 753:
#line 5075 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		/* Uses lexer.Location because semicolon location is not kept in quick mode*/
		yyVal = new EmptyStatement (lexer.Location);
	  }
  break;
case 754:
#line 5083 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		LabeledStatement labeled = new LabeledStatement (lt.Value, current_block, lt.Location);

		current_block.AddLabel (labeled);
		current_block.AddStatement (labeled);
	  }
  break;
case 757:
#line 5096 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (yyVals[-1+yyTop] is VarExpr)
			yyVals[-1+yyTop] = new SimpleName ("var", ((VarExpr) yyVals[-1+yyTop]).Location);
	  
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 758:
#line 5112 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { 
		/* Ok, the above "primary_expression" is there to get rid of*/
		/* both reduce/reduce and shift/reduces in the grammar, it should*/
		/* really just be "type_name".  If you use type_name, a reduce/reduce*/
		/* creeps up.  If you use namespace_or_type_name (which is all we need*/
		/* really) two shift/reduces appear.*/
		/* */

		/* So the super-trick is that primary_expression*/
		/* can only be either a SimpleName or a MemberAccess. */
		/* The MemberAccess case arises when you have a fully qualified type-name like :*/
		/* Foo.Bar.Blah i;*/
		/* SimpleName is when you have*/
		/* Blah i;*/
		
		Expression expr = (Expression) yyVals[-1+yyTop];
		if (yyVals[0+yyTop] == null) {
			SimpleName sn = expr as SimpleName;
			if (sn != null && sn.Name == "var")
				yyVal = new VarExpr (sn.Location);
			else
				yyVal = yyVals[-1+yyTop];
		} else if (expr is ATypeNameExpression) {
			yyVal = new ComposedCast ((ATypeNameExpression)expr, (ComposedTypeSpecifier) yyVals[0+yyTop]);
		} else {
			Error_ExpectingTypeName (expr);
			yyVal = null;
		}
	  }
  break;
case 759:
#line 5142 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		ATypeNameExpression expr = yyVals[-1+yyTop] as ATypeNameExpression;

		if (expr != null) {
			yyVal = new ComposedCast (expr, (ComposedTypeSpecifier) yyVals[0+yyTop]);
		} else {
			Error_ExpectingTypeName ((Expression)yyVals[-1+yyTop]);
			yyVal = expr;
		}
	  }
  break;
case 760:
#line 5153 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (yyVals[0+yyTop] == null)
			yyVal = yyVals[-1+yyTop];
		else
			yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 761:
#line 5160 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new ComposedCast ((FullNamedExpression) yyVals[-1+yyTop], (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 762:
#line 5164 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new ComposedCast (new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[-1+yyTop])), (ComposedTypeSpecifier) yyVals[0+yyTop]);
	  }
  break;
case 763:
#line 5168 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		Expression.Error_VoidInvalidInTheContext (GetLocation (yyVals[0+yyTop]), report);
		yyVal = new TypeExpression (compiler.BuiltinTypes.Void, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 765:
#line 5177 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	((ComposedTypeSpecifier) yyVals[-1+yyTop]).Next = (ComposedTypeSpecifier) yyVals[0+yyTop];
	  	yyVal = yyVals[-1+yyTop];
	  }
  break;
case 766:
#line 5185 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = ComposedTypeSpecifier.CreatePointer (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 768:
#line 5193 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (async_block) {
			report.Error (4003, GetLocation (yyVals[0+yyTop]), "`await' cannot be used as an identifier within an async method or lambda expression");
			yyVal = Tokenizer.LocatedToken.Create ("await", GetLocation (yyVals[0+yyTop]));
		}
	  }
  break;
case 769:
#line 5203 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockVariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }
  break;
case 770:
#line 5210 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = current_variable;
		current_variable = null;
		lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 771:
#line 5216 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.Constant, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockConstantDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }
  break;
case 772:
#line 5223 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = current_variable;
		current_variable = null;
		lbag.AddLocation (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 774:
#line 5233 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
		/* TODO: lbag*/
	  }
  break;
case 775:
#line 5238 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	if (yyToken == Token.OPEN_BRACKET_EXPR) {
			report.Error (650, lexer.Location,
				"Syntax error, bad array declarator. To declare a managed array the rank specifier precedes the variable's identifier. To declare a fixed size buffer field, use the fixed keyword before the field type");
		} else {
			Error_SyntaxError (yyToken);
		}
	  }
  break;
case 779:
#line 5256 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		foreach (var d in current_variable.Declarators) {
			if (d.Initializer == null)
				Error_MissingInitializer (d.Variable.Location);
		}
	  }
  break;
case 782:
#line 5271 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];	  
		var li = new LocalVariable (current_variable.Variable, lt.Value, lt.Location);
		var d = new BlockVariableDeclaration.Declarator (li, null);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 783:
#line 5280 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];	  
		var li = new LocalVariable (current_variable.Variable, lt.Value, lt.Location);
		var d = new BlockVariableDeclaration.Declarator (li, (Expression) yyVals[0+yyTop]);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 784:
#line 5292 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		report.Error (145, lexer.Location, "A const field requires a value to be provided");
	  }
  break;
case 785:
#line 5296 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
	  }
  break;
case 790:
#line 5313 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];	  
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.Constant, lt.Location);
		var d = new BlockVariableDeclaration.Declarator (li, (Expression) yyVals[0+yyTop]);
		current_variable.AddDeclarator (d);
		current_block.AddLocalName (li);
	  	lbag.AddLocation (d, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 792:
#line 5326 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new StackAlloc ((Expression) yyVals[-3+yyTop], (Expression) yyVals[-1+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddLocation (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 793:
#line 5331 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		report.Error (1575, GetLocation (yyVals[-1+yyTop]), "A stackalloc expression requires [] after type");
		yyVal = new StackAlloc ((Expression) yyVals[0+yyTop], null, GetLocation (yyVals[-1+yyTop]));		
	  }
  break;
case 794:
#line 5339 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 795:
#line 5343 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 796:
#line 5347 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 797:
#line 5348 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = yyVals[-1+yyTop]; }
  break;
case 798:
#line 5357 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		ExpressionStatement s = yyVals[0+yyTop] as ExpressionStatement;
		if (s == null) { 
			Expression.Error_InvalidExpressionStatement (report, GetLocation (yyVals[0+yyTop]));
			yyVal = new StatementExpression (EmptyExpressionStatement.Instance);
		} else {
			yyVal = new StatementExpression (s);
		}
	  }
  break;
case 799:
#line 5370 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		Expression expr = (Expression) yyVals[0+yyTop];
		ExpressionStatement s;

	        s = new OptionalAssign (new SimpleName ("$retval", lexer.Location), expr, lexer.Location);
		yyVal = new StatementExpression (s);
	  }
  break;
case 800:
#line 5378 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = new EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 803:
#line 5392 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { 
		if (yyVals[0+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
		
		yyVal = new If ((BooleanExpression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 804:
#line 5401 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new If ((BooleanExpression) yyVals[-4+yyTop], (Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-6+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
		
		if (yyVals[-2+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[-2+yyTop]));
		if (yyVals[0+yyTop] is EmptyStatement)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 805:
#line 5414 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		start_block (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 806:
#line 5418 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new Switch ((Expression) yyVals[-5+yyTop], (ExplicitBlock) current_block.Explicit, (List<SwitchSection>) yyVals[-1+yyTop], GetLocation (yyVals[-7+yyTop]));	
		end_block (GetLocation (yyVals[0+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-6+yyTop]), GetLocation (yyVals[-4+yyTop]));
	  }
  break;
case 807:
#line 5427 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		report.Warning (1522, 1, current_block.StartLocation, "Empty switch block"); 
		yyVal = new List<SwitchSection> ();
	  }
  break;
case 809:
#line 5436 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var sections = new List<SwitchSection> (4);

		sections.Add ((SwitchSection) yyVals[0+yyTop]);
		yyVal = sections;
	  }
  break;
case 810:
#line 5443 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var sections = (List<SwitchSection>) yyVals[-1+yyTop];

		sections.Add ((SwitchSection) yyVals[0+yyTop]);
		yyVal = sections;
	  }
  break;
case 811:
#line 5450 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);	  
		yyVal = new List<SwitchSection> ();
	  }
  break;
case 812:
#line 5458 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		current_block = current_block.CreateSwitchBlock (lexer.Location);
	  }
  break;
case 813:
#line 5462 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new SwitchSection ((List<SwitchLabel>) yyVals[-2+yyTop], current_block);
	  }
  break;
case 814:
#line 5469 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var labels = new List<SwitchLabel> (2);

		labels.Add ((SwitchLabel) yyVals[0+yyTop]);
		yyVal = labels;
	  }
  break;
case 815:
#line 5476 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var labels = (List<SwitchLabel>) (yyVals[-1+yyTop]);
		labels.Add ((SwitchLabel) yyVals[0+yyTop]);

		yyVal = labels;
	  }
  break;
case 816:
#line 5486 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	 	yyVal = new SwitchLabel ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
	 	lbag.AddLocation (yyVal, GetLocation (yyVals[0+yyTop]));
	 }
  break;
case 817:
#line 5491 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new SwitchLabel (null, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 822:
#line 5505 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new While ((BooleanExpression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 823:
#line 5517 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new Do ((Statement) yyVals[-5+yyTop], (BooleanExpression) yyVals[-2+yyTop], GetLocation (yyVals[-6+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 824:
#line 5525 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		start_block (GetLocation (yyVals[0+yyTop]));
		current_block.IsCompilerGenerated = true;
	  }
  break;
case 825:
#line 5530 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 826:
#line 5541 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		For f = new For ((Statement) yyVals[-6+yyTop], (BooleanExpression) yyVals[-4+yyTop], (Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-9+yyTop]));
		current_block.AddStatement (f);
		
		lbag.AddStatement (f, current_block.StartLocation, GetLocation (yyVals[-5+yyTop]), GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));

		yyVal = end_block (GetLocation (yyVals[-5+yyTop]));
	  }
  break;
case 827:
#line 5553 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = end_block (current_block.StartLocation);
	  }
  break;
case 828:
#line 5560 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = new EmptyStatement (lexer.Location); }
  break;
case 830:
#line 5566 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new BlockVariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }
  break;
case 831:
#line 5573 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = current_variable;
		current_variable = null;
	  }
  break;
case 833:
#line 5581 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = null; }
  break;
case 835:
#line 5586 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { yyVal = new EmptyStatement (lexer.Location); }
  break;
case 839:
#line 5597 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	var sl = yyVals[-2+yyTop] as StatementList;
	  	if (sl == null) {
	  		sl = new StatementList ((Statement) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop]);
			lbag.AddStatement (sl, GetLocation (yyVals[-1+yyTop]));
	  	} else {
	  		sl.Add ((Statement) yyVals[0+yyTop]);
	  		lbag.AppendTo (sl, GetLocation (yyVals[-1+yyTop]));
	  	}
	  		
		yyVal = sl;
	  }
  break;
case 840:
#line 5613 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		report.Error (230, GetLocation (yyVals[-5+yyTop]), "Type and identifier are both required in a foreach statement");
		yyVal = null;
	  }
  break;
case 841:
#line 5618 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		start_block (GetLocation (yyVals[-5+yyTop]));
		current_block.IsCompilerGenerated = true;
		
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.ForeachVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		yyVal = li;
	  }
  break;
case 842:
#line 5628 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Foreach f = new Foreach ((Expression) yyVals[-6+yyTop], (LocalVariable) yyVals[-1+yyTop], (Expression) yyVals[-3+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-8+yyTop]));
		current_block.AddStatement (f);
		
		lbag.AddStatement (f, GetLocation (yyVals[-7+yyTop]), GetLocation (yyVals[-4+yyTop]), GetLocation (yyVals[-2+yyTop]));
		yyVal = end_block (GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 849:
#line 5651 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new Break (GetLocation (yyVals[-1+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 850:
#line 5659 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new Continue (GetLocation (yyVals[-1+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 851:
#line 5667 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new Goto (lt.Value, lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 852:
#line 5673 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new GotoCase ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 853:
#line 5678 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new GotoDefault (GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 854:
#line 5686 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new Return ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 855:
#line 5694 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new Throw ((Expression) yyVals[-1+yyTop], GetLocation (yyVals[-2+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 856:
#line 5702 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			report.Error (1003, lt.Location, "; expected");
		} else if (yyVals[-1+yyTop] == null) {
			report.Error (1627, GetLocation (yyVals[0+yyTop]), "Expression expected after yield return");
		} else if (lang_version == LanguageVersion.ISO_1){
			FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.ParametersBlock.TopBlock.IsIterator = true;
		yyVal = new Yield ((Expression) yyVals[-1+yyTop], lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-2+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 857:
#line 5718 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		string s = lt.Value;
		if (s != "yield"){
			report.Error (1003, lt.Location, "; expected");
		} else if (lang_version == LanguageVersion.ISO_1){
			FeatureIsNotAvailable (lt.Location, "iterators");
		}
		
		current_block.ParametersBlock.TopBlock.IsIterator = true;
		yyVal = new YieldBreak (lt.Location);
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]), GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 860:
#line 5740 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new TryCatch ((Block) yyVals[-1+yyTop], (List<Catch>) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]), false);
	  }
  break;
case 861:
#line 5744 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new TryFinally ((Statement) yyVals[-2+yyTop], (Block) yyVals[0+yyTop], GetLocation (yyVals[-3+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 862:
#line 5749 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new TryFinally (new TryCatch ((Block) yyVals[-3+yyTop], (List<Catch>) yyVals[-2+yyTop], GetLocation (yyVals[-4+yyTop]), true), (Block) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 863:
#line 5754 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		report.Error (1524, GetLocation (yyVals[-2+yyTop]), "Expected catch or finally");
		yyVal = null;
	  }
  break;
case 864:
#line 5762 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var l = new List<Catch> (2);

		l.Add ((Catch) yyVals[0+yyTop]);
		yyVal = l;
	  }
  break;
case 865:
#line 5769 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var l = (List<Catch>) yyVals[-1+yyTop];
		
		Catch c = (Catch) yyVals[0+yyTop];
		if (l [0].IsGeneral) {
			report.Error (1017, c.loc, "Try statement already has an empty catch block");
		} else {
			if (c.IsGeneral)
				l.Insert (0, c);
			else
				l.Add (c);
		}
		
		yyVal = l;
	  }
  break;
case 868:
#line 5793 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new Catch ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 869:
#line 5797 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		start_block (GetLocation (yyVals[-3+yyTop]));
		var c = new Catch (current_block, GetLocation (yyVals[-4+yyTop]));
		c.TypeExpression = (FullNamedExpression) yyVals[-2+yyTop];

		if (yyVals[-1+yyTop] != null) {
			var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
			c.Variable = new LocalVariable (current_block, lt.Value, lt.Location);
			current_block.AddLocalName (c.Variable);
		}
		
		lbag.AddLocation (c, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[0+yyTop]));
		yyVal = c;
	  }
  break;
case 870:
#line 5812 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 871:
#line 5816 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	if (yyToken == Token.CLOSE_PARENS) {
			report.Error (1015, lexer.Location,
				"A type that derives from `System.Exception', `object', or `string' expected");
		} else {
			Error_SyntaxError (yyToken);
		}
		
		yyVal = new Catch (null, GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 872:
#line 5830 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new Checked ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 873:
#line 5837 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new Unchecked ((Block) yyVals[0+yyTop], GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 874:
#line 5844 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (!settings.Unsafe)
			Error_UnsafeCodeNotAllowed (GetLocation (yyVals[0+yyTop]));
	  }
  break;
case 875:
#line 5847 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new Unsafe ((Block) yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 876:
#line 5854 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		yyVal = new Lock ((Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (yyVal, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
	  }
  break;
case 877:
#line 5865 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	    start_block (GetLocation (yyVals[-2+yyTop]));
	    
		current_block.IsCompilerGenerated = true;
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.FixedVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new Fixed.VariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }
  break;
case 878:
#line 5875 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = current_variable;
		current_variable = null;
	  }
  break;
case 879:
#line 5880 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Fixed f = new Fixed ((Fixed.VariableDeclaration) yyVals[-1+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-9+yyTop]));
		current_block.AddStatement (f);
		yyVal = end_block (GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 880:
#line 5892 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	    start_block (GetLocation (yyVals[-2+yyTop]));
	    
		current_block.IsCompilerGenerated = true;
		var lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
		var li = new LocalVariable (current_block, lt.Value, LocalVariable.Flags.UsingVariable | LocalVariable.Flags.Used, lt.Location);
		current_block.AddLocalName (li);
		current_variable = new Using.VariableDeclaration ((FullNamedExpression) yyVals[-1+yyTop], li);
	  }
  break;
case 881:
#line 5902 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = current_variable;	  
		current_variable = null;
	  }
  break;
case 882:
#line 5907 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Using u = new Using ((Using.VariableDeclaration) yyVals[-1+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-9+yyTop]));
		current_block.AddStatement (u);
		yyVal = end_block (GetLocation (yyVals[-2+yyTop]));
	  }
  break;
case 883:
#line 5916 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (yyVals[0+yyTop] is EmptyStatement && lexer.peek_token () == Token.OPEN_BRACE)
			Warning_EmptyStatement (GetLocation (yyVals[0+yyTop]));
	  
		Using u = new Using ((Expression) yyVals[-2+yyTop], (Statement) yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		lbag.AddStatement (u, GetLocation (yyVals[-3+yyTop]), GetLocation (yyVals[-1+yyTop]));
		yyVal = u;
	  }
  break;
case 884:
#line 5928 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		Error_MissingInitializer (lexer.Location);
	  }
  break;
case 885:
#line 5932 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		current_variable.Initializer = (Expression) yyVals[0+yyTop];
		yyVal = current_variable;
	  }
  break;
case 886:
#line 5943 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		lexer.query_parsing = false;
			
		Linq.AQueryClause from = yyVals[-1+yyTop] as Linq.AQueryClause;
			
		from.Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = from;
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }
  break;
case 887:
#line 5955 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		Linq.AQueryClause from = yyVals[-1+yyTop] as Linq.AQueryClause;
			
		from.Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = from;
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }
  break;
case 888:
#line 5966 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	        lexer.query_parsing = false;
		yyVal = yyVals[-1+yyTop];

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }
  break;
case 889:
#line 5973 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	        yyVal = yyVals[-1+yyTop];
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }
  break;
case 890:
#line 5982 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.QueryExpression (new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-3+yyTop])));
	  }
  break;
case 891:
#line 5990 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.QueryExpression (
			new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-4+yyTop])) {
				IdentifierType = (FullNamedExpression)yyVals[-3+yyTop]
			}
		);
	  }
  break;
case 892:
#line 6005 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.QueryExpression (new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-3+yyTop])));
	  }
  break;
case 893:
#line 6013 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.QueryExpression (
			new Linq.QueryStartClause ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], rv, GetLocation (yyVals[-4+yyTop])) {
				IdentifierType = (FullNamedExpression)yyVals[-3+yyTop]
			}
		);
	  }
  break;
case 894:
#line 6028 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 895:
#line 6032 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		yyVal = new Linq.SelectMany ((Linq.QueryBlock)current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
	  }
  break;
case 896:
#line 6043 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 897:
#line 6047 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);

		yyVal = new Linq.SelectMany ((Linq.QueryBlock)current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop])) {
			IdentifierType = (FullNamedExpression)yyVals[-4+yyTop]
		};
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
	  }
  break;
case 898:
#line 6064 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	Linq.AQueryClause head = (Linq.AQueryClause)yyVals[-1+yyTop];
		
		if (yyVals[0+yyTop] != null)
			head.Next = (Linq.AQueryClause)yyVals[0+yyTop];
				
		if (yyVals[-2+yyTop] != null) {
			Linq.AQueryClause clause = (Linq.AQueryClause)yyVals[-2+yyTop];
			clause.Tail.Next = head;
			head = clause;
		}
		
		yyVal = head;
	  }
  break;
case 900:
#line 6080 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		Error_SyntaxError (yyToken);
		yyVal = null;
	  }
  break;
case 901:
#line 6088 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 902:
#line 6092 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new Linq.Select ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }
  break;
case 903:
#line 6099 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	if (linq_clause_blocks == null)
	  		linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  	linq_clause_blocks.Push ((Linq.QueryBlock)current_block);
	  }
  break;
case 904:
#line 6107 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 905:
#line 6114 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new Linq.GroupBy ((Linq.QueryBlock)current_block, (Expression)yyVals[-3+yyTop], linq_clause_blocks.Pop (), (Expression)yyVals[0+yyTop], GetLocation (yyVals[-5+yyTop]));
		
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }
  break;
case 909:
#line 6130 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		((Linq.AQueryClause)yyVals[-1+yyTop]).Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 915:
#line 6146 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 916:
#line 6150 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var lt = (Tokenizer.LocatedToken) yyVals[-3+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
	  	yyVal = new Linq.Let ((Linq.QueryBlock) current_block, sn, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-4+yyTop]));
	  	
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
		
		((Linq.QueryBlock)current_block).AddRangeVariable (sn);
	  }
  break;
case 917:
#line 6164 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
	  	current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 918:
#line 6168 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new Linq.Where ((Linq.QueryBlock)current_block, (Expression)yyVals[0+yyTop], GetLocation (yyVals[-2+yyTop]));

		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  }
  break;
case 919:
#line 6178 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }
  break;
case 920:
#line 6186 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }
  break;
case 921:
#line 6194 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 922:
#line 6202 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
	  
		var outer_selector = linq_clause_blocks.Pop ();
		var block = linq_clause_blocks.Pop ();

		var lt = (Tokenizer.LocatedToken) yyVals[-10+yyTop];	
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		Linq.RangeVariable into;
		
		if (yyVals[0+yyTop] == null) {
			into = sn;
	  		yyVal = new Linq.Join (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, GetLocation (yyVals[-11+yyTop]));
		} else {
			/**/
			/* Set equals right side parent to beginning of linq query, it is not accessible therefore cannot cause name collisions*/
			/**/
			var parent = block.Parent;
			while (parent is Linq.QueryBlock) {
				parent = parent.Parent;
			}
			current_block.Parent = parent;
			
			((Linq.QueryBlock)current_block).AddRangeVariable (sn);
		
			lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
			into = new Linq.RangeVariable (lt.Value, lt.Location);

			yyVal = new Linq.GroupJoin (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, into, GetLocation (yyVals[-11+yyTop]));	
		}

		current_block = block.Parent;
		((Linq.QueryBlock)current_block).AddRangeVariable (into);
	  }
  break;
case 923:
#line 6238 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }
  break;
case 924:
#line 6246 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);
	  }
  break;
case 925:
#line 6254 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;

		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 926:
#line 6262 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		current_block.AddStatement (new ContextualReturn ((Expression) yyVals[-1+yyTop]));
		current_block.SetEndLocation (lexer.Location);
	  
		var outer_selector = linq_clause_blocks.Pop ();
		var block = linq_clause_blocks.Pop ();
		
		var lt = (Tokenizer.LocatedToken) yyVals[-10+yyTop];
		var sn = new Linq.RangeVariable (lt.Value, lt.Location);
		Linq.RangeVariable into;
		
		if (yyVals[0+yyTop] == null) {
			into = sn;		
	  		yyVal = new Linq.Join (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, GetLocation (yyVals[-12+yyTop])) {
	  			IdentifierType = (FullNamedExpression)yyVals[-11+yyTop]
	  		};
		} else {
			/**/
			/* Set equals right side parent to beginning of linq query, it is not accessible therefore cannot cause name collisions*/
			/**/
			var parent = block.Parent;
			while (parent is Linq.QueryBlock) {
				parent = parent.Parent;
			}
			current_block.Parent = parent;
		
			((Linq.QueryBlock)current_block).AddRangeVariable (sn);
		
			lt = (Tokenizer.LocatedToken) yyVals[0+yyTop];
			into = new Linq.RangeVariable (lt.Value, lt.Location); /* TODO:*/
			
			yyVal = new Linq.GroupJoin (block, sn, (Expression)yyVals[-7+yyTop], outer_selector, (Linq.QueryBlock) current_block, into, GetLocation (yyVals[-12+yyTop])) {
	  			IdentifierType = (FullNamedExpression)yyVals[-11+yyTop]
	  		};			
		}
		
		current_block = block.Parent;
		((Linq.QueryBlock)current_block).AddRangeVariable (into);		
	  }
  break;
case 928:
#line 6306 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 929:
#line 6313 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 930:
#line 6317 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		yyVal = yyVals[0+yyTop];
	  }
  break;
case 932:
#line 6328 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
	  }
  break;
case 933:
#line 6335 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		((Linq.AQueryClause)yyVals[-3+yyTop]).Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-3+yyTop];
	  }
  break;
case 935:
#line 6344 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		current_block.SetEndLocation (lexer.Location);
		current_block = current_block.Parent;
	  
		current_block = new Linq.QueryBlock ((Linq.QueryBlock) current_block, lexer.Location);	 
	 }
  break;
case 936:
#line 6351 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		((Linq.AQueryClause)yyVals[-3+yyTop]).Tail.Next = (Linq.AQueryClause)yyVals[0+yyTop];
		yyVal = yyVals[-3+yyTop];
	 }
  break;
case 937:
#line 6359 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new Linq.OrderByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[0+yyTop]);	
	  }
  break;
case 938:
#line 6363 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new Linq.OrderByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
	  }
  break;
case 939:
#line 6367 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new Linq.OrderByDescending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
	  }
  break;
case 940:
#line 6374 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new Linq.ThenByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[0+yyTop]);	
	  }
  break;
case 941:
#line 6378 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new Linq.ThenByAscending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
	  }
  break;
case 942:
#line 6382 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new Linq.ThenByDescending ((Linq.QueryBlock) current_block, (Expression)yyVals[-1+yyTop]);	
	  }
  break;
case 944:
#line 6391 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		/* query continuation block is not linked with query block but with block*/
		/* before. This means each query can use same range variable names for*/
		/* different identifiers.*/

		current_block.SetEndLocation (GetLocation (yyVals[-1+yyTop]));
		current_block = current_block.Parent;
	
		current_block = new Linq.QueryBlock (current_block, lexer.Location);
		
		if (linq_clause_blocks == null)
			linq_clause_blocks = new Stack<Linq.QueryBlock> ();
	  		
		linq_clause_blocks.Push ((Linq.QueryBlock) current_block);		
	  }
  break;
case 945:
#line 6407 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var current_block = linq_clause_blocks.Pop ();	  
		var lt = (Tokenizer.LocatedToken) yyVals[-2+yyTop];
		var rv = new Linq.RangeVariable (lt.Value, lt.Location);
  		yyVal = new Linq.QueryStartClause ((Linq.QueryBlock)current_block, null, rv, GetLocation (yyVals[-3+yyTop])) {
  			next = (Linq.AQueryClause)yyVals[0+yyTop]
  		};
	  }
  break;
case 948:
#line 6434 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  { 
		current_container = new Class (current_namespace, current_class, new MemberName ("<InteractiveExpressionClass>"), Modifiers.PUBLIC, null);
		current_class = current_container;

		/* (ref object retval)*/
		Parameter [] mpar = new Parameter [1];
		mpar [0] = new Parameter (new TypeExpression (compiler.BuiltinTypes.Object, Location.Null), "$retval", Parameter.Modifier.REF, null, Location.Null);

		ParametersCompiled pars = new ParametersCompiled (mpar);
		var mods = Modifiers.PUBLIC | Modifiers.STATIC;
		if (settings.Unsafe)
			mods |= Modifiers.UNSAFE;

		current_local_parameters = pars;
		Method method = new Method (
			current_class,
			null, /* generic*/
			new TypeExpression (compiler.BuiltinTypes.Void, Location.Null),
			mods,
			new MemberName ("Host"),
			pars,
			null /* attributes */);
			
		current_container.AddMethod (method);			

		oob_stack.Push (method);
		++lexer.parsing_block;
		start_block (lexer.Location);
	  }
  break;
case 949:
#line 6464 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		--lexer.parsing_block;
		Method method = (Method) oob_stack.Pop ();

		method.Block = (ToplevelBlock) end_block(lexer.Location);

		InteractiveResult = (Class) pop_current_class ();
		current_local_parameters = null;
	  }
  break;
case 957:
#line 6496 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		module.DocumentationBuilder.ParsedName = (MemberName) yyVals[0+yyTop];
	  }
  break;
case 958:
#line 6503 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[0+yyTop];
	  }
  break;
case 959:
#line 6507 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		module.DocumentationBuilder.ParsedBuiltinType = (TypeExpression)yyVals[-1+yyTop];
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[0+yyTop];
		yyVal = null;
	  }
  break;
case 960:
#line 6513 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		module.DocumentationBuilder.ParsedBuiltinType = (TypeExpression)yyVals[-3+yyTop];
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[0+yyTop];
		var lt = (Tokenizer.LocatedToken) yyVals[-1+yyTop];
		yyVal = new MemberName (lt.Value);
	  }
  break;
case 961:
#line 6520 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new MemberName ((MemberName) yyVals[-2+yyTop], new MemberName (MemberCache.IndexerNameAlias));
	  }
  break;
case 962:
#line 6524 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 963:
#line 6528 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		module.DocumentationBuilder.ParsedParameters = (List<DocumentationParameter>)yyVals[-1+yyTop];
		yyVal = new MemberName ((MemberName) yyVals[-6+yyTop], new MemberName (MemberCache.IndexerNameAlias));
	  }
  break;
case 964:
#line 6533 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var p = (List<DocumentationParameter>)yyVals[0+yyTop] ?? new List<DocumentationParameter> (1);
		p.Add (new DocumentationParameter ((FullNamedExpression) yyVals[-1+yyTop]));
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = Operator.OpType.Explicit;
		yyVal = null;
	  }
  break;
case 965:
#line 6541 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var p = (List<DocumentationParameter>)yyVals[0+yyTop] ?? new List<DocumentationParameter> (1);
		p.Add (new DocumentationParameter ((FullNamedExpression) yyVals[-1+yyTop]));
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = Operator.OpType.Implicit;
		yyVal = null;
	  }
  break;
case 966:
#line 6549 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var p = (List<DocumentationParameter>)yyVals[0+yyTop] ?? new List<DocumentationParameter> (1);
		module.DocumentationBuilder.ParsedParameters = p;
		module.DocumentationBuilder.ParsedOperator = (Operator.OpType) yyVals[-1+yyTop];
		yyVal = null;
	  }
  break;
case 968:
#line 6560 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new MemberName (((MemberName) yyVals[-2+yyTop]), (MemberName) yyVals[0+yyTop]);
	  }
  break;
case 970:
#line 6568 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		valid_param_mod = ParameterModifierType.Ref | ParameterModifierType.Out;
	  }
  break;
case 971:
#line 6572 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = yyVals[-1+yyTop];
	  }
  break;
case 972:
#line 6579 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		yyVal = new List<DocumentationParameter> (0);
	  }
  break;
case 974:
#line 6587 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var parameters = new List<DocumentationParameter> ();
		parameters.Add ((DocumentationParameter) yyVals[0+yyTop]);
		yyVal = parameters;
	  }
  break;
case 975:
#line 6593 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		var parameters = yyVals[-2+yyTop] as List<DocumentationParameter>;
		parameters.Add ((DocumentationParameter) yyVals[0+yyTop]);
		yyVal = parameters;
	  }
  break;
case 976:
#line 6602 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"
  {
		if (yyVals[-1+yyTop] != null)
			yyVal = new DocumentationParameter ((Parameter.Modifier) yyVals[-1+yyTop], (FullNamedExpression) yyVals[0+yyTop]);
		else
			yyVal = new DocumentationParameter ((FullNamedExpression) yyVals[0+yyTop]);
	  }
  break;
#line default
        }
        yyTop -= yyLen[yyN];
        yyState = yyStates[yyTop];
        int yyM = yyLhs[yyN];
        if (yyState == 0 && yyM == 0) {
          if (debug != null) debug.shift(0, yyFinal);
          yyState = yyFinal;
          if (yyToken < 0) {
            yyToken = yyLex.advance() ? yyLex.token() : 0;
            if (debug != null)
               debug.lex(yyState, yyToken,yyname(yyToken), yyLex.value());
          }
          if (yyToken == 0) {
            if (debug != null) debug.accept(yyVal);
            return yyVal;
          }
          goto continue_yyLoop;
        }
        if (((yyN = yyGindex[yyM]) != 0) && ((yyN += yyState) >= 0)
            && (yyN < yyTable.Length) && (yyCheck[yyN] == yyState))
          yyState = yyTable[yyN];
        else
          yyState = yyDgoto[yyM];
        if (debug != null) debug.shift(yyStates[yyTop], yyState);
	 goto continue_yyLoop;
      continue_yyDiscarded: continue;	// implements the named-loop continue: 'continue yyDiscarded'
      }
    continue_yyLoop: continue;		// implements the named-loop continue: 'continue yyLoop'
    }
  }

   static  short [] yyLhs  = {              -1,
    0,    4,    0,    0,    1,    1,    1,    1,    2,    2,
   11,   11,   12,   12,   13,   13,   14,   14,   15,   15,
   16,   21,   22,   19,   20,   20,   20,   24,   24,   25,
   25,   18,    7,    7,    6,    6,   23,   23,    8,    8,
   26,   26,   27,   27,   27,   27,   27,    9,    9,   10,
   10,   35,   33,   38,   34,   34,   36,   36,   36,   36,
   37,   37,   42,   39,   40,   41,   41,   43,   43,   43,
   43,   43,   44,   44,   48,   45,   47,   50,   50,   50,
   51,   51,   52,   52,   53,   53,   53,   53,   53,   53,
   53,   53,   53,   53,   53,   53,   53,   68,   70,   72,
   73,   74,   29,   29,   77,   54,   78,   78,   80,   80,
   81,   81,   82,   82,   83,   83,   85,   85,   87,   56,
   88,   89,   88,   79,   79,   91,   93,   76,   76,   92,
   92,   98,   57,  102,   57,   57,   97,  105,   97,   99,
   99,  106,  106,  107,  108,  107,  103,  103,  109,  109,
  110,  111,  101,  101,  104,  104,  104,  114,   58,  116,
   55,  117,  120,  121,  115,  123,   84,  124,  124,  125,
  126,  122,  127,  128,  112,  129,  130,  131,  112,  112,
  113,  113,  119,  119,  134,  134,  134,  134,  134,  134,
  134,  134,  134,  134,  135,  135,  138,  138,  138,  141,
  138,  139,  139,  142,  142,  143,  143,  143,  136,  136,
  136,  144,  144,  144,  137,  146,  148,  149,   59,  151,
  152,  153,   61,  147,  147,  147,  147,  147,  157,  154,
  158,  155,  156,  156,  156,  159,  160,  161,  163,   30,
   30,  162,  162,   90,   90,  164,  164,  164,  164,  164,
  164,  164,  164,  164,  167,   62,  166,  166,  168,  168,
  171,  165,  165,  170,  170,  170,  170,  170,  170,  170,
  170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
  170,  170,  170,  170,  170,  173,  172,  174,  172,  172,
  172,   63,  177,  179,  175,  176,  176,  178,  178,  183,
  181,  184,  181,  181,  185,   64,  187,   60,  190,  191,
   60,  186,  193,  186,  188,  188,  194,  194,  195,  196,
  195,  197,  192,  189,  189,  189,  189,  189,  201,  198,
  202,  199,  200,  200,  204,  206,  207,   31,  203,  203,
  203,  205,  205,  205,  208,  208,  209,  210,  209,  211,
  212,  213,   32,  214,  214,   17,   17,  215,  215,  218,
  217,  217,  217,  219,  219,  221,   67,  145,  118,  118,
  150,  150,  222,  222,  222,  220,  220,  223,  223,  224,
  224,  226,  226,   96,   75,   75,  100,  100,  140,  140,
  169,  169,   86,   86,   86,   86,   86,  230,  230,  231,
  231,  229,  229,  229,  229,  229,  229,  229,  232,  232,
  232,  232,  232,  232,  232,  232,  232,  233,  234,  234,
  234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
  234,  234,  234,  234,  234,  234,  234,  234,  235,  235,
  235,  236,  236,  236,  256,  256,  257,  257,  258,  258,
  238,  238,  255,  255,  255,  255,  255,  255,  255,  255,
  259,  260,  240,  261,  261,  262,  262,  263,  263,  265,
  265,  265,  266,  266,  266,  266,  266,  267,  267,  182,
  182,  271,  271,  271,  271,  271,  273,  273,  272,  272,
  274,  274,  274,  274,  275,  241,  270,  270,  270,  276,
  276,  277,  277,  242,  243,  243,  244,  245,  246,  246,
  237,  237,  237,  237,  237,  282,  278,  247,  283,  283,
  284,  284,  285,  285,  286,  286,  286,  286,  279,  279,
  227,  227,  281,  281,  287,  287,  280,  280,   95,   95,
  288,  288,  289,  248,  290,  290,  290,  291,  291,  291,
  291,  291,  292,  216,  249,  250,  251,  252,  294,  253,
  295,  253,  293,  293,  297,  296,  239,  298,  298,  298,
  298,  298,  299,  299,  299,  299,  299,  299,  299,  300,
  300,  300,  300,  301,  301,  301,  301,  301,  301,  302,
  302,  302,  303,  303,  303,  303,  303,  304,  304,  304,
  305,  305,  306,  306,  307,  307,  308,  308,  309,  309,
  310,  310,  311,  311,  312,  312,  312,  312,  312,  312,
  312,  312,  312,  312,  312,  313,  313,  314,  314,  314,
  315,  315,  316,  316,  319,  317,  318,  318,  321,  320,
  322,  320,  323,  324,  320,  325,  326,  320,   46,   46,
  268,  268,  268,  268,  254,  254,  254,   94,  328,  329,
  330,  331,  332,   28,   66,   66,   65,   65,  132,  132,
  333,  333,  333,  333,  333,  333,  333,  333,  333,  333,
  333,  333,  333,  333,  333,   69,   69,   71,   71,   71,
  334,  334,  335,  336,  336,  337,  337,  337,  337,  225,
  225,  338,  338,  340,  133,  341,  341,  342,  180,  339,
  339,  343,  343,  344,  344,  344,  344,  348,  348,  349,
  349,  349,  346,  346,  346,  346,  346,  346,  346,  346,
  346,  346,  346,  346,  346,  350,  350,  350,  350,  350,
  350,  350,  350,  350,  350,  350,  350,  350,  364,  364,
  364,  364,  351,  365,  347,  366,  366,  367,  367,  367,
  367,  367,  367,  228,  228,  368,   49,   49,  370,  345,
  373,  345,  369,  369,  369,  371,  371,  377,  377,  376,
  376,  378,  378,  372,  372,  374,  374,  379,  379,  380,
  375,  375,  375,  352,  352,  363,  363,  381,  382,  382,
  353,  353,  383,  383,  386,  384,  385,  385,  387,  387,
  387,  390,  388,  389,  389,  391,  391,  354,  354,  354,
  354,  392,  393,  397,  394,  396,  396,  398,  398,  402,
  401,  401,  399,  399,  400,  400,  404,  403,  403,  395,
  405,  395,  355,  355,  355,  355,  355,  355,  406,  407,
  408,  408,  408,  409,  410,  411,  411,  412,  412,  356,
  356,  356,  356,  413,  413,  415,  415,  414,  416,  414,
  414,  357,  358,  417,  361,  359,  419,  420,  362,  421,
  422,  360,  360,  418,  418,  327,  327,  327,  327,  423,
  423,  425,  425,  427,  426,  428,  426,  424,  424,  424,
  432,  430,  433,  434,  430,  429,  429,  435,  435,  436,
  436,  436,  436,  436,  441,  437,  442,  438,  443,  444,
  445,  439,  447,  448,  449,  439,  446,  446,  451,  440,
  450,  454,  450,  453,  456,  453,  452,  452,  452,  455,
  455,  455,  431,  457,  431,    3,    3,  458,    3,    3,
  459,  459,  269,  269,  264,  264,    5,  460,  460,  460,
  460,  464,  460,  460,  460,  460,  461,  461,  462,  465,
  462,  463,  463,  466,  466,  467,
  };
   static  short [] yyLen = {           2,
    2,    0,    3,    1,    2,    4,    3,    1,    0,    1,
    1,    2,    4,    2,    1,    2,    1,    1,    5,    2,
    3,    0,    0,   11,    1,    3,    1,    0,    1,    0,
    1,    1,    0,    1,    0,    1,    0,    1,    1,    2,
    1,    1,    1,    1,    1,    1,    1,    0,    1,    1,
    2,    0,    3,    0,    6,    3,    1,    1,    1,    1,
    1,    3,    0,    3,    1,    0,    3,    0,    1,    1,
    3,    3,    1,    1,    0,    4,    4,    0,    1,    1,
    0,    1,    1,    2,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    0,    0,    0,
    0,    0,   16,    5,    0,    9,    0,    1,    0,    1,
    1,    2,    0,    1,    1,    2,    2,    0,    0,    8,
    0,    0,    5,    1,    2,    3,    0,    3,    1,    1,
    1,    0,    8,    0,    9,    6,    0,    0,    3,    0,
    1,    1,    2,    2,    0,    5,    0,    1,    1,    2,
    3,    0,    4,    2,    1,    1,    1,    0,    3,    0,
    3,    0,    0,    0,   11,    0,    3,    0,    1,    0,
    0,   10,    0,    0,   10,    0,    0,    0,   12,    8,
    1,    1,    0,    1,    1,    3,    3,    3,    5,    3,
    5,    1,    1,    1,    1,    3,    4,    6,    4,    0,
    7,    0,    1,    1,    2,    1,    1,    1,    4,    6,
    4,    1,    2,    2,    1,    0,    0,    0,   10,    0,
    0,    0,   13,    1,    2,    1,    2,    1,    0,    5,
    0,    5,    1,    1,    1,    0,    0,    0,    0,   15,
    5,    0,    1,    1,    2,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    0,    5,    1,    1,    1,    1,
    0,    7,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    0,    7,    0,    7,    2,
    2,    2,    0,    0,    9,    1,    1,    0,    1,    0,
    6,    0,    6,    1,    0,    8,    0,    9,    0,    0,
   10,    0,    0,    3,    0,    1,    1,    2,    2,    0,
    5,    0,    2,    2,    2,    1,    1,    1,    0,    5,
    0,    5,    1,    1,    0,    0,    0,   12,    0,    2,
    2,    0,    1,    2,    1,    3,    2,    0,    5,    0,
    0,    0,   13,    0,    1,    1,    3,    1,    4,    2,
    0,    3,    2,    1,    3,    0,    3,    1,    1,    3,
    1,    2,    3,    4,    4,    0,    3,    1,    3,    3,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    2,    2,    2,    2,    2,    2,    1,    3,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    2,    2,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    3,    3,    4,    4,    4,    3,    3,    4,    3,    4,
    0,    0,    6,    0,    1,    3,    4,    0,    1,    1,
    3,    2,    3,    1,    2,    3,    2,    1,    1,    0,
    1,    1,    3,    3,    2,    2,    1,    1,    1,    1,
    2,    2,    4,    3,    1,    4,    1,    3,    2,    1,
    3,    1,    1,    1,    4,    3,    2,    2,    6,    3,
    7,    4,    3,    7,    3,    0,    2,    4,    1,    2,
    0,    1,    1,    3,    3,    1,    1,    1,    0,    1,
    1,    2,    2,    3,    1,    2,    0,    1,    2,    4,
    1,    3,    0,    5,    1,    1,    1,    2,    3,    3,
    4,    4,    1,    2,    4,    4,    4,    4,    0,    4,
    0,    5,    0,    1,    0,    4,    4,    1,    2,    2,
    4,    2,    1,    2,    2,    2,    2,    2,    2,    1,
    3,    3,    3,    1,    3,    3,    3,    3,    3,    1,
    3,    3,    1,    3,    3,    3,    3,    1,    3,    3,
    1,    3,    1,    3,    1,    3,    1,    3,    1,    3,
    1,    3,    1,    5,    3,    3,    3,    3,    3,    3,
    3,    3,    3,    3,    3,    1,    3,    3,    2,    1,
    0,    1,    1,    1,    0,    2,    1,    1,    0,    4,
    0,    5,    0,    0,    7,    0,    0,    8,    1,    1,
    1,    1,    1,    1,    6,    4,    4,    1,    1,    0,
    0,    0,    0,   15,    0,    1,    0,    1,    1,    2,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    0,    2,    0,    1,    1,
    1,    2,    4,    1,    3,    1,    3,    1,    1,    0,
    1,    1,    1,    0,    4,    1,    1,    0,    4,    0,
    1,    1,    2,    1,    1,    1,    1,    1,    2,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    0,    4,    1,    2,    2,    2,    2,
    2,    2,    1,    1,    2,    1,    1,    1,    0,    6,
    0,    7,    0,    2,    1,    0,    1,    0,    1,    1,
    2,    2,    4,    0,    2,    0,    1,    1,    2,    4,
    1,    5,    2,    2,    2,    2,    2,    1,    1,    1,
    1,    1,    5,    7,    0,    8,    0,    1,    1,    2,
    1,    0,    3,    1,    2,    3,    1,    1,    1,    1,
    1,    5,    7,    0,    4,    7,    1,    0,    1,    0,
    5,    1,    0,    1,    0,    1,    1,    1,    3,    6,
    0,    9,    1,    1,    1,    1,    1,    1,    2,    2,
    3,    4,    3,    3,    3,    4,    3,    0,    1,    3,
    4,    5,    3,    1,    2,    0,    1,    2,    0,    7,
    3,    2,    2,    0,    3,    5,    0,    0,   10,    0,
    0,   10,    5,    0,    2,    2,    2,    2,    2,    4,
    5,    4,    5,    0,    5,    0,    6,    3,    2,    1,
    0,    3,    0,    0,    6,    0,    1,    1,    2,    1,
    1,    1,    1,    1,    0,    5,    0,    3,    0,    0,
    0,   12,    0,    0,    0,   13,    0,    2,    0,    3,
    1,    0,    4,    1,    0,    4,    1,    2,    2,    1,
    2,    2,    0,    0,    4,    2,    3,    0,    4,    2,
    2,    3,    0,    1,    1,    1,    2,    2,    2,    4,
    3,    0,    7,    4,    4,    3,    1,    3,    0,    0,
    4,    0,    1,    1,    3,    2,
  };
   static  short [] yyDefRed = {            0,
    8,    0,    0,    0,    0,    0,    0,    0,    2,    4,
    0,    0,   11,   14,    0,  946,    0,    0,  950,    0,
    0,   15,   17,   18,  404,  410,  417,  405,  407,    0,
  406,    0,  413,  415,  402,    0,  409,  411,  403,  414,
  416,  412,  366,  967,    0,  408,  957,    0,   10,    1,
    0,    0,    0,   12,    0,  800,    0,    0,    0,    0,
    0,    0,    0,    0,  446,    0,    0,    0,    0,    0,
    0,    0,  444,    0,    0,    0,  504,    0,  445,    0,
  543,    0,  874,    0,    0,    0,  654,    0,    0,    0,
    0,    0,    0,    0,  704,    0,  753,    0,    0,    0,
    0,    0,    0,    0,    0,  443,    0,  643,    0,  799,
    0,  736,    0,    0,    0,  418,    0,  420,  421,    0,
  423,  424,  425,  426,  427,  428,  429,  430,  431,  432,
  433,  434,  435,  436,  437,  438,  441,  442,  650,  573,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  651,  649,  652,  653,  720,  722,    0,  718,
  721,  737,  739,  740,  741,  742,  743,  744,  745,  746,
  747,  748,  738,    0,    0,    0,  801,  802,  818,  819,
  820,  821,  843,  844,  845,  846,  847,  848,    0,    0,
    0,   20,    0,    0,    0,  356,    0,  358,  954,   16,
  947,    0,    0,  269,  268,  265,  270,  271,  264,  283,
  282,  275,  276,  272,  274,  273,  277,  266,  267,  278,
  279,  285,  284,  280,  281,    0,    0,  970,    0,  959,
    0,  958,    3,   52,    0,    0,    0,   42,   39,   41,
   43,   44,   45,   46,   47,   50,   13,    0,    0,    0,
  849,  447,  448,  872,    0,    0,    0,    0,    0,    0,
  422,    0,  850,    0,  565,  559,  564,  752,  798,  723,
  750,  749,  751,  724,  725,  726,  727,  728,  729,  730,
  731,  732,  733,  734,  735,    0,    0,    0,  824,    0,
    0,    0,  768,  767,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  859,    0,  419,    0,    0,    0,
    0,    0,    0,  873,    0,    0,    0,  766,  762,    0,
    0,    0,    0,    0,    0,    0,    0,  385,    0,    0,
    0,    0,    0,    0,    0,  646,    0,  572,    0,    0,
  570,  574,  575,  569,  579,  578,  576,  577,  639,  554,
    0,  440,  439,    0,    0,    0,    0,    0,  754,    0,
  355,    0,  760,  761,    0,  507,  508,    0,    0,  461,
  758,  759,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  949,  719,  769,  757,
    0,  796,  797,  900,  917,    0,    0,    0,  929,  888,
  886,  910,    0,    0,  908,  911,  912,  913,  914,  889,
  887,    0,    0,    0,  360,    0,   21,    0,    0,    0,
  966,    0,  367,    0,    0,    0,  968,    0,    0,   40,
  676,  682,  674,    0,  671,  681,  675,  673,  672,  679,
  677,  678,  684,  680,  683,  685,    0,    0,  669,   51,
  506,    0,  502,  503,    0,    0,  500,    0,  771,    0,
    0,    0,    0,  794,  795,    0,    0,    0,  658,    0,
  853,  851,  659,    0,    0,  528,    0,    0,    0,  519,
    0,  523,  533,  535,    0,  515,    0,    0,    0,    0,
    0,  510,    0,  513,    0,  387,  517,  854,    0,    0,
  855,  863,    0,    0,    0,  864,    0,    0,  875,    0,
    0,  765,    0,  397,  393,  394,    0,    0,  392,  395,
  396,    0,    0,    0,  580,    0,    0,  561,    0,  641,
  717,    0,    0,  712,  714,  715,  716,  451,  452,    0,
  363,  364,    0,  207,  206,  208,    0,    0,    0,    0,
  389,    0,  626,    0,    0,  857,    0,    0,  456,    0,
  459,    0,  457,    0,    0,    0,    0,  615,  616,  617,
  618,  619,  620,  621,  622,  623,  625,  624,  581,  583,
  582,  588,  589,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  612,    0,
    0,  532,    0,    0,    0,    0,    0,    0,    0,  901,
  903,  899,    0,  909,    0,    0,  357,  964,  965,  381,
    0,    0,  378,    0,    0,  204,    0,    0,  974,  960,
  962,   60,   58,   59,    0,    0,   53,    0,    0,   61,
   63,   27,   25,    0,    0,    0,  666,    0,  670,  455,
    0,  505,    0,  556,    0,  567,  194,  215,    0,    0,
  184,    0,    0,    0,  195,  560,    0,  877,  827,    0,
  838,  825,    0,  829,    0,    0,    0,  852,    0,    0,
    0,  518,    0,  534,  536,    0,    0,  474,    0,    0,
  470,    0,    0,  497,    0,  538,  512,    0,    0,    0,
    0,  487,  490,    0,    0,  482,  489,  488,  157,  539,
  155,  156,  541,    0,  555,    0,  868,    0,  861,    0,
  865,  547,    0,    0,    0,  382,    0,  545,    0,    0,
  557,    0,  880,    0,  892,    0,  890,    0,    0,  656,
  657,    0,    0,    0,  706,  707,  705,  713,  634,  640,
  633,    0,    0,  362,  629,    0,    0,    0,  571,  856,
  755,  460,  454,  458,  453,  558,  496,  462,    0,  775,
    0,    0,  918,  894,    0,  919,    0,  915,    0,  930,
    0,    0,    0,    0,  898,   19,  359,  703,  702,    0,
  701,    0,  377,  976,  205,  971,    0,    0,   54,    0,
    0,    0,    0,    0,    0,  384,    0,  660,    0,    0,
   80,   79,    0,  501,    0,    0,    0,    0,    0,  566,
    0,    0,    0,    0,    0,  830,    0,    0,    0,    0,
    0,  876,  525,  524,  477,    0,    0,  955,  956,  466,
  472,    0,  475,    0,  499,    0,    0,  495,  492,  491,
    0,  486,    0,    0,    0,    0,  805,  871,    0,  862,
    0,  553,  548,    0,    0,  544,    0,  883,    0,  822,
  893,  891,    0,  562,    0,  642,  638,  637,  636,  365,
  628,  627,  644,    0,  614,    0,  791,  774,    0,    0,
    0,  780,    0,  896,    0,  923,    0,  938,  939,  932,
  902,  904,  944,  380,  379,  975,    0,    0,   62,   56,
    0,   64,   26,   23,    0,    0,  335,    0,  241,    0,
  104,    0,   77,  785,  130,  131,    0,    0,    0,  788,
  213,  214,    0,    0,    0,    0,  187,  196,  188,  190,
    0,    0,    0,    0,  834,    0,  839,  840,    0,    0,
  476,  478,  479,  473,  467,  471,    0,  530,    0,  498,
  494,    0,  509,  465,  484,  483,  542,  540,    0,  867,
    0,    0,    0,  549,    0,    0,  655,  647,    0,  449,
  450,  463,    0,    0,  770,  781,  895,    0,    0,    0,
  916,    0,    0,    0,  963,    0,    0,    0,   69,   70,
   73,   74,    0,  350,  341,  340,    0,  661,  237,   99,
    0,  772,  789,  199,    0,  211,    0,    0,    0,  823,
  885,    0,    0,    0,    0,  841,  804,  514,  511,  493,
  811,    0,  817,    0,    0,  809,    0,  814,  869,  552,
  551,    0,    0,  645,    0,    0,  897,  920,    0,    0,
    0,  934,    0,  945,    0,   75,   67,    0,    0,    0,
  336,    0,    0,    0,    0,    0,  200,    0,  191,  189,
  878,  831,    0,    0,  836,    0,    0,  806,  810,    0,
  815,    0,  881,  648,    0,  783,    0,  924,  941,  942,
  935,  905,   55,    0,   71,   72,    0,    0,    0,    0,
    0,    0,    0,  790,  198,    0,  210,    0,    0,  842,
  816,    0,  708,  870,    0,  792,    0,    0,    0,   76,
    0,    0,  351,    0,  337,    0,  345,  401,  400,    0,
  398,  690,    0,  662,    0,  691,  238,  100,  201,  879,
  826,    0,  882,  921,    0,  936,    0,    0,    0,    0,
    0,    0,    0,    0,  692,    0,    0,    0,    0,  925,
   29,   24,  352,    0,    0,  346,  399,    0,    0,    0,
  101,  709,    0,    0,    0,    0,  338,  698,    0,  699,
  696,    0,  694,   97,    0,    0,   96,    0,    0,   83,
   85,   86,   87,   88,   89,   90,   91,   92,   93,   94,
   95,  158,  160,    0,    0,  254,  246,  247,  248,  249,
  250,  251,  252,  253,    0,    0,  244,    0,    0,  922,
    0,  353,  349,    0,    0,    0,  162,    0,  663,   84,
    0,    0,  297,  292,  296,    0,  245,  239,    0,  928,
  926,  697,  695,    0,  119,    0,    0,    0,    0,    0,
    0,    0,    0,  305,    0,    0,  255,    0,    0,  263,
    0,  182,  159,  181,  161,    0,  102,    0,  117,    0,
    0,    0,    0,  291,    0,    0,  290,    0,  176,    0,
    0,  371,    0,  369,    0,    0,  216,    0,    0,    0,
    0,    0,  664,  240,    0,    0,    0,    0,    0,  105,
  368,    0,    0,    0,  134,    0,    0,    0,    0,    0,
    0,  173,    0,    0,  220,    0,  372,    0,  258,  257,
  256,    0,  103,  122,    0,  163,    0,  309,    0,  288,
  136,    0,  286,    0,    0,    0,  138,    0,  373,    0,
    0,  217,    0,    0,    0,  370,  261,    0,    0,    0,
    0,  115,  166,    0,  129,  127,    0,    0,  313,    0,
    0,    0,    0,    0,  177,    0,  294,    0,    0,    0,
    0,  142,    0,    0,    0,    0,  374,  375,    0,    0,
  169,    0,  120,  116,    0,    0,    0,    0,    0,    0,
  124,  328,    0,  310,    0,    0,  322,    0,    0,    0,
  317,    0,  154,    0,    0,    0,    0,  149,    0,    0,
  306,    0,  139,    0,  133,  143,  174,  180,  228,    0,
  218,    0,    0,    0,    0,    0,    0,  167,  164,  128,
    0,  106,  125,    0,    0,    0,  324,    0,  325,  314,
    0,    0,  308,  318,  289,    0,    0,  135,  150,  287,
    0,  304,    0,  295,  299,  145,    0,    0,    0,  225,
  227,  221,  262,  123,    0,    0,  126,  329,  331,  311,
    0,    0,  323,  320,  153,  151,  178,    0,    0,    0,
  175,  229,  231,  219,    0,  170,  165,    0,    0,  322,
    0,  300,  302,  146,    0,    0,  222,    0,  333,  334,
  330,  332,  321,  179,    0,    0,  235,  234,  233,  230,
  232,    0,    0,    0,    0,  223,  171,  301,  303,    0,
  172,
  };
  protected static  short [] yyDgoto  = {             7,
    8,   50,    9,   51,   10,   11,   52,  235,  679,  433,
   12,   13,   53,   22,   23,   24,  324,  195,  238,  664,
  824, 1023, 1142, 1519,  821,  239,  240,  241,  242,  243,
  244,  245,  246,  657,  448,  658,  659,  928,  660,  661,
  932,  822, 1018, 1019, 1020,  269,  723, 1114,  111,  833,
 1208, 1209, 1210, 1227, 1212, 1213, 1228, 1229, 1230, 1231,
 1232, 1233, 1234, 1221,  467,  668, 1304,  942, 1121, 1084,
 1154, 1177, 1238, 1315, 1149, 1377, 1347, 1409, 1410,    0,
    0, 1370, 1371, 1372, 1265,  327, 1290, 1345, 1368, 1235,
 1411,  944, 1407,  945,  732, 1276, 1358, 1330, 1390,  517,
 1383, 1352, 1426,  907, 1388, 1391, 1392, 1500, 1427, 1428,
 1424, 1222, 1283, 1251, 1223, 1252, 1266, 1305,  680, 1374,
 1486, 1373, 1405, 1402, 1518, 1540, 1360, 1477, 1327, 1430,
 1511,  468,  270,  681,  682,  683,  684,  685,  644,  569,
 1126,  645,  646,  839, 1307, 1334, 1441, 1395, 1479, 1308,
 1363, 1505, 1532, 1442, 1443, 1530, 1515, 1516,  940, 1083,
 1176, 1236, 1286, 1237, 1277, 1341, 1311, 1278,  328,  226,
 1399, 1280, 1384, 1381, 1224, 1254, 1301, 1474, 1432, 1134,
 1475,  724, 1525, 1526, 1300, 1380, 1349, 1419, 1414, 1378,
 1455, 1460, 1417, 1420, 1421, 1510, 1461, 1415, 1416, 1521,
 1508, 1509,  937, 1027, 1145, 1119, 1170, 1146, 1147, 1184,
 1080, 1168, 1195,  535,  196,  113,  353,  198,  563,  443,
  227, 1319,  642,  643,  810,  826,  410,  534,  306, 1150,
 1151,   46,  115,  116,  307,  118,  119,  120,  121,  122,
  123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
  133,  134,  135,  136,  137,  138,  255, 1002,  586,  904,
  983,  512,  709,  860,  710,  711,  974,  139,  201,  715,
  725,  726,  727,  728,  869,  476,  477,  300,  979,  717,
  411,  302,  499,  500,  501,  502,  505,  734,  313,  749,
  750,  883,  266,  482,  762,  267,  481,  140,  141,  142,
  143,  144,  145,  146,  147,  148,  149,  150,  151,  152,
  153,  154,  572,  573,  574,  770,  771,  899,  772,  155,
  560,  764,  354,  999,  549, 1063,  156,  494,  938, 1082,
 1174, 1281,  469, 1155, 1156, 1202, 1203,  811,  552,  339,
  767, 1162,  553,  554,  271,  272,  273,  159,  160,  161,
  274,  275,  276,  277,  278,  279,  280,  281,  282,  283,
  284,  285,  173,  286,  578,  174,  175,  320,  792,  621,
  910,  836,  675,  948,  908,  911, 1043,  912,  949,  950,
  287,  176,  177,  178, 1054,  989, 1055, 1056, 1057, 1100,
 1058,  179,  180,  181,  182,  692,  487,  693,  966, 1093,
  694,  964,  695, 1095, 1096,  183,  184,  185,  186,  187,
  188,  308,  525,  526,  991, 1102,  316,  963,  845, 1128,
  889, 1135,  189,  421,  190,  422,  913, 1008,  423,  633,
  805,  802,  803, 1013,  424,  425,  426,  427,  428,  429,
  917,  623,  915, 1107, 1179, 1240, 1010, 1138, 1194,  800,
  629,  801, 1071, 1012, 1072, 1139, 1014,   17,   19,   47,
   48,  230,  647,  818,  444,  648,  649,
  };
  protected static  short [] yySindex = {         -147,
    0, -190,  -61, -282,   18,12293,    0,  204,    0,    0,
   18, -282,    0,    0,  -47,    0, 7068,   18,    0, -188,
 -247,    0,    0,    0,    0,    0,    0,    0,    0,  377,
    0,  400,    0,    0,    0, 9077,    0,    0,    0,    0,
    0,    0,    0,    0,  285,    0,    0,  595,    0,    0,
  204,  396,   18,    0,  370,    0,  198,  397,  251,11719,
  428, -245,  449, 7229,    0, -245, -245, -245, -158, -245,
 -245,  643,    0,10790, -245, -245,    0,10790,    0,  467,
    0,  251,    0, -245,  461, -245,    0, 8051, 8051,  504,
 -245, -245, -128,11490,    0,10790,    0,11490,11490,11490,
11490,11490,11490,11490,11490,    0,  173,    0, 8818,    0,
  194,    0,  465,  416,  363,    0,  -55,    0,    0,  538,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1859,  650,   50,  156,  503,  228,  517,  542,  555,  523,
  339,  562,    0,    0,    0,    0,    0,    0, 3667,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -260,  576, -261,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, -179, -161,
  396,    0,  403,  600,  609,    0,  581,    0,    0,    0,
    0, 8818, 8818,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  623,  589,    0,  591,    0,
 -234,    0,    0,    0,  396,13186,  396,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  763,  624,10930,
    0,    0,    0,    0,10790, -245, -245,  755,  195,  363,
    0, -260,    0, 8818,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  714,  124,11719,    0, 8818,
10790,  689,    0,    0,  730,10790,10790, 9123,  103,  -37,
  695, 8979,11490,  173,    0,  719,    0,  739, 8818,10790,
  751,  367, -245,    0,10790,  467,10230,    0,    0,  461,
10790,  461, -242,  472,  842, -260,  576,    0,  -55,  851,
 -260,10790,10790,10790,  449,    0,  812,    0, 7390,  112,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1449,    0,    0,12209, -242,  781,  787,10790,    0,  754,
    0,  299,    0,    0,  404,    0,    0,  752,10930,    0,
    0,    0,11490,10790,10790,10790,10790,10790,10790,10790,
10790,10790,10790,10790,11490,11490,11490, 8818, 8818,11490,
11490,11490,11490,11490,11490,11490,11490,11490,11490,11490,
11490,11490,11490,11490,11490,10790,    0,    0,    0,    0,
  576,    0,    0,    0,    0, 8051, 8051, -260,    0,    0,
    0,    0, -212,  585,    0,    0,    0,    0,    0,    0,
    0,  396,  396,  753,    0,  756,    0,  754,  623,  623,
    0,  -85,    0,  553,  623,  796,    0, -198,13186,    0,
    0,    0,    0, -182,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  242,13218,    0,    0,
    0,  754,    0,    0,  797,  498,    0,  804,    0,  805,
 -175,  467, -245,    0,    0, -260, 8337,   19,    0,  803,
    0,    0,    0,  808,  813,    0,  414,    0,  820,    0,
  815,    0,    0,    0,  556,    0, 8477,  610,10790,  695,
 9950,    0, 7873,    0,  461,    0,    0,    0,  822,  824,
    0,    0,  251,  467,  111,    0, 4574,  829,    0,  831,
 -260,    0,  832,    0,    0,    0,10790,  915,    0,    0,
    0,10790,  916,  835,    0,  838,  839,    0,12209,    0,
    0, -272, 7390,    0,    0,    0,    0,    0,    0,  467,
    0,    0, -264,    0,    0,    0,  461, -242, -260,12449,
    0,  841,    0,  840,11490,    0,  837, 7390,    0,  -64,
    0,  274,    0,  754,  616, 9950,  650,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  650,  650,   50,   50,  156,  156,  156,
  156,  503,  503,  228,  517,  542,  555,  523,    0,  843,
 -173,    0,10790,  926, -260,  927, -260,  844,10790,    0,
    0,    0,  869,    0,  300,  754,    0,    0,    0,    0,
  230,  166,    0,12449,  553,    0,  850,  849,    0,    0,
    0,    0,    0,    0, -242,  600,    0,  852,  855,    0,
    0,    0,    0,  853,12473,  806,    0,  362,    0,    0,
  439,    0,10930,    0,  856,    0,    0,    0,  410,  858,
    0,  859,  862,  864,    0,    0,10790,    0,    0, -260,
    0,    0,  865,    0,  866,10790,  942,    0, 7229, 7229,
 8640,    0, 9123,    0,    0,10370,  314,    0, -252, -127,
    0,  814,  819,    0,   29,    0,    0,10790,10790,  873,
  993,    0,    0,  874,  877,    0,    0,    0,    0,    0,
    0,    0,    0,  886,    0,  895,    0, 4737,    0,  467,
    0,    0,  461,  511,  845,    0,  -48,    0,  896,  897,
    0, 7229,    0, 7229,    0,10790,    0,10790, 8818,    0,
    0,  467,  911,  467,    0,    0,    0,    0,    0,    0,
    0, 8801, 8818,    0,    0, -260,12209,  945,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,10790,    0,
 8034,  912,    0,    0,  995,    0,  997,    0,  540,    0,
  914,10790,10790, -260,    0,    0,    0,    0,    0,  875,
    0,  -85,    0,    0,    0,    0,  553,  553,    0,  753,
  921,  924,  878,  925,  806,    0,  923,    0, 1050, 1054,
    0,    0,10790,    0,10510,  933,  410,12449, 8818,    0,
    8, 1056, 1057,  939,  932,    0,10790,10790,  943,10790,
 1038,    0,    0,    0,    0,   64,10650,    0,    0,    0,
    0, 8174,    0, 1064,    0,  576,10790,    0,    0,    0,
 9810,    0,  950,10090, 8640,  952,    0,    0, -260,    0,
   48,    0,    0,  754,  845,    0, -260,    0,  932,    0,
    0,    0,  946,    0,  982,    0,    0,    0,    0,    0,
    0,    0,    0,  164,    0, 8979,    0,    0, -260,  947,
  912,    0,10790,    0,10790,    0,10790,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  954,  753,    0,    0,
11070,    0,    0,    0,  951, 4900,    0,  806,    0,  806,
    0,  806,    0,    0,    0,    0, -260,  955,  933,    0,
    0,    0, -169, -167,  953,  958,    0,    0,    0,    0,
  960, 8640,  912, -173,    0,  965,    0,    0,  962, 7229,
    0,    0,    0,    0,    0,    0,  972,    0,  695,    0,
    0,  646,    0,    0,    0,    0,    0,    0, -196,    0,
  974,  754,  845,    0,  845,  912,    0,    0,  467,    0,
    0,    0,  928,  963,    0,    0,    0,10790, 1004,10790,
    0,10790, 1001,  249,    0,  855,  335,  669,    0,    0,
    0,    0, -282,    0,    0,    0,  985,    0,    0,    0,
  973,    0,    0,    0, -228,    0,  976, 1101, 1107,    0,
    0,  912,  988,  912,10790,    0,    0,    0,    0,    0,
    0,10790,    0,  994, -170,    0, -170,    0,    0,    0,
    0,  991,  467,    0,10790, 8034,    0,    0, 1022,  774,
  998,    0,10790,    0, 1005,    0,    0,11070,   18, -175,
    0,  999,  999,  999,10510, 1008,    0,10790,    0,    0,
    0,    0,  996,  866,    0, 7229, 1006,    0,    0, 7390,
    0, 1012,    0,    0, 1010,    0,10790,    0,    0,    0,
    0,    0,    0,10790,    0,    0,  396, 1011,  396, 7890,
 -124, -124, -124,    0,    0,10790,    0, 7229, 7229,    0,
    0, 7390,    0,    0, 7229,    0, 1040,10790,10790,    0,
  396, 1014,    0,  967,    0, 1013,    0,    0,    0, 1015,
    0,    0,  975,    0, 1059,    0,    0,    0,    0,    0,
    0, 7390,    0,    0, 1047,    0, 1016, -124,    0, 1027,
  396, 7890, 1024, 1035,    0, 1037, 1039, 1041,10790,    0,
    0,    0,    0, 1026, 1016,    0,    0,11566,   91,  396,
    0,    0, 1053,10790, 1034,10790,    0,    0, 1042,    0,
    0, 1043,    0,    0,  990,13118,    0, 1052,   91,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  281,13218,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  396, 1055,    0,   91, -260,    0,
 1053,    0,    0, 1058,11566, 1060,    0,11956,    0,    0,
  395,  395,    0,    0,    0,12024,    0,    0, 1063,    0,
    0,    0,    0,12523,    0,12473, 8818, 8818, -115, 8979,
   90,  461, 1082,    0, -242, 1204,    0, 1121,    0,    0,
 1016,    0,    0,    0,    0, 1016,    0,  461,    0, 1065,
 1018, 1019, 1018,    0, 8818, -159,    0, 8818,    0, 1020,
 1062,    0, -242,    0, 1072,  690,    0, 1077, 1031, -223,
  457, 9077,    0,    0, 1016, 1090, -242, 1083, 1045,    0,
    0, 1088, 1085, 1089,    0, 1087, 1018, 1097, -175, 1078,
 1104,    0, 1103, 1111,    0,  754,    0,  383,    0,    0,
    0, 1109,    0,    0,  396,    0, -149,    0, 1102,    0,
    0, 1117,    0, 1116, 1098, 1118,    0, 1114,    0, -175,
 -175,    0, -175, 1122, 1123,    0,    0, 1126, 1131, 1132,
  396,    0,    0, -175,    0,    0, 1129,  -72,    0, 1139,
 -175, 1249, 1140, -175,    0,  395,    0, 8640, 1100, 1130,
 1114,    0, 1143, 1144,   77, 1149,    0,    0, -175,  396,
    0,12473,    0,    0,  395, 1148,10510, 1105, 1146, 1129,
    0,    0,13218,    0,  396,  396,    0, 1106, 1150, 1139,
    0, 1157,    0,10790, 1112, 1155, 1140,    0, 1160, -175,
    0, -152,    0, 1153,    0,    0,    0,    0,    0,13218,
    0,   77,   77, 1168, 1165,  762, 1018,    0,    0,    0,
 -149,    0,    0,   68, 1174,13218,    0,13218,    0,    0,
 8640, 1162,    0,    0,    0, 1176, 1117,    0,    0,    0,
 1175,    0, -125,    0,    0,    0, -124,  773, 1180,    0,
    0,    0,    0,    0, 1181, -124,    0,    0,    0,    0,
 1243, 1296,    0,    0,    0,    0,    0, 1186, 1188, 8640,
    0,    0,    0,    0,   77,    0,    0,  484,  484,    0,
 -124,    0,    0,    0, -143, -143,    0, -175,    0,    0,
    0,    0,    0,    0, 9950, 9950,    0,    0,    0,    0,
    0, 1193, 1196, 1197, 1198,    0,    0,    0,    0, -124,
    0,
  };
  protected static  short [] yyRindex = {         3239,
    0,    0, 7551, 3239,    0,    0,    0, 1569,    0,    0,
 3349, 3171,    0,    0,    0,    0,    0, 3349,    0,    0,
   39,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1575,    0,    0, 1575,    0,    0,
 1569, 3392, 1553,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1205,    0,    0,    0,    0,    0,    0,    0,
    0,12547,    0, 1199,    0,    0,    0, 1199,    0,    0,
    0,    0,    0,    0,  189,    0,    0,    0,    0,    0,
    0,    0,    0,  213,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 4962,    0,    0,    0,
    0,    0,    0,  207, 4899,    0, 4313,    0,    0, 4736,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 5059, 5131, 5491, 5765, 6183, 6428, 6572, 6716, 6860, 4024,
  293,  929,    0,    0,    0,    0,    0,    0,   39,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  109,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  802,  802,
 3459,    0,  578, 1201,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1575,  239,    0,    0,    0,
    0,    0,    0,    0, 3502,  447, 3545,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 3758,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1206,    0,    0,
    0,    0,    0, 3758,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 2332,
    0, 2911,  136, 2482,    0,    0, 2632,    0, 2482,    0,
    0,    0,    0,    0, 1205,    0,    0,    0,  -96,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1207, 2761,    0,    0, 1199,    0, 3758,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1695,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   56,    0,    0,    0,    0,    0,    0,
    0, 3588, 1323,    0,    0,    0,    0, 2182, 1575, 1575,
    0, -154,    0, 8354, 1575, 1577,    0,    0,  225,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  394,11643,    0,    0,
    0, 3758,    0,    0,    0,    0,    0,    0,    0,    0,
12064,    0,    0,    0,    0,    0, 1202,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1302, 1379,    0,    0,
 1213,    0,    0,    0,    0,    0,  -21,    0,    0, 4247,
 1211,    0,    0,    0,  588,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1867,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1207,    0,
    0,    0,   14,    0,    0,    0,    0,    0,    0, 8962,
    0,    0,    0,    0,    0,    0, -160,  563,    0,    0,
    0, 1215,    0,    0,    0,    0,    0,    0,    0, 3758,
    0, 3758,    0, 4410,    0,  167, 5239,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 5311, 5419, 5592, 5664, 5837, 5938, 6010,
 6111, 6284, 6356, 6500, 6644, 6788, 6932, 4187,    0,    0,
  673,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 2869,    0,    0, 2182,    0,    0,    0,    0,
 1167,    0,    0,    0,12597,    0,    0,  683,    0,    0,
    0,    0,    0,    0,  724,  534,    0,    0, 1220,    0,
    0,    0,    0, 1221,    0,    0,    0,    0,    0,    0,
11210,    0,    0,    0,  685,    0,    0,    0,12621,    0,
    0,  698,  701,  710,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1217,    0,    0,    0,    0,    0,
    0,    0, 1227,    0,    0,    0, 3824,    0,    0,   20,
    0,   67, 3921,    0,    0,    0,    0,    0,    0, -183,
    0,    0,    0,    0,  175,    0,    0,    0,    0,    0,
    0,    0,    0, 1229,    0,    0,    0,    0,    0,    0,
    0,    0, -271,  606,    0,    0,    0,    0,    0, 1232,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 8962,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1233,    0,    0,    0,    0,    0,    0,  521,    0,
 1099,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, -154,    0,    0,    0,    0,12621, 8657,    0, 1235,
    0,  631,    0,    0,    0,    0, 1241,    0, 1225, 1228,
    0,    0,    0,    0,    0, 1248,12671,    0,    0,    0,
12177,    0,    0,    0,  711,    0, 1257,    0,    0,    0,
 2038,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 4084,    0,    0,    0,    0,
    0,    0, 4573,  161, 1270,    0,    0,    0, 1239,    0,
    0,    0,    0,  278,    0,    0,    0,    0,  711,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1269,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  715,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1275,    0,
    0,    0,    0,    0,  718,  732,    0,    0,    0,    0,
    0,    0,  840,  673,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 4247,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1286,    0,
    0,  278,    0,    0,  777,  840,    0,    0, 8962,    0,
    0,    0,  196,  537,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  102,    0, 1220, 9114,    0,    0,    0,
    0,    0,12737,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  653,    0,  684,    0,    0,    0,
    0, 1245,    0, 1233, 1287,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1290,    0, 7712,    0,    0,    0,
    0,    0, 8962,    0,    0,    0,    0,    0,    0, 1079,
 1127,    0,    0,    0,    0,    0,    0,    0,12780,12064,
    0,  129,  129,  129,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1288,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,12889,    0,   22,    0,
 1297, 1297, 1297,    0,    0,    0,    0,    0,    0,    0,
    0, -195,    0,    0,    0,    0,    0,    0,    0,    0,
12932,    0,    0,    0,    0, 1295,    0,    0,    0,  179,
    0,    0,    0,    0,  506,    0,    0,    0,    0,    0,
    0, 1298,    0,    0,    0,    0, 3306, 1289,  422,    0,
  193,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 3073,    0,    0,    0, 9281, 9487,
    0,    0, 1218,    0,    0,    0,    0,    0,    0,    0,
    0,  320,    0,    0,    0,11820,    0,    0, 9384,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,11888,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 9569,    0,    0, 9281,    0,    0,
 1218,    0,    0,    0,    0, 1300,    0,  394,    0,    0,
    0,    0,    0,    0,    0,  394,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1596,  402,    0, 9693,    0,    0,    0, 9731,    0,
 3073,    0,    0,    0,    0, 3073,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  442,    0, 1301,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 3073,12253,  598,    0,    0,    0,
    0,  582,    0,    0,    0,    0,    0,    0,12064,  735,
    0,    0,    0,    0,    0, 1299,    0,  659,    0,    0,
    0,    0,    0,    0,12363,    0,    0,    0,  738,    0,
    0,    0,    0,    0,    0,    0,    0, 1293,    0,12064,
12064,    0,12104,    0,    0,    0,    0,    0,12695,    0,
12374,    0,    0,12064,    0,    0, 1303,13156,    0, 1304,
12064,11350, 1307,12064,    0,    0,    0,    0,    0,    0,
 1308,    0,    0,    0,13080,    0,    0,    0,12064, 9651,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1313,
    0,    0,  244,    0, 1032,13050,    0,    0,    0, 1314,
    0,    0,    0,    0,    0,    0, 1316,    0,    0,12064,
    0,  522,    0,  746,    0,    0,    0,    0,    0,  792,
    0,12974,13012,    0,    0, 9651,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1360,    0, 1415,    0,    0,
    0,  747,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  526,    0,    0,    0,
    0,    0,    0,    0,    0,  526,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,13080,    0,    0, 6282,12822,    0,
  526,    0,    0,    0,    0,    0,    0,12064,    0,    0,
    0,    0,    0,    0, 1211, 1211,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  526,
    0,
  };
  protected static  short [] yyGindex = {            0,
    0, 1630,    0,    0,    0,   -3,   -6, -185,  -41, 1645,
    0, 1688, 1696,  507,    0,    0,   -5,    0,    0,    0,
    0,    0,    0,-1073, -698, -225,-1127,    0,    0,    0,
    0,    0, -181,    0,    0,    0,  775,    0,  882,    0,
    0,    0,    0,  628,  629,  -17, -236,    0,  -40,    0,
  470,    0,  500, -610,    0,    0, -526, -501, -496, -455,
 -441, -428, -427,    0,-1126,    0,   10,    0,   80,    0,
-1037,    0,    0,    0,  -44,  259,    0,    0,    0,    0,
    0,    0,    0,  340,    0, -299,    0,    0,    0,  312,
  303,-1038,    0, -274, -293, -645,    0,    0,    0, -871,
  248,    0,    0, -504,    0,    0,  326,    0,    0,  294,
    0,    0,-1007,    0,    0,    0,    0,-1104, -898,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  444,  -13,    0,    0,  881,  884,  889, 1044, -529,
    0,    0, -320,  890,  438,    0, -909,    0,    0,    0,
    0,    0,    0,    0,    0,  216,    0,    0,    0,    0,
    0,    0,    0,-1176,    0,    0,    0,    0, -323,  423,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  510,
    0, -579,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  226,    0,    0,  318,    0,    0,  324,  328,  232,
    0,    0,    0,    0,    0,    0,    0,    0,  575,    0,
    0,    0,    0,  -62,    0,  494, -180,    0,    0,  409,
    0,  476,    0,  936,    0, 1236, -257,  -63,  716,    0,
  583,    0,  -39,    0,   11,    0,    0, 1158,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, -265,    0, 1120,    0,    0,    0,
    0, -517,    0,    0,    0,  904,    0, -306, -135, 1066,
  888,    0,  894,    0, 1069, 1400, 1108,    0,    0,  794,
 1702,    0,    0,    0,    0, 1074,    0,    0,    0,    0,
    0, -515, 1443,    0,    0,    0,    0,    0,   23,  490,
  778,  686,  767, 1382, 1383, 1388, 1390, 1387,    0, 1389,
    0,    0,    0, 1021, 1247, -724,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, -294,    0,    0,
    0,    0, -450,    0,  642,    0,  554,    0,  639,    0,
    0,    0,  702, -528,  -15, -309,  -12,    0, 1646,    0,
   47,    0,   84,   89,  118,  119,  131,  138,  146,  147,
  151,  152,    0, -662,    0,  -28,    0,    0,  847,    0,
  760,    0,    0,    0,  741, -249,  817, -833,    0,  860,
 -464,    0,    0,    0,    0,    0,    0,  764,    0,    0,
  758,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  772,    0,    0,    0,    0,    0,    0,    0,
    0,  -36,    0, 1283,    0,    0,    0,  931,    0,    0,
    0,    0,    0, -171,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1394,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  586,    0,    0,    0,    0,
    0,    0,    0,    0,  687,    0,    0,    0,    0,    0,
    0,   45, 1017,    0,    0,    0, 1007,
  };
  protected static  short [] yyTable = {           110,
   18,  157,  516,  112,  158,  432,  788,  514,  733,  450,
  236,  191,  435,  474,  194,   44,  490,  669,  431,  825,
  260,  319,  691,  407,  768,  544,  533,  117,  295,  556,
  571,  262,  498,  570, 1003,  876,  851,  852,  953,  896,
  776,  311,  510,  326,  331,  254, 1124,  325,  330,  781,
  364,  363,  337,  372,  371,  470,  305,  652, 1257, 1051,
  305, 1207, 1226,  162,  356,   14,  312,  192,  314,  539,
  117, 1052,  813,  662,  117,    2,  414, 1006,  340, 1248,
  677, 1207,  790,  653, 1157, 1158, 1034,   20, 1036,  888,
  446,  890,  232, 1182,  414,  390, 1324, 1052, 1256,  765,
  163, 1337,  293, 1472,  383,  164, 1375, 1226,    1,  291,
 1207, 1197, 1527,  773,  814,  654,  338,  292,  412,  858,
  341,  342,  343,  344,  345,  346,  347,  348,  861,  252,
 1183, 1152,  474,  409,  165,  166,  630,  631, 1498,   48,
 1294,  110,  435,  157, 1086,  112,  158,  167,  335,  236,
  383,   48,  350,  622,  168,  774, 1087,  439,  440,  415,
  766,  294,  169,  170,  416,  678,  417,  171,  172,  117,
  640,  413,  418,  419,  435,  351,  813,  415,  253,  579,
  859, 1118,  416, 1412,  417,  199, 1318,   43, 1321, 1295,
  418,  419,  654,  449,  654,   16,  853,  234, 1338, 1499,
  712, 1333,  390,  746,  293,  162,  450, 1313, 1006,  475,
    2,  791, 1314,  390, 1153,  390,  716,  390,  506,  480,
  632,  479, 1354,  655,    6,  571, 1473,   95,  570, 1053,
  813,   15,  473,  193,  293, 1376, 1528,  478,  376,  663,
  447, 1343,  163,  556, 1285,  488,  571,  164,  260,  654,
  862,  470, 1035,  420, 1037, 1053,  532,  637,  260,  486,
  536,  390, 1325,  294,  519,  541,  540,   48,  556, 1257,
  441,  430, 1226,  489, 1064,  710,  165,  166,  493,  495,
    3,    4,    5,    6,  865,  538, 1454,  234,  531,  167,
  543,  670,  520,  294,  336,  953,  168,  528,  117,  530,
  234,  361,  529,  493,  169,  170,  562, 1047,  953,  171,
  172,  388,  696, 1478,  293,  546,  547, 1075, 1226,  865,
  571,  577,  953,  555,  815,  338,  557,  117,  475, 1491,
 1488, 1492, 1439,  507,  318,  508,  710,  252, 1104,  973,
  305,  746, 1485,  602,  603, 1297, 1204,  389,  955,  117,
  468,  473,   20,  351,  545,  984,  588,  589,  590,  591,
  592,  593,  594,  595,  596,  597,  598,  782, 1450,  994,
  987,  625,  627,  884,   55,  624,  626,  628, 1431,  523,
  234,  293, 1489,  967,  686,  711,  253,  435,  620,  509,
  236,  469,  844,  342, 1298,  545,  740, 1448, 1296,  783,
  641,  785,  866,  786,  907,  907,  867,  599,  600,  601,
  293,  468,  545,  545,  545,  545,  545,  545,  545,  545,
  545,  545,  545,  545,  545,  545,  545,  545,  635,  767,
 1356,  390,  391, 1130,  687,  971,  474,  498,  953, 1501,
  294,  867,  656,   48,  953,  688,  711,  697, 1507,  234,
  906,  906,  469,  571, 1205,  807,  570, 1041,  690,  357,
   49, 1393, 1394,  234, 1396, 1160, 1161,  686,  686,  992,
  475,  756, 1163, 1524,  435, 1406,  503, 1060,  768, 1061,
  504,    6, 1422,  638,  639, 1429,  745,  558,  907,  650,
  753,  714,  361,  722,  376,  731,  667,  117,  361,  686,
 1445,  667, 1541,  484,  414,  667,  667,  358,  361,  737,
  739,  361,  361,  197,  571,  349,  951,  687,  665,  755,
  667,  744,  666,  808,  757,  361,  768,  200,  775,  545,
  756, 1471, 1480, 1481,  906,  809,  485,  555,  485, 1000,
  557,  946,  480,  812,  559,  475,  769,  667,  611,  687,
  481,  763,  965,  392,  393,  712,  485,  361,  667,  200,
  767,  763,  555,  117,  344,  557,  667,  350,  722,  354,
  248,  793,  359,  793,  249,  793,  863,  376, 1211,  354,
  691,  197,  197,  667,  795,  813,  797,  415,  117,  350,
  351,  768,  416,  485,  417, 1517, 1001,  779, 1211,  480,
  418,  419,  197,  768,  352,  793,  516,  481,  978,  376,
  763,  799,  351,  376,   48,  376,  376,  376,  376, 1533,
 1291,   95,  522,  376,  250,  252,  352, 1211,  354,  398,
  399,  611,  475,  828,  361,  523,  611,  985,  611,  611,
  611,  611,  611,  611,  611,  611,  611,  611,  611,  846,
  361, 1133,  524,  361,  361,  473,  349,  829,  693,  228,
 1253,  229, 1214,  260,  611,  665,  611,  361,  611,  493,
  611,  611,  611,  666,  253,  827,  436,  349,  849,  806,
  536,  202, 1214,  731,  830,  716,  611, 1215,  714,  665,
  693,  351, 1216,  879, 1022,  197,  197,  666,  857,  693,
  868,  868,  767,  637,  203,  784,  885, 1215,  350,  117,
  117, 1214, 1216, 1042,  893,  564,  665,  837,  667, 1076,
  580,   45,  565,  667,  666,  611,  880,  667,  900,  350,
  581,  351,  114, 1217,  566,  901, 1215,  252,  891,  365,
  892, 1216,  667,  404,  831,  352, 1042, 1218,  894,  247,
  769,  832,  351, 1217,  898,  405, 1447,  197,  366,  367,
 1219, 1220,  117,  923,  117,   95,  352, 1218,  234,  667,
  641,  905,  361,  731, 1282,  114,  251, 1097,  368,  114,
 1219, 1220, 1217,  197,  921,  922,  253,  434,  667,  369,
  556,  946,  362,  347,  954,  197, 1218,  350,  701,  347,
  351,  442,  197,  329,  329,  318,  348,  263,  350, 1219,
 1220,  807,  366, 1127,  656,  943,  366,  489,  361,  132,
  351,  132,  556,  265,  329,  582,  132,   95,  361,  493,
  475,  351,  969,  475,  935,  583, 1339,   95,  990,  972,
  993, 1022, 1074,  388,  197,  352,  995,  197,  436,  980,
  318, 1159,  556,  722,   95,  669,  722,  731,  564,  937,
  366,  318,  587, 1181,  937,  565,  937,  361, 1004,  937,
  937,  672,  937,  937,  114,  673,  689,  566,  332,  604,
  605,  197,  197, 1433,  545,  689,  360,  881,  394,  395,
  475, 1026,  298,  918,  919, 1007,  688, 1009,  937, 1011,
  318,  298,  396,  397,  400,  688, 1031,   65,   65,  197,
  197,   65,  782, 1021,  782,  450,  782,  329,  329,  361,
  373, 1243,  656,  415, 1279,  361,  403,  197,  416,  704,
  417, 1141, 1279,  705,  401,  361,  418,  419,  630,  361,
  630,  197,  746,  402,  731, 1534, 1535, 1028,  299, 1029,
  451, 1030,  361,  937,  361,  406, 1493,  361,  388,  307,
  388,  307,  388,  388, 1289,  388,  307,  388,  366,  228,
  516,  231,  366,  452,  361,  366,  436,  366,  354,  329,
  117,  354,  366,  713,  361,  769,  453,  504,  437,  787,
 1067,  455, 1069,  673, 1070, 1514,  456,  228,  457,  458,
  459,  460,  438,  114,   66,  329,  461,  442,   66,  388,
  462,  388,  445,  298,  388,  299,  366,  329,  471, 1079,
  747, 1050,  463,  874,  329,  464,  197,  465,  197,  376,
  197,  335,  114,  376,  489,  361,  376,  475,  376,  385,
  386,  387,  197,  376, 1077,  472, 1078, 1105,  731,  769,
  773,  466,  773,  483,  114, 1112,  973,  209,  973,  209,
 1021,  209,  784,  197,  784,  513,  329,  489,  491,  329,
  489,  185, 1117,  185,  192,  236,  192, 1144,  746,  608,
  609,  610,  611,  193,  555,  193,  884,  557,  884, 1137,
   68,  215,   68,  215,  435,  362, 1140,  361,  361,  236,
  361,  361,   57,  329,  329,  186,  117,  186,  489,  492,
  117, 1317,  137,  946,  137,  312,  555,  312,  518,  557,
 1165, 1070, 1331,  144,  319,  144,  319, 1109, 1110, 1144,
  521,  329,  329, 1484,  234,  537, 1331,  197,  117,  117,
 1502, 1503,  117, 1201,  542,  117,  555, 1206, 1225,  557,
  906,  906,  550,  550,  550, 1364,  575, 1365,  197,  667,
  667, 1193, 1122, 1123,  612,  613,  576, 1206,  651,  606,
  607,  351,  117,  584,  355,  671, 1241,  636,  489,  674,
  676,  264,  698,  699,  613,  288,  289,  290,  700,  296,
  297,  702,  703, 1225,  309,  310, 1206,  735, 1260,  736,
 1201,  315,  114,  317,  751,  321,  752,  754,  756,  758,
  333,  334,  759,  760,  761,  778,  780,  261,  777,  794,
  796,  789, 1292, 1293,  804,  816,  817,   43,  798,  823,
  819,  197,  820,  840,  370,  850,  841, 1284, 1284,  842,
  835,  843,  329,  848,  847,  864,  199,  871,  872,  873,
 1323,  261,  197, 1326,  874,  261,  261,  261,  261,  261,
  261,  261,  261,  875,  329,  877,  197,  613,  114,  882,
  197,  886,  613,  887,  613,  613,  613,  613,  613,  613,
  613,  613,  613,  613,  613,  329,  895,  903,  914,  909,
  916,  920,   48,  114,  930,  934,  924, 1340,  931,  933,
  613,  936,  613, 1369,  613,  939,  613,  613,  613,  941,
  947,  959,  960,  197,  961,   48,  962,  970,  968,  977,
  507,  997,   49,  988,  998, 1024, 1005, 1015,   48, 1369,
 1038,  197,  197,   48, 1032, 1039, 1413, 1046,   48, 1040,
   48,   48,   48,   48, 1045, 1048,   48, 1066,   48, 1059,
 1068, 1073,   48, 1440, 1065, 1081, 1089, 1085, 1225,  329,
 1088,  613, 1090, 1091,   48, 1098, 1103,   48, 1108,   48,
  731, 1129, 1284, 1456, 1458, 1111,  315, 1120, 1113,  370,
  329, 1125, 1133, 1136, 1131, 1167, 1143, 1164, 1169,  489,
 1171, 1284, 1172,   48, 1180, 1181, 1173, 1153, 1185,  197,
 1440, 1440, 1188,  326, 1225, 1189, 1466, 1190, 1239, 1191,
 1196, 1246, 1192, 1242,  114,  114, 1244,  940, 1299,  511,
 1245,  197,  940, 1249,  940, 1312, 1258,  940,  940,  197,
  940,  940,  527, 1262, 1287, 1316, 1329,  931, 1264, 1317,
 1320, 1328,  931,  731,  931,  261, 1332,  931,  931, 1335,
  931,  931, 1336,  329, 1344,  261,  940, 1346, 1348, 1350,
  261, 1353, 1357, 1440,  451,  933, 1338,  114, 1351,  114,
  933, 1355,  933, 1386,  329,  933,  933, 1361,  933,  933,
 1359, 1362,  731, 1367,  475,  475, 1379,  452,  329, 1382,
 1385, 1389,  329, 1387, 1520, 1520, 1400, 1401, 1397, 1398,
  453, 1529, 1529, 1403, 1423,  455, 1408,  722,  722, 1435,
  456,  940,  457,  458,  459,  460, 1418, 1425, 1437, 1438,
  461, 1434, 1444, 1449,  462, 1452, 1451, 1462, 1302, 1463,
  261,  931, 1465, 1467, 1468, 1470,  463, 1476, 1482,  464,
 1483,  465,  261,  261,  261, 1490, 1494,  261,  261, 1495,
 1497, 1504,   34,  329,  329, 1506,  927, 1489, 1488,  933,
 1512,  927, 1513,  927, 1536,  466,  927,  927,    9,  927,
  927, 1537, 1538, 1539,  969,  563,  961,  521,  858,   49,
   32,  828,  631,   49,  522,   49,  480,   49,  700,   49,
  632,   22,   49,   30,   49,   49,  832,   49,  520,   49,
   30,   49,  687,   49,   49,   49,   49,  546,   31,   49,
   49,  339,  776,  197,  866,   49,   49,   49,   49,   49,
  779,  329,   49,   49,   49, 1303,   49,  786,   49,   49,
   49,   49,   49,   49,   49,   49,  833,   49,   49,   49,
   49,   31,  738,   49,   49,   49,  236,   49,  777,   98,
  927,  329,   49,   49,  787,   49,   49,  807,   49,   49,
   49,  808,  835,  837,   49,  197,  343,  688,  688,  710,
  118,  368,  140,  526,  667,  361,  361,  667,  361,  526,
  233,  197,  107,  315,   49,  114,  147,  141,   49,   49,
   49,   49,  108,  316,  531,  148,  237,  361,  361,   54,
   21,  929, 1016,   49,  561, 1115, 1116, 1259, 1250, 1487,
 1404, 1446, 1453,   25, 1496,   26, 1436,  361,   27, 1306,
 1469,  956,  838,   28,  957,  361,  952,   29,  361,  958,
 1322, 1531,  261, 1255, 1342, 1523,   31, 1464,  197, 1459,
 1522,  197, 1457,   33,   49, 1186, 1366,  925,   34,  197,
  527, 1310,   35,  441, 1187,  441,  527,  197,  982,  197,
  197,  197,  748,  197,   37,  976,   38,  986,  585, 1309,
   39,  856, 1049,  301,  441,  441,  854,  548,   40,   41,
  834,  614,   42,  615, 1309,  322, 1309,  870,  197,  616,
  618,  197,  617,  619,  441,  763, 1175,  902, 1263, 1309,
 1178, 1132,  441, 1092,  408,  441, 1106,  741, 1033,   34,
 1044,  114, 1062,   34, 1101,  114, 1094,  634, 1099,  996,
 1309,    0,    0,  926,   34, 1166, 1261,    0,    0,   34,
    0,    0,    0,   34,  927,  329,   34,    0,    0,    0,
    0,    0,    0,  114,  114,    0,    0,  114,   34,   34,
  114,    0,    0,   34,   34,    0,  383,    0,    0,   34,
  261,   34,   34,   34,   34,    0,  860,    0,    0,   34,
  355,    0,    0,   34,    0,   34,    0,  114,    0,  383,
    0,    0,    0,    0,    0,   34,    0,  329,   34,    0,
   34,    0,  383,    0,   34,  197,    0,  383,    0,    0,
  260,    0,  383,  329,  383,  383,  383,  383,    0,    0,
    0,    0,  383,    0,   34,    0,  383,    0,    0,    0,
  383,    0,    0,    0,   34,   34,    0,    0,  383,    0,
    0,  383,    0,  383,    0,    0,    0,    0,    0,    0,
 1309,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  531,    0,    0,    0,    0,  531,  531,  383,    0,    0,
  329,    0,    0,  329,    0,    0,    0,    0,    0,    0,
    0,  329,    0,    0,    0,    0,    0,    0,  531,  329,
    0,  329,  329,  329,    0,  329,    0,    0,  531,    0,
    0,  531,  531,    0,    0,    0,  531,    0,    0,  531,
    0,  531,    0,  531,  531,  531,  531,    0,    0,    0,
  329,  531,    0,  329,    0,  531,    0,  383,    0,  531,
    0,    0,    0,    0,    0,    0,    0,  531,    0,    0,
  531,    0,  531,  531,    0,    0,    0,  803,  531,    0,
  531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
  531,    0,    0,    0,    0,    0,  531,  531,    0,    0,
    0,    0,    0,    0,    0,  531,  531,    0,  531,  531,
  531,  531,  531,  531,  531,    0,  531,  531,    0,  531,
  531,  531,  531,  531,  531,  531,  531,  531,  531,    0,
  531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
  531,  531,  531,  531,  531,  531,  531,  531,  531,  531,
  531,  531,    0,    0,  531,    0,  531,  329,  531,    0,
    0,  531,  860,  860,    0,    0,    0,  531,    0,    0,
  860,  860,  860,  860,  860,    0,  860,  860,    0,  860,
  860,  860,  860,  860,  860,  860,  860,    0,    0,    0,
    0,  860,    0,  860,  860,  860,  860,  860,  860,    0,
    0,  860,    0,    0,    0,  860,  860,    0,  860,  860,
  860,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  860,  361,  860,    0,  860,  860,    0,    0,  860,    0,
  860,  860,  860,  860,  860,  860,  860,  860,  860,  860,
  860,  860,    0,  860,    0,    0,  860,  860,    0,    0,
  860,  860,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  860,  860,  860,  860,  860,
    0,    0,    0,    0,    0,    0,    0,  860,  860,    0,
    0,  860,    0,  374,    0,    0,  860,  860,  860,  860,
  860,    0,    0,    0,  860,    0,  860,    0,    0,    0,
    0,    0,  860,  860,  375,  376,  377,  378,  379,  380,
  381,  382,  383,  384,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  860,  860,  860,
  860,    0,  860,  803,  803,    0,    0,    0,    0,  860,
    0,  803,  803,  803,  803,  803,    0,  803,  803,    0,
  803,  803,  803,  803,  803,  803,  803,    0,    0,    0,
    0,    0,  803,    0,  803,  803,  803,  803,  803,  803,
    0,  764,  803,    0,    0,    0,  803,  803,    0,  803,
  803,  803,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  803,    0,  803,    0,  803,  803,    0,    0,  803,
    0,  803,  803,  803,  803,  803,  803,  803,  803,  803,
  803,  803,  803,    0,  803,    0,    0,  803,  803,    0,
    0,  803,  803,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  803,  803,  803,  803,
  803,    0,    0,    0,    0,    0,    0,    0,  803,  803,
    0,    0,  803,    0,    0,    0,    0,  803,  803,  803,
  803,  803,    0,    0,    0,  803,    0,  803,    0,    0,
    0,    0,    0,  803,  803,    0,    0,  361,    0,    0,
    0,    0,  361,  361,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  803,  803,
  803,  803,    0,  803,    0,  361,    0,    0,    0,    0,
  803,    0,    0,    0,    0,  361,    0,    0,  361,  361,
    0,  354,    0,  361,    0,    0,  361,    0,  361,    0,
  361,  361,  361,  361,    0,    0,    0,    0,  361,    0,
    0,    0,  361,    0,    0,    0,  361,    0,    0,    0,
    0,    0,    0,    0,  361,    0,    0,  361,    0,  361,
  361,    0,    0,    0,    0,  361,    0,  361,  361,  361,
  361,  361,  361,  361,  361,  361,  361,  361,  361,    0,
    0,    0,    0,  361,  361,    0,    0,    0,    0,    0,
    0,    0,  361,  361,  361,  361,  361,  361,  361,  361,
  361,  361,    0,  361,  361,    0,    0,  361,  361,  361,
  361,  361,    0,    0,  361,  361,    0,    0,    0,  361,
  361,  361,  361,  361,  361,  361,  361,  764,    0,    0,
    0,    0,  764,  764,    0,    0,    0,    0,  361,    0,
    0,  361,    0,  361,    0,  361,    0,    0,  361,    0,
    0,    0,    0,    0,  361,  764,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  764,    0,    0,  764,  764,
    0,  391,    0,  764,    0,    0,  764,    0,  764,    0,
  764,  764,  764,  764,    0,    0,    0,    0,  764,    0,
    0,    0,  764,    0,    0,    0,  764,    0,    0,    0,
    0,    0,    0,    0,  764,    0,    0,  764,    0,  764,
  764,    0,    0,    0,    0,  764,    0,  764,  764,  764,
  764,  764,  764,  764,  764,  764,  764,  764,    0,    0,
    0,    0,    0,  764,  764,    0,    0,    0,    0,    0,
    0,    0,  764,  764,  764,  764,  764,  764,    0,  764,
  764,  764,    0,  764,  764,    0,    0,  764,  764,  764,
  764,    0,    0,    0,  764,  764,    0,    0,    0,  764,
  764,  764,  764,  764,  764,  764,  764,  354,    0,    0,
    0,    0,  354,  354,    0,    0,    0,    0,  764,    0,
    0,  764,    0,  764,    0,  764,    0,    0,  764,    0,
  361,    0,    0,    0,  764,  354,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  354,    0,    0,  354,  354,
    0,    0,    0,  354,    0,    0,  354,    0,  354,    0,
  354,  354,  354,  354,    0,    0,    0,    0,  354,    0,
    0,    0,  354,    0,    0,    0,  354,    0,    0,    0,
    0,    0,    0,    0,  354,    0,    0,  354,    0,  354,
  354,    0,    0,    0,    0,  354,    0,  354,  354,  354,
  354,  354,  354,  354,  354,  354,  354,  354,    0,    0,
    0,    0,    0,  354,  354,    0,    0,    0,    0,    0,
    0,    0,  354,  354,  354,  354,  354,  354,    0,  354,
  354,  354,    0,  354,  354,    0,    0,  354,  354,  354,
  354,    0,    0,    0,  354,  354,    0,    0,    0,  354,
  354,  354,  354,  354,  354,  354,  354,  391,    0,    0,
    0,    0,  391,  391,    0,    0,    0,    0,  354,    0,
    0,  354,    0,  354,    0,  354,    0,    0,  354,    0,
  386,    0,    0,    0,  354,  391,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  391,    0,    0,  391,  391,
    0,    0,    0,  391,    0,    0,  391,    0,  391,    0,
  391,  391,  391,  391,    0,    0,    0,    0,  391,    0,
    0,    0,  391,    0,    0,    0,  391,    0,    0,    0,
    0,    0,    0,    0,  391,    0,    0,  391,    0,  391,
  391,    0,    0,    0,    0,  391,    0,  391,  391,  391,
  391,  391,  391,  391,  391,  391,  391,  391,    0,    0,
    0,    0,    0,  391,  391,    0,    0,    0,    0,    0,
    0,    0,  391,  391,    0,  391,  391,  391,    0,  391,
  391,  391,    0,  391,  391,    0,  361,  391,  391,  391,
  391,    0,  361,    0,  391,  391,    0,    0,    0,  391,
  391,  391,  391,  391,  391,  391,  391,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  391,    0,
    0,  391,    0,  391,  361,    0,    0,    0,  361,    0,
    0,    0,    0,    0,  391,    0,    0,    0,    0,    0,
    0,    0,   28,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  361,
    0,    0,    0,    0,  361,    0,  361,  361,  361,  361,
  361,  361,  361,  361,  361,  361,  361,  361,    0,    0,
    0,    0,    0,  361,  943,    0,    0,    0,    0,    0,
    0,  361,  361,  361,  361,  361,  361,  361,  361,  361,
  361,    0,  361,  361,    0,    0,  361,  361,  361,  361,
  361,    0,    0,  361,  361,    0,    0,    0,  361,  361,
  361,  361,  361,  361,  361,  361,  386,    0,    0,    0,
   36,    0,  386,    0,    0,    0,    0,  361,    0,    0,
  361,    0,  361,    0,  361,    0,    0,  361,    0,    0,
    0,    0,    0,  361,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  386,    0,    0,  943,  386,    0,
    0,    0,  943,    0,  943,  943,  943,  943,  943,  943,
  943,  943,  943,  943,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   35,    0,
  943,    0,  943,    0,  943,    0,  943,  943,  943,  386,
    0,    0,    0,    0,  386,    0,  386,  386,  386,  386,
  386,  386,  386,  386,  386,  386,  386,    0,    0,    0,
    0,    0,    0,  386,    0,    0,    0,    0,    0,    0,
    0,  386,  386,    0,  386,  386,  386,    0,  386,  386,
  386,    0,  386,  386,    0,    0,  386,  386,  386,  386,
    0,  943,    0,  386,  386,   28,    0,    0,  386,  386,
  386,  386,  386,  386,  386,  386,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  386,   28,   28,
  386,    0,  386,   28,    0,    0,    0,   28,    0,   28,
    0,    0,   28,  386,   28,   28,    0,   28,   33,   28,
    0,   28,    0,   28,   28,   28,   28,    0,    0,   28,
   28,    0,    0,    0,    0,   28,    0,   28,   28,   28,
    0,    0,   28,   28,   28,    0,   28,    0,    0,   28,
    0,   28,   28,   28,   28,    0,    0,    0,   28,   28,
   28,    5,    0,   28,   28,   28,    0,    0,    0,    0,
    0,    0,   28,   28,    0,   28,   28,    0,   28,   28,
   28,    0,    0,    0,   28,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   36,    0,    0,
    0,   36,    0,    0,   28,    0,   28,    0,   28,    0,
    0,    0,   36,    0,   28,   28,    0,   36,    0,    0,
    0,   36,    0,   28,   36,    0,    0,    0,  951,    0,
    0,    0,    0,    0,    0,    0,   36,   36,    0,    0,
    0,   36,   36,    0,    0,    0,    0,   36,    0,   36,
   36,   36,   36,    0,    0,    0,    0,   36,    0,    0,
    0,   36,    0,   36,   28,   35,    0,    0,    0,   35,
    0,   48,    0,   36,    0,   36,   36,    0,   36,    0,
   35,    0,   36,    0,    0,   35,    0,    0,    0,   35,
    0,    0,   35,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   36,    0,   35,   35,    0,    0,    0,   35,
   35,    0,   36,   36,    7,   35,    0,   35,   35,   35,
   35,    0,    0,    0,    0,   35,    0,    0,    0,   35,
    0,   35,   28,    0,    0,    0,   28,    0,    0,    0,
    0,   35,    0,   35,   35,    0,   35,   28,    0,    0,
   35,    0,   28,    0,    0,    0,   28,  952,    0,   28,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   35,   28,   28,    0,    0,   33,   28,   28,    0,   33,
    0,   35,   28,    0,   28,   28,   28,   28,    0,    0,
   33,    0,   28,    0,    0,   33,   28,    0,   28,   33,
    0,    0,   33,    0,    0,    0,    0,    0,   28,    0,
    0,   28,    0,   28,   33,   33,    0,   28,    5,   33,
   33,    0,   48,    0,    0,   33,    0,   33,   33,   33,
   33,    0,    0,   48,    0,   33,    0,   28,   48,   33,
    0,   33,   48,    0,    0,   48,    0,   28,   28,    0,
    0,   33,    0,    0,   33,    0,   33,   48,   48,    0,
   33,    0,   48,   48,    0,    0,    0,    0,   48,    0,
   48,   48,   48,   48,    0,    0,    0,    0,   48,    0,
   33,    0,   48,    0,   48,  951,    0,    0,    0,   48,
    0,   33,    0,    0,   48,    0,    0,   48,    0,   48,
   48,    0,    0,   48,    0,   48,    0,    0,    0,   48,
    0,    0,   48,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   48,   48,   48,    0,    0,   48,   48,
   48,    0,   48,    0,    0,   48,    0,   48,   48,   48,
   48,    0,    0,   48,    0,   48,    0,    0,   48,   48,
    0,   48,   48,    0,    0,   48,    0,    0,    0,    0,
    0,   48,    0,    0,   48,    0,   48,   48,   48,    0,
   48,    7,   48,   48,    0,   49,    0,    0,   48,    0,
   48,   48,   48,   48,    0,    0,   49,    0,   48,    0,
   48,   49,   48,    0,   48,   49,    0,    0,   49,    0,
    0,    0,    0,    0,   48,    0,    0,   48,    0,   48,
   49,   49,    0,   48,  952,   49,   49,    0,   48,    0,
    0,   49,    0,   49,   49,   49,   49,    0,    0,   48,
    0,   49,    0,   48,   48,   49,    0,   49,   48,    0,
    0,   48,    0,    0,    0,    0,    0,   49,    0,    0,
   49,    0,   49,   48,   48,    0,   49,    0,   48,   48,
    0,    0,    0,    0,   48,    0,   48,   48,   48,   48,
    0,    0,    0,    0,   48,    0,   49,    0,   48,    0,
   48,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   48,    0,   56,   48,    0,   48,    0,    0,    0,   48,
   57,   25,   58,   26,    0,    0,   27,   59,    0,   60,
   61,   28,   62,   63,   64,   29,    0,    0,    0,   48,
    0,   65,    0,   66,   31,   67,   68,   69,   70,    0,
    0,   33,    0,    0,    0,   71,   34,    0,   72,   73,
   35,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   74,    0,   37,    0,   38,   75,    0,    0,   39,    0,
   76,   77,   78,   79,   80,   81,   40,   41,   82,   83,
   42,   84,    0,   85,    0,    0,   86,   87,    0,    0,
   88,   89,    0,  361,    0,    0,    0,    0,    0,  361,
    0,    0,    0,    0,    0,   90,   91,   92,   93,   94,
    0,    0,    0,    0,    0,    0,    0,   95,    0,    0,
    0,   96,    0,    0,    0,    0,   97,   98,   99,  100,
  101,    0,    0,    0,  102,  361,  103,    0,    0,    0,
    0,    0,  104,  105,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  361,
    0,    0,    0,    0,    0,  361,    0,  106,  107,  108,
  109,    0,    0,    0,    0,    0,  361,    0,    0,  199,
    0,  361,    0,  361,  361,  361,  361,  361,  361,  361,
  361,  361,  361,  361,  361,    0,    0,    0,    0,    0,
  361,  361,    0,    0,    0,    0,    0,    0,    0,  361,
  361,  361,  361,  361,  361,  361,  361,  361,    0,  361,
  361,    0,  361,  361,  361,  361,  361,  361,  361,  361,
  361,  361,    0,  361,  361,  361,  361,  361,  361,  361,
  361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
  361,  361,  361,  361,  361,    0,  533,    0,    0,  361,
    0,  361,  533,    0,  361,    0,    0,    0,    0,    0,
  361,    0,    0,    0,    0,  361,    0,    0,  361,    0,
  361,  361,    0,    0,    0,  361,  361,    0,    0,  361,
  361,  361,  361,  361,  361,  361,  361,  361,  533,  361,
  361,  361,  361,  361,  361,  361,  361,  361,  361,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  361,
  361,    0,    0,    0,    0,    0,    0,  361,    0,    0,
  361,    0,    0,    0,    0,    0,  361,    0,    0,  533,
    0,    0,    0,    0,  533,    0,  533,  533,  533,  533,
  533,  533,  533,  533,  533,  533,  533,    0,    0,  609,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  533,  533,  533,  533,  533,  533,  533,  533,  533,
  533,    0,  533,  533,    0,  533,  533,  533,  533,  533,
  533,  533,  533,  533,  533,    0,  533,  533,  533,  533,
  533,  533,  533,  533,  533,  533,  533,  533,  533,  533,
  533,  533,  533,  533,  533,  533,  533,  533,    0,  529,
    0,    0,    0,    0,  533,  529,    0,    0,    0,    0,
    0,    0,    0,  533,    0,    0,    0,    0,    0,    0,
    0,    0,  609,    0,    0,    0,    0,  609,    0,  609,
  609,  609,  609,  609,  609,  609,  609,  609,  609,  609,
    0,  529,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  609,    0,  609,    0,  609,
    0,  609,  609,  609,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  609,    0,    0,
    0,    0,  529,    0,    0,    0,    0,  529,  609,  529,
  529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
  609,    0,  610,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  529,  529,  609,  529,  529,  529,
  529,  529,  529,  529,    0,  529,  529,    0,  529,  529,
  529,  529,  529,  529,  529,  529,  529,  529,    0,  529,
  529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
  529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
  529,    0,  537,    0,    0,    0,    0,  529,  537,    0,
  529,    0,    0,    0,    0,    0,  529,    0,    0,    0,
    0,    0,    0,    0,    0,  610,    0,    0,    0,    0,
  610,    0,  610,  610,  610,  610,  610,  610,  610,  610,
  610,  610,  610,    0,  537,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  610,    0,
  610,    0,  610,    0,  610,  610,  610,    0,    0,    0,
    0,    0,    0,    0,  419,    0,    0,    0,    0,    0,
  610,    0,    0,    0,    0,  537,    0,    0,    0,    0,
  537,  610,  537,  537,  537,  537,  537,  537,  537,  537,
  537,  537,  537,  610,    0,    0,    0,    0,    0,    0,
  419,    0,    0,    0,    0,    0,    0,    0,  537,  610,
  537,  537,  537,  537,  537,  537,  537,    0,  537,  537,
    0,  537,  537,  537,  537,  537,  537,  537,  537,  537,
  537,    0,  537,  537,  537,  537,  537,  537,  537,  537,
  537,  537,  537,  537,  537,  537,  537,  537,  537,  537,
  537,  537,  537,  537,    0,  361,    0,    0,    0,    0,
  537,  361,    0,  537,    0,  354,    0,    0,    0,  537,
    0,    0,    0,    0,    0,  354,    0,  419,  419,  419,
  419,    0,  419,    0,  419,  419,    0,  419,  419,  419,
  419,  419,    0,  419,  419,  419,  419,  361,  419,  419,
  419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
  419,  419,  419,  419,  419,  419,  419,  419,  419,  419,
    0,    0,    0,    0,  354,    0,  419,    0,    0,  419,
    0,    0,    0,    0,    0,  419,    0,    0,  361,    0,
    0,    0,    0,  361,    0,  361,  361,  361,  361,  361,
  361,  361,  361,  361,  361,  361,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  361,    0,  361,  361,  361,  361,  361,  361,  361,
    0,  361,  361,    0,  361,  361,  361,  361,  361,  361,
  361,  361,  361,  361,    0,  361,  361,  361,  361,  361,
  361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
  361,  361,  361,  361,  361,  361,  361,    0,  464,  742,
    0,    0,    0,  361,  464,    0,  361,    0,   25,    0,
   26,    0,  361,   27,    0,    0,    0,    0,   28,    0,
    0,    0,   29,    0,    0,    0,    0,    0,    0,    0,
    0,   31,    0,    0,    0,    0,    0,    0,   33,    0,
  464,    0,    0,   34,    0,    0,    0,   35,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   37,
    0,   38,    0,    0,    0,   39,    0,    0,    0,    0,
    0,    0,    0,   40,   41,    0,    0,   42,    0,    0,
  743,  464,    0,    0,    0,    0,  464,    0,  464,  464,
  464,  464,  464,  464,  464,  464,  464,  464,  464,    0,
    0,    0,    0,    0,    0,    0,  293,    0,    0,    0,
    0,    0,    0,    0,  464,    0,  464,  464,  464,  464,
  464,  464,  464,    0,  464,  464,    0,  464,  464,  464,
  464,  464,  464,  464,  464,  464,  464,    0,  464,  464,
  464,  464,  464,  464,  464,  464,  464,  464,  464,  464,
  464,  464,  464,  464,  464,  464,  464,  464,  464,  464,
    0,  422,  878,    0,    0,  323,  464,  422,    0,  464,
    0,   25,    0,   26,    0,  464,   27,    0,    0,    0,
    0,   28,    0,    0,    0,   29,    0,    0,    0,    0,
    0,    0,    0,    0,   31,    0,    0,    0,    0,    0,
    0,   33,    0,  422,    0,    0,   34,    0,    0,    0,
   35,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   37,    0,   38,    0,    0,    0,   39,    0,
    0,    0,    0,    0,    0,    0,   40,   41,    0,    0,
   42,    0,    0,  322,  422,    0,    0,    0,    0,  422,
    0,  422,  422,  422,  422,  422,  422,  422,  422,  422,
  422,  422,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  422,    0,  422,
  422,  422,  422,  422,  422,  422,    0,  422,    0,    0,
  422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
    0,  422,  422,  422,  422,  422,  422,  422,  422,  422,
  422,  422,  422,  422,  422,  422,  422,  422,  422,  422,
  422,  422,  422,    0,  568, 1025,    0,    0,  355,  422,
  568,    0,  422,    0,   25,    0,   26,    0,  422,   27,
    0,    0,    0,    0,   28,    0,    0,    0,   29,    0,
    0,    0,    0,    0,    0,    0,    0,   31,    0,    0,
    0,    0,    0,    0,   33,    0,  568,    0,    0,   34,
    0,    0,    0,   35,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   37,    0,   38,    0,    0,
    0,   39,    0,  361,    0,    0,    0,  767,    0,   40,
   41,    0,    0,   42,    0,    0,  322,  568,    0,    0,
    0,    0,  568,    0,  568,  568,  568,  568,  568,  568,
  568,  568,  568,  568,  568,    0,    0,    0,    0,  361,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  568,    0,  568,    0,  568,  767,  568,  568,  568,    0,
  568,  568,    0,  568,  568,  568,  568,  568,  568,  568,
  568,  568,  568,    0,    0,    0,  568,  568,  568,  568,
  568,  568,  568,  568,  568,  568,  568,  568,  568,  568,
  568,  568,  568,  568,  580,  568,    0,    0,  361,    0,
  580,  355,    0,    0,  361,    0,    0,    0,    0,    0,
    0,  568,    0,    0,  361,  361,  361,  361,  361,  361,
  767,  361,    0,  361,  361,    0,  361,  361,  361,  361,
  361,  361,  361,  361,  361,  361,  580,  361,  361,  361,
  361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
  361,  361,  361,  361,  361,  361,  361,  361,  361,    0,
    0,    0,    0,  361,    0,  361,  584,    0,  361,    0,
    0,    0,  584,    0,  361,    0,    0,  580,    0,    0,
    0,    0,  580,    0,  580,  580,  580,  580,  580,  580,
  580,  580,  580,  580,  580,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  584,    0,
  580,    0,  580,    0,  580,    0,  580,  580,  580,    0,
  580,  580,    0,    0,  580,  580,  580,  580,  580,  580,
  580,  580,  580,    0,    0,    0,  580,  580,  580,  580,
  580,  580,  580,  580,    0,    0,    0,    0,    0,  584,
    0,    0,    0,    0,  584,  580,  584,  584,  584,  584,
  584,  584,  584,  584,  584,  584,  584,    0,    0,    0,
    0,  580,    0,    0,  587,    0,    0,    0,    0,    0,
  587,    0,  584,    0,  584,    0,  584,    0,  584,  584,
  584,    0,  584,  584,    0,    0,  584,  584,  584,  584,
    0,    0,    0,  584,  584,    0,    0,    0,  584,  584,
  584,  584,  584,  584,  584,  584,  587,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  584,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  584,    0,    0,  585,    0,    0,    0,
    0,    0,  585,    0,    0,    0,    0,  587,    0,    0,
    0,    0,  587,    0,  587,  587,  587,  587,  587,  587,
  587,  587,  587,  587,  587,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  585,    0,
  587,    0,  587,    0,  587,    0,  587,  587,  587,    0,
  587,  587,    0,    0,  587,  587,  587,  587,    0,    0,
    0,  587,  587,    0,    0,    0,  587,  587,  587,  587,
  587,  587,  587,  587,    0,    0,    0,    0,    0,  585,
    0,    0,    0,    0,  585,  587,  585,  585,  585,  585,
  585,  585,  585,  585,  585,  585,  585,    0,    0,    0,
    0,  587,    0,    0,  586,    0,    0,    0,    0,    0,
  586,    0,  585,    0,  585,    0,  585,    0,  585,  585,
  585,    0,  585,  585,    0,    0,  585,  585,  585,  585,
    0,    0,    0,  585,  585,    0,    0,    0,  585,  585,
  585,  585,  585,  585,  585,  585,  586,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  585,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  585,    0,    0,  590,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  586,    0,    0,
    0,    0,  586,    0,  586,  586,  586,  586,  586,  586,
  586,  586,  586,  586,  586,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  586,    0,  586,    0,  586,    0,  586,  586,  586,    0,
  586,  586,    0,    0,  586,  586,  586,  586,    0,    0,
    0,  586,  586,    0,    0,    0,  586,  586,  586,  586,
  586,  586,  586,  586,    0,    0,    0,    0,    0,  590,
    0,    0,    0,    0,  590,  586,  590,  590,  590,  590,
  590,  590,  590,  590,  590,  590,  590,  591,    0,    0,
    0,  586,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  590,    0,  590,    0,  590,    0,  590,  590,
  590,    0,    0,    0,    0,    0,  590,  590,  590,  590,
    0,    0,    0,  590,  590,    0,    0,    0,  590,  590,
  590,  590,  590,  590,  590,  590,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  590,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  592,
    0,    0,    0,  590,    0,    0,    0,    0,    0,    0,
  591,    0,    0,    0,    0,  591,    0,  591,  591,  591,
  591,  591,  591,  591,  591,  591,  591,  591,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  591,    0,  591,    0,  591,    0,  591,
  591,  591,    0,    0,    0,    0,    0,  591,  591,  591,
  591,    0,    0,    0,  591,  591,    0,    0,    0,  591,
  591,  591,  591,  591,  591,  591,  591,    0,    0,    0,
    0,    0,  592,    0,    0,    0,    0,  592,  591,  592,
  592,  592,  592,  592,  592,  592,  592,  592,  592,  592,
  593,    0,    0,    0,  591,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  592,    0,  592,    0,  592,
    0,  592,  592,  592,    0,    0,    0,    0,    0,  592,
  592,  592,  592,    0,    0,    0,  592,  592,    0,    0,
    0,  592,  592,  592,  592,  592,  592,  592,  592,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  592,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  594,    0,    0,    0,  592,    0,    0,    0,
    0,    0,    0,  593,    0,    0,    0,    0,  593,    0,
  593,  593,  593,  593,  593,  593,  593,  593,  593,  593,
  593,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  593,    0,  593,    0,
  593,    0,  593,  593,  593,    0,    0,    0,    0,    0,
  593,  593,  593,  593,    0,    0,    0,  593,  593,    0,
    0,    0,    0,    0,  593,  593,  593,  593,  593,  593,
    0,    0,    0,    0,    0,  594,    0,    0,    0,    0,
  594,  593,  594,  594,  594,  594,  594,  594,  594,  594,
  594,  594,  594,  595,    0,    0,    0,  593,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  594,    0,
  594,    0,  594,    0,  594,  594,  594,    0,    0,    0,
    0,    0,  594,  594,  594,  594,    0,    0,    0,  594,
  594,    0,    0,    0,    0,    0,  594,  594,  594,  594,
  594,  594,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  594,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  596,    0,    0,    0,  594,
    0,    0,    0,    0,    0,    0,  595,    0,    0,    0,
    0,  595,    0,  595,  595,  595,  595,  595,  595,  595,
  595,  595,  595,  595,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  595,
    0,  595,    0,  595,    0,  595,  595,  595,    0,    0,
    0,    0,    0,  595,  595,  595,  595,    0,    0,    0,
  595,  595,    0,    0,    0,    0,    0,  595,  595,  595,
  595,  595,  595,    0,    0,    0,    0,    0,  596,    0,
    0,    0,    0,  596,  595,  596,  596,  596,  596,  596,
  596,  596,  596,  596,  596,  596,  597,    0,    0,    0,
  595,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  596,    0,  596,    0,  596,    0,  596,  596,  596,
    0,    0,    0,    0,    0,  596,  596,  596,  596,    0,
    0,    0,  596,  596,    0,    0,    0,    0,    0,  596,
  596,  596,  596,  596,  596,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  596,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  598,    0,
    0,    0,  596,    0,    0,    0,    0,    0,    0,  597,
    0,    0,    0,    0,  597,    0,  597,  597,  597,  597,
  597,  597,  597,  597,  597,  597,  597,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  597,    0,  597,    0,  597,    0,  597,  597,
  597,    0,    0,    0,    0,    0,  597,  597,  597,  597,
    0,    0,    0,  597,  597,    0,    0,    0,    0,    0,
  597,  597,  597,  597,  597,  597,    0,    0,    0,    0,
    0,  598,    0,    0,    0,    0,  598,  597,  598,  598,
  598,  598,  598,  598,  598,  598,  598,  598,  598,  599,
    0,    0,   28,  597,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  598,    0,  598,    0,  598,    0,
  598,  598,  598,    0,    0,   28,    0,    0,    0,    0,
  598,  598,    0,    0,    0,  598,  598,    0,   28,    0,
    0,    0,    0,   28,  598,  598,  598,  598,   28,    0,
   28,   28,   28,   28,    0,    0,   28,    0,   28,  598,
    0,    0,   28,    0,    0,    0,    0,    0,    0,    0,
    0,  600,    0,    0,   28,  598,    0,   28,    0,   28,
    0,    0,  599,    0,    0,    0,    0,  599,    0,  599,
  599,  599,  599,  599,  599,  599,  599,  599,  599,  599,
    0,    0,    0,   28,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   28,   28,  599,    0,  599,    0,  599,
    0,  599,  599,  599,    0,    0,    0,    0,    0,    0,
    0,  599,  599,    0,    0,    0,  599,  599,    0,    0,
    0,    0,    0,  601,    0,  599,  599,  599,  599,    0,
    0,    0,    0,    0,  600,    0,    0,    0,    0,  600,
  599,  600,  600,  600,  600,  600,  600,  600,  600,  600,
  600,  600,    0,    0,    0,    0,  599,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  600,    0,  600,
    0,  600,    0,  600,  600,  600,    0,    0,    0,    0,
    0,    0,    0,  600,  600,    0,    0,    0,  600,  600,
    0,    0,    0,    0,    0,  602,    0,  600,  600,  600,
  600,    0,    0,    0,    0,    0,  601,    0,    0,    0,
    0,  601,  600,  601,  601,  601,  601,  601,  601,  601,
  601,  601,  601,  601,    0,    0,    0,    0,  600,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  601,
    0,  601,    0,  601,    0,  601,  601,  601,    0,    0,
    0,    0,    0,    0,    0,  601,  601,    0,    0,    0,
  601,  601,    0,    0,    0,    0,    0,  603,    0,    0,
    0,  601,  601,    0,    0,    0,    0,    0,  602,    0,
    0,    0,    0,  602,  601,  602,  602,  602,  602,  602,
  602,  602,  602,  602,  602,  602,    0,    0,    0,    0,
  601,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  602,    0,  602,    0,  602,    0,  602,  602,  602,
    0,    0,    0,    0,    0,    0,    0,  602,  602,    0,
    0,    0,  602,  602,    0,    0,    0,    0,    0,  604,
    0,    0,    0,  602,  602,    0,    0,    0,    0,    0,
  603,    0,    0,    0,    0,  603,  602,  603,  603,  603,
  603,  603,  603,  603,  603,  603,  603,  603,    0,    0,
    0,    0,  602,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  603,    0,  603,    0,  603,    0,  603,
  603,  603,    0,    0,    0,    0,    0,    0,    0,    0,
  603,    0,    0,    0,  603,  603,    0,    0,    0,    0,
    0,  605,    0,    0,    0,  603,  603,    0,    0,    0,
    0,    0,  604,    0,    0,    0,    0,  604,  603,  604,
  604,  604,  604,  604,  604,  604,  604,  604,  604,  604,
    0,    0,    0,    0,  603,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  604,    0,  604,    0,  604,
    0,  604,  604,  604,    0,    0,    0,    0,    0,    0,
    0,    0,  604,    0,    0,    0,  604,  604,    0,    0,
    0,    0,    0,  606,    0,    0,    0,  604,  604,    0,
    0,    0,    0,    0,  605,    0,    0,    0,    0,  605,
  604,  605,  605,  605,  605,  605,  605,  605,  605,  605,
  605,  605,    0,    0,    0,    0,  604,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  605,    0,  605,
    0,  605,    0,  605,  605,  605,    0,    0,    0,    0,
    0,    0,    0,    0,  605,    0,    0,    0,    0,  605,
    0,    0,    0,    0,    0,  607,    0,    0,    0,  605,
  605,    0,    0,    0,    0,    0,  606,    0,    0,    0,
    0,  606,  605,  606,  606,  606,  606,  606,  606,  606,
  606,  606,  606,  606,    0,    0,    0,    0,  605,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  606,
    0,  606,    0,  606,    0,  606,  606,  606,    0,    0,
    0,    0,    0,    0,    0,    0,  606,    0,    0,    0,
    0,  606,    0,    0,    0,    0,    0,  608,    0,    0,
    0,  606,  606,    0,    0,    0,    0,    0,  607,    0,
    0,    0,    0,  607,  606,  607,  607,  607,  607,  607,
  607,  607,  607,  607,  607,  607,    0,    0,    0,    0,
  606,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  607,    0,  607,    0,  607,    0,  607,  607,  607,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  607,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  607,  607,    0,    0,    0,    0,    0,
  608,    0,    0,    0,    0,  608,  607,  608,  608,  608,
  608,  608,  608,  608,  608,  608,  608,  608,    0,    0,
    0,    0,  607,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  608,    0,  608,    0,  608,    0,  608,
  608,  608,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   56,    0,  608,    0,    0,    0,    0,
    0,   57,   25,   58,   26,  608,  608,   27,   59,    0,
   60,   61,   28,   62,   63,   64,   29,    0,  608,    0,
    0,    0,   65,    0,   66,   31,   67,   68,   69,   70,
    0,    0,   33,    0,  608,    0,   71,   34,    0,   72,
   73,   35,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   74,    0,   37,    0,   38,   75,    0,    0,   39,
    0,   76,   77,   78,   79,   80,   81,   40,   41,   82,
   83,   42,   84,    0,   85,    0,    0,   86,   87,    0,
    0,   88,   89,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   90,   91,   92,   93,
   94,    0,    0,    0,    0,    0,    0,    0,   95,    0,
    0,    0,   96,    0,    0,    0,    0,   97,   98,   99,
  100,  101,    0,    0,    0,  102,    0,  103,    0,    0,
    0,    0,    0,  104,  105,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  268,    0,    0,    0,  106,  107,
  108,  109,   57,   25,   58,   26,    0,    0,   27,   59,
    0,   60,   61,   28,   62,   63,   64,   29,    0,    0,
    0,    0,    0,   65,    0,   66,   31,   67,   68,   69,
   70,    0,    0,   33,    0,    0,    0,   71,   34,    0,
   72,   73,   35,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   74,    0,   37,    0,   38,   75,    0,    0,
   39,    0,   76,   77,   78,   79,   80,   81,   40,   41,
   82,   83,   42,   84,    0,   85,    0,    0,   86,   87,
    0,    0,   88,   89,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   90,   91,   92,
   93,   94,    0,    0,    0,    0,    0,    0,    0,   95,
    0,    0,    0,   96,    0,    0,    0,    0,   97,   98,
   99,  100,  101,    0,    0,    0,  102,    0,  103,    0,
    0,    0,    0,    0,  104,  105,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  551,    0,    0,    0,  106,
  107,  108,  109,   57,   25,   58,   26,    0,    0,   27,
   59,    0,   60,   61,   28,   62,   63,   64,   29,    0,
    0,    0,    0,    0,   65,    0,   66,   31,   67,   68,
   69,   70,    0,    0,   33,    0,    0,    0,   71,   34,
    0,   72,   73,   35,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   74,    0,   37,    0,   38,   75,    0,
    0,   39,    0,   76,   77,   78,   79,   80,   81,   40,
   41,   82,   83,   42,   84,    0,   85,    0,    0,   86,
   87,    0,    0,   88,   89,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   90,   91,
   92,   93,   94,    0,    0,    0,    0,    0,    0,    0,
   95,    0,    0,    0,   96,    0,    0,    0,    0,   97,
   98,   99,  100,  101,    0,    0,    0,  102,    0,  103,
    0,    0,    0,    0,    0,  104,  105,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  948,    0,    0,    0,
  106,  107,  108,  109,  948,  948,  948,  948,    0,    0,
  948,  948,    0,  948,  948,  948,  948,  948,  948,  948,
    0,    0,    0,    0,    0,  948,    0,  948,  948,  948,
  948,  948,  948,    0,    0,  948,    0,    0,    0,  948,
  948,    0,  948,  948,  948,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  948,    0,  948,    0,  948,  948,
    0,    0,  948,    0,  948,  948,  948,  948,  948,  948,
  948,  948,  948,  948,  948,  948,    0,  948,    0,    0,
  948,  948,    0,    0,  948,  948,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  948,
  948,  948,  948,  948,    0,    0,    0,    0,    0,    0,
    0,  948,    0,    0,    0,  948,    0,    0,    0,    0,
  948,  948,  948,  948,  948,    0,    0,    0,  948,    0,
  948,    0,    0,    0,    0,    0,  948,  948,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  812,    0,    0,
    0,  948,  948,  948,  948,  812,  812,  812,  812,    0,
    0,  812,  812,    0,  812,  812,  812,  812,  812,  812,
  812,    0,    0,    0,    0,    0,  812,    0,  812,  812,
  812,  812,  812,  812,    0,    0,  812,    0,    0,    0,
  812,  812,    0,  812,  812,  812,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  812,    0,  812,    0,  812,
  812,    0,    0,  812,    0,  812,  812,  812,  812,  812,
  812,  812,  812,  812,  812,  812,  812,    0,  812,    0,
    0,  812,  812,    0,    0,  812,  812,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  812,  812,  812,  812,  812,    0,    0,    0,    0,    0,
    0,    0,  812,    0,    0,    0,  812,    0,    0,    0,
    0,  812,  812,  812,  812,  812,    0,    0,    0,  812,
    0,  812,    0,    0,    0,    0,    0,  812,  812,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  729,    0,
    0,    0,  812,  812,  812,  812,   57,   25,    0,   26,
    0,    0,   27,  256,    0, 1148,    0,   28,   62,   63,
    0,   29,    0,    0,   25,    0,   26,   65,    0,   27,
   31,    0,    0,    0,   28,    0,    0,   33,   29,    0,
    0,    0,   34,    0,   72,   73,   35,   31,    0,    0,
    0,    0,    0,    0,   33,    0,    0,    0,   37,   34,
   38,   75,    0,   35,   39,    0,    0,   77,    0,   79,
    0,   81,   40,   41,  257,   37,   42,   38,    0,    0,
    0,   39,    0,   87,    0,    0,   88,   89,    0,   40,
   41,    0,    0,   42,    0,    0,  322,    0,    0,    0,
    0,   90,   91,   92,   93,  303,    0,    0,    0,    0,
    0,    0,    0,  513,  730,    0,    0,   96,    0,    0,
    0,    0,    0,   98,   99,  100,  101,    0,    0,    0,
  102,    0,  103,    0,    0,    0,    0,    0,  104,  105,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  729,
    0,    0,    0,  106,  304,  108,  109,   57,   25,    0,
   26,    0,    0,   27,  256,    0,    0,    0,   28,   62,
   63,  355,   29,    0,    0,   25,    0,   26,   65,    0,
   27,   31,    0,    0,    0,   28,    0,    0,   33,   29,
    0,    0,    0,   34,    0,   72,   73,   35,   31,    0,
    0,    0,    0,    0,    0,   33,    0,    0,    0,   37,
   34,   38,   75,  906,   35,   39,    0,    0,   77,    0,
   79,    0,   81,   40,   41,  257,   37,   42,   38,    0,
    0,    0,   39,    0,   87,    0,    0,   88,   89,    0,
   40,   41,    0,    0,   42,    0,    0,  322,    0,    0,
    0,    0,   90,   91,   92,   93,  303,    0,    0,    0,
    0,    0,    0,    0,  513,    0,    0,    0,   96,    0,
    0,    0,    0,  293,   98,   99,  100,  101,    0,    0,
    0,  102,    0,  103,    0,    0,    0,    0,    0,  104,
  105,    0,    0,    0,    0,    0,    0,   57,   25,    0,
   26,    0,    0,   27,  256,    0,    0,    0,   28,   62,
   63,    0,   29,    0,  106,  304,  108,  109,   65,    0,
    0,   31,    0,    0,    0,    0,    0,    0,   33,    0,
    0,    0,  323,   34,    0,   72,   73,   35,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   37,
    0,   38,   75,    0,    0,   39,    0,    0,   77,    0,
   79,    0,   81,   40,   41,  257,    0,   42,    0,    0,
    0,    0,    0,    0,   87,    0,    0,   88,   89,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   90,   91,   92,   93,  303,    0,    0,    0,
    0,    0,    0,    0,  706,  975,    0,    0,   96,    0,
    0,    0,    0,    0,   98,   99,  100,  101,    0,    0,
    0,  102,    0,  103,    0,    0,    0,    0,    0,  104,
  105,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  689,    0,  106,  707,  108,  109,    0,    0,
   57,   25,    0,   26,    0,  708,   27,  256,    0,    0,
    0,   28,   62,   63,    0,   29,    0,    0,  202,    0,
  202,   65,    0,  202,   31,    0,    0,    0,  202,    0,
    0,   33,  202,    0,    0,    0,   34,    0,   72,   73,
   35,  202,    0,    0,    0,    0,    0,    0,  202,    0,
    0,    0,   37,  202,   38,   75,    0,  202,   39,    0,
    0,   77,    0,   79,    0,   81,   40,   41,  257,  202,
   42,  202,    0,   85,    0,  202,    0,   87,    0,    0,
   88,   89,    0,  202,  202,    0,    0,  202,    0,    0,
  202,    0,    0,    0,    0,   90,   91,   92,   93,  303,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   96,    0,    0,    0,    0,    0,   98,   99,  100,
  101,    0,    0,    0,  102,    0,  103,    0,    0,  972,
    0,    0,  104,  105,    0,    0,    0,    0,    0,    0,
   57,   25,    0,   26,    0,    0,   27,  256,    0,    0,
    0,   28,   62,   63,    0,   29,    0,  106,  304,  108,
  109,   65,    0,    0,   31,    0,    0,    0,    0,    0,
    0,   33,    0,    0,    0,  202,   34,    0,   72,   73,
   35,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   37,    0,   38,   75,    0,    0,   39,    0,
    0,   77,    0,   79,    0,   81,   40,   41,  257,    0,
   42,    0,    0,    0,    0,    0,    0,   87,    0,    0,
   88,   89,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   90,   91,   92,   93,  303,
    0,    0,    0,    0,    0,    0,    0,  706,    0,    0,
    0,   96,    0,    0,    0,    0,    0,   98,   99,  100,
  101,    0,    0,    0,  102,    0,  103,    0,    0,    0,
    0,    0,  104,  105,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  729,    0,  106,  707,  108,
  109,    0,    0,   57,   25,    0,   26,    0,  708,   27,
  256,    0,    0,    0,   28,   62,   63,    0,   29,    0,
    0,  202,    0,  202,   65,    0,  202,   31,    0,    0,
    0,  202,    0,    0,   33,  202,    0,    0,    0,   34,
    0,   72,   73,   35,  202,    0,    0,    0,    0,    0,
    0,  202,    0,    0,    0,   37,  202,   38,   75,    0,
  202,   39,    0,    0,   77,    0,   79,    0,   81,   40,
   41,  257,  202,   42,  202,    0,    0,    0,  202,    0,
   87,    0,    0,   88,   89,    0,  202,  202,    0,    0,
  202,    0,    0,  202,    0,    0,    0,    0,   90,   91,
   92,   93,  303,    0,    0,    0,    0,    0,    0,    0,
  513,    0,    0,    0,   96,    0,    0,    0,    0,    0,
   98,   99,  100,  101,    0,    0,    0,  102,    0,  103,
  972,    0,    0,    0,    0,  104,  105,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  897,    0,    0,    0,
  106,  304,  108,  109,   57,   25,    0,   26,    0,    0,
   27,  256,    0,    0,    0,   28,   62,   63,  202,   29,
    0,    0,   25,    0,   26,   65,    0,   27,   31,    0,
    0,    0,   28,    0,    0,   33,   29,    0,    0,    0,
   34,    0,   72,   73,   35,   31,    0,    0,    0,    0,
    0,    0,   33,    0,    0,    0,   37,   34,   38,   75,
    0,   35,   39,    0,    0,   77,    0,   79,    0,   81,
   40,   41,  257,   37,   42,   38,    0,    0,    0,   39,
    0,   87,    0,    0,   88,   89,    0,   40,   41,    0,
    0,   42,    0,    0,  322,    0,    0,    0,    0,   90,
   91,   92,   93,  303,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   96,    0,    0,    0,    0,
    0,   98,   99,  100,  101,    0,    0,    0,  102,    0,
  103,    0,    0,    0,    0,    0,  104,  105,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  635,    0,    0,
    0,  106,  304,  108,  109,  635,  635,    0,  635,    0,
    0,  635,  635,    0,    0,    0,  635,  635,  635,  355,
  635,    0,    0,   25,    0,   26,  635,    0,   27,  635,
    0,    0,    0,   28,    0,    0,  635,   29,    0,    0,
    0,  635,    0,  635,  635,  635,   31,    0,    0,    0,
    0,    0,    0,   33,    0,    0,    0,  635,   34,  635,
  635,    0,   35,  635,    0,    0,  635,    0,  635,    0,
  635,  635,  635,  635,   37,  635,   38,    0,    0,    0,
   39,    0,  635,    0,    0,  635,  635,    0,   40,   41,
    0,    0,   42,    0,    0,  515,    0,    0,    0,    0,
  635,  635,  635,  635,  635,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  635,    0,    0,    0,
    0,    0,  635,  635,  635,  635,    0,    0,    0,  635,
    0,  635,    0,    0,    0,    0,    0,  635,  635,    0,
    0,  204,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  361,    0,    0,  496,    0,
    0,    0,  635,  635,  635,  635,   57,   25,    0,   26,
    0,    0,   27,  256,    0,    0,    0,   28,   62,   63,
  355,   29,    0,  205,    0,    0,    0,   65,    0,    0,
   31,  361,    0,    0,    0,    0,    0,   33,    0,    0,
    0,    0,   34,    0,   72,   73,   35,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   37,    0,
   38,   75,    0,    0,   39,    0,    0,   77,    0,   79,
    0,   81,   40,   41,  257,    0,   42,  206,  207,  208,
  209,    0,  210,  211,  212,  213,  214,  215,  216,  217,
    0,    0,  218,  219,  220,  221,  222,  223,  224,  225,
    0,   90,   91,   92,  258,    0,    0,    0,  361,  361,
  361,  361,  767,    0,    0,  361,  361,   96,    0,  361,
  361,  361,  361,  361,  361,  361,  361,  361,    0,  361,
  361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
  361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
  361,    0,    0,    0,    0,    0,    0,  361,    0,    0,
  361,   48,    0,  106,  497,   48,    0,   48,    0,    0,
   48,    0,   48,   48,    0,   48,    0,   48,    0,   48,
    0,   48,   48,   48,   48,    0,    0,   48,   48,    0,
    0,    0,    0,   48,    0,   48,   48,   48,    0,    0,
   48,    0,   48,    0,   48,    0,    0,   48,    0,   48,
   48,   48,   48,    0,    0,    0,   48,   48,   48,    0,
    0,   48,   48,   48,    0,    0,    0,    0,    0,    0,
   48,   48,    0,   48,   48,    0,   48,   48,   48,    0,
    0,    0,   48,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   48,    0,   48,    0,   48,    0,   48,    0,
   48,    0,   81,   48,    0,   48,   48,    0,   48,    0,
   48,   48,   48,    0,   48,   48,   48,   48,    0,    0,
   48,   48,    0,    0,    0,    0,   48,    0,   48,   48,
   48,    0,    0,   48,    0,   48,    0,   48,    0,    0,
   48,    0,   48,   48,   48,   48,    0,    0,    0,   48,
   48,   48,   48,    0,   48,   48,   48,    0,    0,    0,
    0,    0,    0,   48,   48,    0,   48,   48,    0,   48,
   48,   48,    0,    0,    0,   48,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   48,    0,   48,    0,   48,
    0,   48,    0,   48,    0,   82,   48,    0,   48,   48,
    0,   48,    0,   48,   48,   48,    0,   48,   48,   48,
   48,    0,    0,   48,   48,    0,    0,    0,    0,   48,
    0,   48,   48,   48,    0,    0,   48,    0,   48,    0,
   48,    0,    0,   48,    0,   48,   48,   48,   48,    0,
    0,    0,   48,   48,   48,   48,    0,   48,   48,   48,
    0,    0,    0,    0,    0,    0,   48,   48,    0,   48,
   48,    0,   48,   48,   48,    0,    0,    0,   48,   48,
    0,    0,    0,   48,    0,   48,    0,    0,   48,    0,
   48,   48,    0,   48,    0,   48,    0,   48,   48,   48,
   48,   48,   48,    0,    0,   48,   48,    0,  242,    0,
    0,   48,    0,   48,   48,   48,    0,    0,   48,    0,
   48,    0,   48,    0,    0,   48,    0,   48,   48,   48,
   48,    0,    0,    0,   48,   48,   48,    0,    0,   48,
   48,   48,    0,    0,    0,    0,    0,    0,   48,   48,
    0,   48,   48,    0,   48,   48,   48,    0,   48,    0,
   48,   48,    0,    0,    0,   48,    0,   48,    0,    0,
   48,    0,   48,   48,    0,   48,    0,   48,    0,   48,
   48,   48,   48,   48,   48,    0,    0,   48,   48,    0,
  243,    0,    0,   48,    0,   48,   48,   48,    0,    0,
   48,    0,   48,  361,   48,    0,    0,   48,    0,   48,
   48,   48,   48,    0,    0,    0,   48,   48,   48,    0,
    0,   48,   48,   48,    0,    0,  361,    0,    0,    0,
   48,   48,    0,   48,   48,    0,   48,   48,   48,  361,
   48,  382,   48,    0,  361,    0,    0,  361,    0,  361,
    0,  361,  361,  361,  361,    0,    0,    0,    0,  361,
    0,    0,   48,  361,  382,    0,    0,  361,    0,    0,
    0,    0,    0,    0,    0,  361,    0,  382,  361,    0,
  361,    0,  382,    0,    0,  259,    0,  382,    0,  382,
  382,  382,  382,    0,    0,    0,    0,  382,    0,  361,
    0,  382,    0,    0,  361,  382,    0,    0,    0,    0,
    0,    0,    0,  382,    0,  361,  382,  293,  382,  361,
    0,    0,   48,   57,   25,    0,   26,    0,    0,   27,
  256,    0,  361,    0,   28,   62,   63,    0,   29,    0,
    0,    0,  382,    0,   65,    0,    0,   31,    0,    0,
    0,    0,    0,    0,   33,    0,    0,    0,    0,   34,
    0,   72,   73,   35,  361,  718,    0,    0,    0,    0,
    0,    0,  719,    0,    0,   37,    0,   38,   75,    0,
    0,   39,    0,    0,   77,    0,   79,    0,   81,   40,
   41,  257,    0,   42,    0,    0,    0,    0,    0,    0,
  720,    0,  382,   88,   89,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   90,   91,
   92,   93,   94,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   96,  981,    0,  721,    0,    0,
   98,   99,  100,  101,    0,    0,    0,  102,    0,  103,
    0,    0,    0,    0,    0,  104,  105,    0,    0,    0,
    0,    0,    0,   57,   25,    0,   26,    0,    0,   27,
  256,    0,    0,    0,   28,   62,   63,    0,   29,    0,
  106,  107,  108,  109,   65,    0,    0,   31,    0,    0,
    0,    0,    0,    0,   33,    0,    0,    0,    0,   34,
    0,   72,   73,   35,    0,  718,    0,    0,    0,    0,
    0,    0,  719,    0,    0,   37,    0,   38,   75,    0,
    0,   39,    0,    0,   77,    0,   79,    0,   81,   40,
   41,  257,    0,   42,    0,    0,    0,    0,    0,    0,
  720,    0,    0,   88,   89,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   90,   91,
   92,   93,   94,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   96,    0,    0,  721,    0,    0,
   98,   99,  100,  101,    0,    0,    0,  102,    0,  103,
    0,    0,    0,    0,    0,  104,  105,    0,    0,    0,
    0,    0,    0,   57,   25,    0,   26,    0,    0,   27,
  256,    0,    0,    0,   28,   62,   63,    0,   29,    0,
  106,  107,  108,  109,   65,    0,    0,   31,    0,    0,
    0,    0,    0,    0,   33,    0,    0,    0,    0,   34,
    0,   72,   73,   35,    0,  718,    0,    0,    0,    0,
    0,    0,  719,    0,    0,   37,    0,   38,   75,    0,
    0,   39,    0,    0,   77,    0,   79,    0,   81,   40,
   41,  257,    0,   42,    0,    0,    0,    0,    0,    0,
  720,    0,    0,   88,   89,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   90,   91,
   92,   93,   94,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   96,    0,    0,    0,    0,    0,
   98,   99,  100,  101,    0,    0,    0,  102,    0,  103,
    0,    0,    0,    0,    0,  104,  105,    0,    0,    0,
    0,    0,    0,   57,   25,    0,   26,    0,    0,   27,
  256,    0,    0,    0,   28,   62,   63,    0,   29,    0,
  106,  107,  108,  109,   65,    0,    0,   31,    0,    0,
    0,    0,    0,    0,   33,    0,    0,    0,    0,   34,
    0,   72,   73,   35,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   37,    0,   38,   75,    0,
    0,   39,    0,    0,   77,    0,   79,    0,   81,   40,
   41,  257,    0,   42,    0,    0,   85,    0,    0,    0,
   87,    0,    0,   88,   89,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   90,   91,
   92,   93,  303,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   96,    0,    0,    0,    0,    0,
   98,   99,  100,  101,    0,    0,    0,  102,    0,  103,
    0,    0,    0,    0,    0,  104,  105,    0,    0,    0,
    0,    0,    0,   57,   25,    0,   26,    0,    0,   27,
  256,    0,    0,    0,   28,   62,   63,    0,   29,    0,
  106,  304,  108,  109,   65,    0,    0,   31,    0,    0,
    0,    0,    0,    0,   33,    0,    0,    0,    0,   34,
    0,   72,   73,   35,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   37,    0,   38,   75,    0,
    0,   39,    0,    0,   77,    0,   79,    0,   81,   40,
   41,  257,    0,   42,    0,    0,    0,    0,    0,    0,
   87,    0,    0,   88,   89,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   90,   91,
   92,   93,  303,    0,    0,    0,    0,    0,    0,    0,
    0,  855,    0,    0,   96,    0,    0,    0,    0,    0,
   98,   99,  100,  101,    0,    0,    0,  102,    0,  103,
    0,    0,    0,    0,    0,  104,  105,    0,    0,    0,
    0,    0,    0,   57,   25,    0,   26,    0,    0,   27,
  256,    0,    0,    0,   28,   62,   63,    0,   29,    0,
  106,  304,  108,  109,   65,    0,    0,   31,    0,    0,
    0,    0,    0,    0,   33,    0,    0,    0,    0,   34,
    0,   72,   73,   35,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   37,    0,   38,   75,    0,
    0,   39,    0,    0,   77,    0,   79,    0,   81,   40,
   41,  257,    0,   42,    0,    0,    0,    0,    0,    0,
   87,    0,    0,   88,   89,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   90,   91,
   92,   93,  303,    0,    0,    0,    0,    0,    0,    0,
  513,    0,    0,    0,   96,    0,    0,    0,    0,    0,
   98,   99,  100,  101,    0,    0,    0,  102,    0,  103,
    0,    0,    0,    0,    0,  104,  105,    0,    0,    0,
    0,    0,    0,   57,   25,    0,   26,    0,    0,   27,
  256,    0,    0,    0,   28,   62,   63,    0,   29,    0,
  106,  304,  108,  109,   65,    0,    0,   31,    0,    0,
    0,    0,    0,    0,   33,    0,    0,    0,    0,   34,
    0,   72,   73,   35,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   37,    0,   38,   75,    0,
    0,   39,    0,    0,   77,    0,   79,    0,   81,   40,
   41,  257,    0,   42,    0,    0,    0,    0,    0,    0,
   87,    0,    0,   88,   89,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   90,   91,
   92,   93,  303,    0,    0,    0,    0,    0,    0,    0,
  507,    0,    0,    0,   96,    0,    0,    0,    0,    0,
   98,   99,  100,  101,    0,    0,    0,  102,    0,  103,
    0,    0,    0,    0,    0,  104,  105,    0,    0,    0,
    0,    0,    0,   57,   25,    0,   26,    0,    0,   27,
  256,    0,    0,    0,   28,   62,   63,    0,   29,    0,
  106,  304,  108,  109,   65,    0,    0,   31,    0,    0,
    0,    0,    0,    0,   33,    0,    0,    0,    0,   34,
    0,   72,   73,   35,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   37,    0,   38,   75,    0,
    0,   39,    0,    0,   77,    0,   79,    0,   81,   40,
   41,  257,    0,   42,    0,    0,    0,    0,    0,    0,
   87,    0,    0,   88,   89,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   90,   91,
   92,   93,  303,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   96,    0,    0,    0,    0,    0,
   98,   99,  100,  101,    0,    0,    0,  102,    0,  103,
    0,    0,    0,    0,    0,  104,  105,    0,    0,    0,
    0,    0,    0,   57,   25,    0,   26,    0,    0,   27,
  256,    0,    0,    0,   28,   62,   63,    0,   29,    0,
  106,  304,  108,  109,   65,    0,    0,   31,    0,    0,
    0,    0,    0,    0,   33,    0,    0,    0,    0,   34,
    0,   72,   73,   35,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   37,    0,   38,   75,    0,
    0,   39,    0,    0,   77,    0,   79,    0,   81,   40,
   41,  257,    0,   42,    0,    0,    0,    0,    0,    0,
   87,    0,    0,   88,   89,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   90,   91,
   92,   93,   94,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   96,    0,    0,    0,    0,    0,
   98,   99,  100,  101,    0,    0,    0,  102,    0,  103,
    0,    0,    0,    0,    0,  104,  105,    0,    0,    0,
    0,    0,    0,   57,   25,    0,   26,    0,    0,   27,
  256,    0,    0,    0,   28,   62,   63,    0,   29,    0,
  106,  107,  108,  109,   65,    0,    0,   31,    0,    0,
    0,    0,    0,    0,   33,    0,    0,    0,    0,   34,
    0,   72,   73,   35,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   37,    0,   38,   75,    0,
    0,   39,    0,    0,   77,    0,   79,    0,   81,   40,
   41,  257,    0,   42,    0,    0,    0,    0,    0,    0,
   87,    0,    0,   88,   89,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   90,   91,
   92,   93,   94,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   96,    0,    0,    0,    0,    0,
   98,   99,  100,  101,    0,    0,    0,  102,    0,  103,
    0,    0,    0,    0,    0,  104,  105,    0,    0,    0,
    0,    0,    0,   78,   78,    0,   78,    0,    0,   78,
   78,    0,    0,    0,   78,   78,   78,    0,   78,    0,
  106, 1017,  108,  109,   78,    0,    0,   78,    0,    0,
    0,    0,    0,    0,   78,    0,    0,    0,    0,   78,
    0,   78,   78,   78,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   78,    0,   78,   78,    0,
    0,   78,    0,    0,   78,    0,   78,    0,   78,   78,
   78,   78,    0,   78,    0,    0,    0,    0,    0,    0,
   78,    0,    0,   78,   78,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   78,   78,
   78,   78,   78,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   78,    0,    0,    0,    0,    0,
   78,   78,   78,   78,    0,    0,    0,   78,    0,   78,
    0,    0,    0,    0,    0,   78,   78,    0,    0,    0,
    0,    0,    0,  152,  152,    0,  152,    0,    0,  152,
  152,    0,    0,    0,  152,  152,  152,    0,  152,    0,
   78,   78,   78,   78,  152,    0,    0,  152,    0,    0,
    0,    0,    0,    0,  152,    0,    0,    0,    0,  152,
    0,  152,  152,  152,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  152,    0,  152,  152,    0,
    0,  152,    0,    0,  152,    0,  152,    0,  152,  152,
  152,  152,    0,  152,    0,    0,    0,    0,    0,    0,
  152,    0,    0,  152,  152,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  152,  152,
  152,  152,  152,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  152,    0,    0,    0,    0,    0,
  152,  152,  152,  152,    0,    0,    0,  152,    0,  152,
    0,    0,    0,    0,    0,  152,  152,    0,    0,    0,
    0,    0,    0,   57,   25,    0,   26,    0,    0,   27,
  256,    0,    0,    0,   28,   62,   63,    0,   29,    0,
  152,  152,  152,  152,   65,    0,    0,   31,    0,    0,
    0,    0,    0,    0,   33,    0,    0,    0,    0,   34,
    0,   72,   73,   35,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   37,    0,   38,   75,    0,
    0,   39,    0,    0,   77,    0,   79,    0,   81,   40,
   41,  257,    0,   42,    0,    0,    0,    0,    0,    0,
   25,    0,   26,    0,    0,   27,    0, 1198,    0,    0,
   28,    0,    0,    0,   29,    0,    0,    0,   90,   91,
   92,  258,  303,   31,    0,    0,    0,    0,    0,    0,
   33,    0,    0,    0,   96,   34,    0, 1199,    0,   35,
   98,   99,  100,  101,    0,    0,    0,  102,    0,  103,
    0,   37,    0,   38,    0,  104,  105,   39, 1200,    0,
    0,    0,    0,    0,    0,   40,   41,    0,    0,   42,
    0,    0,  322,    0,    0,  668,    0,  668,    0,  668,
  106,  259,  668,  109,  668,  668,    0,  668,    0,  668,
    0,  668,    0,  668,  668,  668,    0,    0,    0,  668,
  668,    0,    0,    0,    0,  668,    0,  668,  668,    0,
    0,    0,  668,    0,    0,    0,  668,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  668,  668,    0,
  668,    0,    0,    0,  668,  668,    0,    0,    0,    0,
    0,    0,  668,  668,    0,    0,  668,    0,    0,  668,
    0,    0,   57,   25,  668,   26,    0,  355,   27,  256,
    0,    0,    0,   28,   62,   63,    0,   29,    0,    0,
    0,    0,    0,   65,    0,    0,   31,    0,    0,    0,
  668,  668,    0,   33,    0,    0,    0,    0,   34,    0,
   72,   73,   35,  668,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   37,    0,   38,   75,    0,    0,
   39,    0,    0,   77,    0,   79,    0,   81,   40,   41,
  257,    0,   42,    0,    0,   85,    0,    0,    0,    0,
    0,    0,    0,    0,  668,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   90,   91,   92,
  258,    0,    0,    0,  667,    0,  667,    0,    0,  667,
    0,  667,  667,   96,  667,    0,  667,    0,  667,    0,
  667,  667,  667,    0,    0,    0,  667,  667,    0,    0,
    0,    0,  667,    0,  667,  667,    0,    0,    0,  667,
    0,    0,    0,  667,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  667,    0,  667,    0,  106,
  259,  667,  667,    0,    0,    0,    0,    0,    0,  667,
  667,    0,  667,  667,  667,    0,  667,  667,    0,  667,
  667,  667,  667,    0,  667,    0,  667,    0,  667,  667,
  667,    0,    0,    0,  667,  667,    0,    0,    0,    0,
  667,    0,  667,  667,    0,    0,    0,  667,    0,    0,
    0,  667,    0,    0,    0,    0,    0,    0,    0,    0,
  667,    0,    0,  667,    0,  667,    0,    0,    0,  667,
  667,    0,    0,    0,    0,    0,    0,  667,  667,    0,
   25,  667,   26,    0,  667,   27,    0,    0, 1267,  667,
   28,    0,  665,    0,   29,    0,  666, 1268, 1269,    0,
    0,  667, 1270,   31,    0,    0,    0,    0, 1271,    0,
   33,    0,    0,    0,    0,   34,    0,    0,    0,   35,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   37,    0,   38,    0,    0,    0,   39,    0,    0,
    0,    0,    0,    0,    0,   40,   41,    0,   25,   42,
   26,    0, 1272,   27,    0,    0, 1267, 1273,   28,    0,
  665,    0,   29,    0,  666, 1268, 1269,    0,    0,  667,
 1270,   31,    0,    0,    0,    0, 1271,    0,   33,    0,
    0,    0,    0,   34,    0,    0,    0,   35,   48,    0,
   48,    0,    0,   48,    0,    0, 1274,    0,   48,   37,
    0,   38,   48,    0,    0,   39,    0,    0,    0,    0,
    0,   48,    0,   40,   41,    0,    0,   42,   48,    0,
 1272,    0,    0,   48,    0, 1273,    0,   48,   48,   48,
   48,   48,    0,   48,    0,    0,   48, 1275,   48,   48,
    0,   48,   48,    0,    0,   48,    0,    0,   48,    0,
    0,   48,    0,   48,   48,    0,    0,   48,   48,    0,
   48,    0,    0,   48,    0,    0,    0,   48,    0,   48,
    0,   48,    0,    0,    0,    0,   48,    0,    0,   48,
    0,   48,    0,    0,    0,   48,    0,    0,   48,    0,
    0,    0,    0,   48,   48,    0,    0,   48,    0,  183,
   48,   48,    0,   48,    0, 1275,   48,    0,    0,    0,
    0,   48,    0,    0,    0,   48,    0,    0,    0,    0,
    0,    0,    0,    0,   48,    0,    0,    0,    0,    0,
    0,   48,    0,   25,    0,   26,   48,  183,   27,    0,
   48,    0,   48,   28,   48,   48,    0,   29,    0,   48,
    0,    0,   48,    0,   48,    0,   31,    0,   48,    0,
    0,   48,    0,   33,    0,    0,   48,   48,   34,    0,
   48,    0,   35,   48,  564,    0,    0,  121,    0,  121,
    0,  565,  121,    0,   37,   48,   38,  121,    0,    0,
   39,  121,    0,  566,    0,    0,    0,    0,   40,   41,
  121,    0,   42,    0,    0,  567,    0,  121,    0,    0,
    0,    0,  121,    0,    0,    0,  121,   25,    0,   26,
    0,    0,   27,    0,    0,    0,    0,   28,  121,    0,
  121,   29,    0,    0,  121,   30,    0,    0,    0,    0,
   31,    0,  121,  121,    0,   32,  121,   33,    0,  121,
    0,    0,   34,    0,    0,    0,   35,   36,   48,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   37,    0,
   38,    0,    0,    0,   39,    0,    0,    0,    0,  121,
    0,    0,   40,   41,  121,  121,   42,   48,    0,   48,
  568,    0,   48,    0,    0,    0,    0,   48,   48,    0,
   48,   48,    0,   48,    0,    0,    0,    0,   48,    0,
   48,    0,   48,    0,    0,    0,    0,   48,    0,    0,
    0,   48,   48,    0,    0,    0,   48,    0,   48,    0,
    0,    0,    0,   48,  121,    0,    0,   48,   48,    0,
   48,    0,    0,    0,   48,    0,    0,    0,    0,   48,
    0,   48,   48,   48,    0,   48,   48,    0,    0,   48,
    0,    0,    0,   48,   48,    0,    0,   48,    0,    0,
   48,    0,    0,   25,   43,   26,    0,    0,   27,    0,
    0,    0,    0,   28,    0,    0,    0,   29,    0,   48,
    0,    0,    0,    0,  113,    0,   31,   25,    0,   26,
   48,    0,   27,   33,    0,  114,    0,   28,   34,    0,
    0,   29,   35,    0,    0,    0,    0,    0,    0,    0,
   31,    0,    0,    0,   37,    0,   38,   33,    0,    0,
   39,    0,   34,    0,    0,    0,   35,    0,   40,   41,
    0,    0,   42,    0,   48,  567,    0,   25,   37,   26,
   38,    0,   27,    0,   39,   48,    0,   28,    0,    0,
    0,   29,   40,   41,    0,    0,   42,    0,    0,  743,
   31,  516,    0,  516,    0,    0,  516,   33,    0,    0,
    0,  516,   34,    0,    0,  516,   35,    0,    0,    0,
    0,    0,    0,    0,  516,    0,    0,    0,   37,    0,
   38,  516,    0,    0,   39,    0,  516,    0,    0,    0,
  516,    0,   40,   41,    0,    0,   42,    0,    0, 1288,
    0,  203,  516,  203,  516,    0,  203,    0,  516,    0,
  355,  203,    0,    0,    0,  203,  516,  516,    0,    0,
  516,    0,    0,  516,  203,  202,    0,  202,    0,    0,
  202,  203,    0,    0,  355,  202,  203,    0,    0,  202,
  203,    0,    0,    0,    0,    0,    0,    0,  202,    0,
    0,    0,  203,    0,  203,  202,    0,    0,  203,    0,
  202,    0,    0,    0,  202,    0,  203,  203,    0,    0,
  203,    0,    0,  203,    0,  212,  202,  212,  202,    0,
  212,    0,  202,    0,  355,  212,    0,    0,    0,  212,
  202,  202,    0,    0,  202,    0,    0,  202,  212,  168,
    0,  168,    0,    0,  168,  212,    0,    0,  516,  168,
  212,    0,    0,  168,  212,    0,    0,    0,    0,    0,
    0,    0,  168,    0,    0,    0,  212,    0,  212,  168,
    0,    0,  212,    0,  168,    0,    0,   35,  168,    0,
  212,  212,    0,    0,  212,    0,    0,  212,   35,    0,
  168,    0,  168,   35,    0,    0,  168,   35,  203,    0,
   35,    0,    0,    0,  168,  168,    0,    0,  168,    0,
    0,  168,   35,   35,    0,    0,    0,   35,   35,    0,
   33,    0,  202,   35,    0,   35,   35,   35,   35,    0,
    0,   33,    0,   35,    0,    0,   33,   35,    0,   35,
   33,    0,    0,   33,    0,    0,    0,    0,    0,   35,
    0,   35,   35,    0,   35,   33,   33,    0,   35,    0,
   33,   33,   28,    0,   28,    0,   33,    0,   33,   33,
   33,   33,  212,    0,    0,    0,   33,    0,   35,    0,
   33,    0,   33,    0,    0,   28,    0,    0,   35,   35,
    0,    0,   33,    0,    0,   33,  168,   33,   28,    0,
    0,   33,    0,   28,    0,    0,    0,    0,   28,    0,
   28,   28,   28,   28,    0,    0,    0,    0,   28,    0,
    0,   33,   28,    0,    0,    0,    0,    0,    0,   48,
    0,   33,   33,    0,   28,    0,    0,   28,    0,   28,
   48,    0,    0,    0,    0,   48,    0,    0,    0,   48,
    0,    0,   48,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   28,   48,   48,    0,    0,    0,   48,
   48,    0,   48,   28,   28,   48,    0,   48,   48,   48,
   48,    0,    0,   48,    0,   48,    0,    0,   48,   48,
    0,   48,   48,    0,    0,   48,    0,    0,    0,    0,
    0,   48,    0,    0,   48,    0,   48,   48,   48,    0,
   48,    0,   48,   48,   48,    0,    0,    0,   48,    0,
   48,   48,   48,   48,    0,    0,    0,    0,   48,    0,
   48,    0,   48,    0,   48,    0,    0,   48,    0,    0,
   37,    0,    0,    0,   48,    0,    0,   48,    0,   48,
   48,    0,   48,   48,    0,   48,    0,    0,    0,    0,
   48,    0,   48,   48,   48,   48,    0,    0,    0,    0,
   48,    0,    0,   48,   48,   48,    0,    0,    0,    0,
    0,    0,    0,   38,    0,    0,   48,    0,   48,   48,
   48,   48,   48,   48,    0,    0,    0,    0,   48,    0,
   48,   48,   48,   48,    0,    0,    0,    0,   48,    0,
    0,    0,   48,   48,    0,   48,    0,    0,    0,    0,
   48,   48,   48,    0,   48,  224,   48,   48,    0,   48,
    0,   48,    0,    0,    0,    0,   48,    0,   48,   48,
   48,   48,    0,   48,    0,    0,   48,    0,    0,    0,
   48,    0,    0,   48,    0,    0,   48,    0,  451,   48,
   48,   48,   48,  226,    0,   48,   48,   48,   48,   48,
   48,   48,    0,    0,    0,    0,   48,    0,    0,    0,
   48,  452,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   48,   48,    0,  453,   48,   48,   48,   48,  455,
    0,  327,    0,    0,  456,    0,  457,  458,  459,  460,
    0,    0,    0,    0,  461,    0,    0,    0,  462,   48,
    0,   48,    0,    0,    0,    0,  451,   48,   48,    0,
  463,    0,   48,  464,    0,  465,    0,   48,    0,    0,
    0,    0,   48,    0,   48,   48,   48,   48,    0,  452,
   48,    0,   48,    0,    0,    0,   48,    0,  451,  466,
    0,    0,  453, 1247,    0,    0,  454,  455,   48,    0,
    0,   48,  456,   48,  457,  458,  459,  460,    0,    0,
    0,  452,  461,    0,    0,    0,  462,    0,    0,    0,
    0,    0,    0,    0,  453,    0,    0,   48,  463,  455,
    0,  464,    0,  465,  456,    0,  457,  458,  459,  460,
    0,    0,    0,    0,  461,    0,    0,    0,  462,    0,
    0,    0,    0,    0,    0,    0,    0,  466,    0,    0,
  463,    0,    0,  464,    0,  465,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  466,
  };
  protected static  short [] yyCheck = {            17,
    4,   17,  302,   17,   17,  191,  586,  301,  513,  235,
   52,   18,  193,  250,   20,    6,  291,  468,  190,  665,
   60,   85,  487,  159,  553,  332,  321,   17,   69,  339,
  354,   60,  298,  354,  906,  734,  699,  700,    0,  764,
  570,   78,  300,   88,   89,   59, 1085,   88,   89,  578,
  114,  114,   93,  117,  117,  237,   74,  256, 1235,  256,
   78, 1189, 1190,   17,  109,  256,   80,  256,   82,  327,
   60,  268,  268,  256,   64,  358,  256,  911,   96, 1206,
  256, 1209,  256,  282, 1122, 1123,  256,  335,  256,  752,
  325,  754,   48, 1167,  256,  256,  256,  268, 1225,  372,
   17,  325,  363,  256,  376,   17,  256, 1235,  256,  268,
 1238, 1185,  256,  378,  644,  314,   94,  276,  380,  372,
   98,   99,  100,  101,  102,  103,  104,  105,  256,  375,
 1168,  256,  369,  174,   17,   17,  349,  350,  264,  294,
  256,  159,  323,  159,  373,  159,  159,   17,  277,  191,
  422,  306,  395,  411,   17,  420,  385,  202,  203,  339,
  433,  422,   17,   17,  344,  341,  346,   17,   17,  159,
  256,  433,  352,  353,  355,  418,  372,  339,  424,  360,
  433, 1080,  344,  256,  346,  433, 1291,  422, 1293,  305,
  352,  353,  376,  235,  378,  257,  701,  373,  422,  325,
  507, 1306,  363,  527,  363,  159,  432, 1281, 1042,  250,
  358,  385, 1286,  374,  339,  376,  510,  378,  256,  264,
  433,  262, 1327,  422,    0,  549,  379,  371,  549,  426,
  426,  422,  250,  422,  363,  385,  380,  255,    0,  422,
  231, 1315,  159,  553, 1252,  290,  570,  159,  288,  433,
  378,  433,  422,  433,  422,  426,  320,  438,  298,  288,
  324,  422,  422,  422,  309,  329,  329,  422,  578, 1446,
  226,  433, 1400,  291,  999,  372,  159,  159,  296,  297,
  428,  429,  430,  431,  256,  326, 1413,  373,  317,  159,
  331,  472,  310,  422,  423,  257,  159,  315,  288,  317,
  373,  357,  316,  321,  159,  159,  351,  970,  838,  159,
  159,  262,  294, 1440,  363,  333,  334, 1016, 1446,  256,
  644,  358,  256,  339,  645,  303,  339,  317,  369, 1456,
  263, 1458,  256,  371,  390,  373,  433,  375, 1063,  857,
  358,  665, 1447,  388,  389,  256,  256,  298,  341,  339,
  372,  369,  335,  418,  332,  873,  374,  375,  376,  377,
  378,  379,  380,  381,  382,  383,  384,  432, 1407,  885,
  875,  416,  417,  422,  422,  416,  417,  418, 1386,  269,
  373,  363,  315,  848,  256,  372,  424,  568,  406,  427,
  432,  372,  687,  372,  305,  373,  286, 1405, 1270,  580,
  442,  582,  374,  584,  349,  350,  378,  385,  386,  387,
  363,  433,  390,  391,  392,  393,  394,  395,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,  434,  294,
 1329,  382,  383, 1096,  256,  372,  673,  703,  372, 1477,
  422,  378,  448,  422,  378,  486,  433,  488, 1486,  373,
  349,  350,  433,  777,  364,  636,  777,  962,  487,  266,
  257, 1360, 1361,  373, 1363, 1128, 1129,  339,  482,  422,
  511,  363, 1135, 1511,  655, 1374,  374,  993,  266,  995,
  378,  257, 1381,  439,  440, 1384,  527,  376,  433,  445,
  531,  509,  357,  511,  256,  513,  272,  487,  363,  371,
 1399,  277, 1540,  380,  256,  281,  263,  314,  373,  523,
  524,  376,  377,   20,  838,  343,  837,  339,  277,  537,
  296,  527,  281,  294,  542,  390,  314,   21,  569,  507,
  422, 1430, 1442, 1443,  433,  306,  376,  553,  378,  376,
  553,  835,  376,  378,  433,  586,  560,  323,  256,  371,
  376,  363,  847,  398,  399,  862,  433,  422,  315,   53,
  425,  373,  578,  553,  372,  578,  342,  395,  586,  363,
  373,  376,  379,  378,  377,  380,  712,  339, 1189,  373,
 1045,   88,   89,  342,  625,  420,  627,  339,  578,  395,
  418,  379,  344,  433,  346, 1505,  433,  575, 1209,  433,
  352,  353,  109, 1132,  432,  623,  906,  433,  866,  371,
  422,  629,  418,  375,  422,  377,  378,  379,  380, 1518,
 1266,  371,  256,  385,  427,  375,  432, 1238,  422,  402,
  403,  339,  673,  272,  357,  269,  344,  874,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,  690,
  373,  371,  286,  376,  377,  673,  343,  296,  339,  375,
  380,  377, 1189,  703,  372,  272,  374,  390,  376,  687,
  378,  379,  380,  272,  424,  666,  377,  343,  696,  380,
  744,  305, 1209,  701,  323,  979,  394, 1189,  706,  296,
  371,  418, 1189,  738,  931,  202,  203,  296,  385,  380,
  718,  719,  425,  884,  305,  432,  747, 1209,  395,  699,
  700, 1238, 1209,  963,  759,  306,  323,  308,  272,  385,
  422,    6,  313,  277,  323,  433,  740,  281,  773,  395,
  432,  418,   17, 1189,  325,  776, 1238,  375,  756,  377,
  758, 1238,  296,  405,  306,  432,  996, 1189,  762,  380,
  764,  313,  418, 1209,  772,  417, 1402,  264,  396,  397,
 1189, 1189,  752,  804,  754,  371,  432, 1209,  373,  323,
  812,  789,  357,  791,  380,   60,  380, 1052,  416,   64,
 1209, 1209, 1238,  290,  802,  803,  424,  385,  342,  427,
 1100, 1085,  377,  372,  839,  302, 1238,  395,  385,  378,
  418,  419,  309,   88,   89,  390,  385,  380,  395, 1238,
 1238,  992,  371, 1088,  820,  833,  375,  835,  377,  378,
  418,  380, 1132,  375,  109,  422,  385,  371,  357,  847,
  871,  418,  850,  874,  825,  432,  380,  371,  879,  857,
  881, 1078, 1014,  256,  351,  432,  887,  354,  377,  867,
  390, 1126, 1162,  871,  371, 1306,  874,  875,  306,  339,
  419,  390,  373,  380,  344,  313,  346,  357,  909,  349,
  350,  374,  352,  353,  159,  378,  371,  325,  375,  390,
  391,  388,  389, 1388,  862,  380,  422,  377,  386,  387,
  931,  936,  371,  354,  355,  913,  371,  915,  378,  917,
  390,  380,  400,  401,  388,  380,  947,  374,  375,  416,
  417,  378,  376,  931,  378, 1141,  380,  202,  203,  357,
  383, 1196,  928,  339, 1248,  363,  404,  434,  344,  374,
  346, 1117, 1256,  378,  393,  373,  352,  353,  376,  377,
  378,  448, 1266,  389,  962, 1525, 1526,  938,  373,  940,
  261,  942,  390,  433,  377,  394, 1461,  380,  371,  378,
  373,  380,  375,  376, 1264,  378,  385,  380,  371,  375,
 1270,  377,  375,  284,  377,  378,  377,  380,  373,  264,
  970,  376,  385,  374,  422,  999,  297,  378,  380,  374,
 1008,  302, 1010,  378, 1012, 1500,  307,  375,  309,  310,
  311,  312,  422,  288,  374,  290,  317,  419,  378,  422,
  321,  424,  422,  371,  427,  373,  419,  302,  256, 1023,
  527,  376,  333,  378,  309,  336,  374,  338,  376,  371,
  378,  277,  317,  375, 1052,  377,  378, 1078,  380,  390,
  391,  392,  549,  385,  376,  422,  378, 1065, 1066, 1063,
  378,  362,  380,  340,  339, 1073,  374,  374,  376,  376,
 1078,  378,  378,  570,  380,  371,  351, 1085,  380,  354,
 1088,  374, 1079,  376,  374, 1117,  376, 1119, 1402,  394,
  395,  396,  397,  374, 1100,  376,  376, 1100,  378, 1107,
  376,  374,  378,  376, 1275,  377, 1114,  374,  375, 1141,
  377,  378,  379,  388,  389,  374, 1096,  376, 1126,  380,
 1100,  422,  378, 1407,  380,  378, 1132,  380,  380, 1132,
 1138, 1139, 1303,  378,  378,  380,  380,  354,  355, 1171,
  380,  416,  417,  372,  373,  294, 1317,  644, 1128, 1129,
  368,  369, 1132, 1188,  294, 1135, 1162, 1189, 1190, 1162,
  349,  350,  376,  377,  343, 1336,  376, 1338,  665,  368,
  369, 1179, 1083, 1084,  398,  399,  380, 1209,  373,  392,
  393,  418, 1162,  422,  422,  379, 1194,  422, 1196,  376,
  376,   62,  380,  376,  256,   66,   67,   68,  376,   70,
   71,  372,  378, 1235,   75,   76, 1238,  376, 1239,  376,
 1245,   82,  487,   84,  376,   86,  376,  376,  294,  294,
   91,   92,  378,  376,  376,  376,  380,   60,  378,  294,
  294,  379, 1267, 1268,  356,  376,  378,  422,  385,  377,
  379,  738,  378,  376,  115,  294,  378, 1251, 1252,  378,
  385,  378,  527,  378,  380,  427,  433,  375,  256,  376,
 1295,   94,  759, 1298,  378,   98,   99,  100,  101,  102,
  103,  104,  105,  378,  549,  371,  773,  339,  553,  425,
  777,  376,  344,  377,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,  570,  376,  343,  294,  378,
  294,  378,  261,  578,  374,  371,  422, 1311,  375,  422,
  372,  379,  374, 1345,  376,  256,  378,  379,  380,  256,
  378,  256,  256,  820,  376,  284,  385,  280,  376,  256,
  371,  376,    0,  372,  343,  375,  380,  374,  297, 1371,
  378,  838,  839,  302,  380,  378, 1378,  376,  307,  380,
  309,  310,  311,  312,  380,  374,  315,  385,  317,  376,
  347,  351,  321, 1395,  427,  371,  256,  385, 1400,  644,
  385,  433,  256,  376,  333,  372,  376,  336,  347,  338,
 1388,  376, 1386, 1415, 1416,  378,  257,  379,  374,  260,
  665,  374,  371,  374,  379,  372,  376,  348,  422, 1407,
  378, 1405,  378,  362,  348,  380,  422,  339,  372,  906,
 1442, 1443,  379,  372, 1446,  371, 1424,  371,  356,  371,
  385,  422,  372,  380,  699,  700,  375,  339,  337,  300,
  378,  928,  344,  372,  346,  305,  372,  349,  350,  936,
  352,  353,  313,  376,  372,  371,  375,  339,  379,  422,
  422,  422,  344, 1461,  346,  288,  375,  349,  350,  373,
  352,  353,  422,  738,  365,  298,  378,  375,  371,  375,
  303,  375,  385, 1505,  261,  339,  422,  752,  380,  754,
  344,  375,  346,  376,  759,  349,  350,  375,  352,  353,
  377,  371, 1500,  375, 1525, 1526,  385,  284,  773,  373,
  375,  378,  777,  376, 1508, 1509,  371,  367,  377,  377,
  297, 1515, 1516,  372,  256,  302,  378, 1525, 1526,  380,
  307,  433,  309,  310,  311,  312,  378,  378,  376,  376,
  317,  422,  374,  376,  321,  380,  422,  422,  325,  380,
  373,  433,  376,  422,  380,  376,  333,  385,  371,  336,
  376,  338,  385,  386,  387,  372,  385,  390,  391,  374,
  376,  372,    0,  838,  839,  375,  339,  315,  263,  433,
  375,  344,  375,  346,  372,  362,  349,  350,    0,  352,
  353,  376,  376,  376,    0,  371,    0,  372,  380,  257,
  380,  380,  376,  261,  372,  263,  376,  265,  422,  267,
  376,  371,  270,  374,  272,  273,  380,  275,  372,  277,
  372,  279,  483,  281,  282,  283,  284,  376,  374,  287,
  288,  371,  380, 1120,  376,  293,  294,  295,  296,  297,
  376,  906,  300,  301,  302,  422,  304,  380,  306,  307,
  308,  309,  310,  311,  312,  313,  380,  315,  316,  317,
  318,  372,  523,  321,  322,  323,  422,  325,  380,  422,
  433,  936,  330,  331,  380,  333,  334,  372,  336,  337,
  338,  372,  376,  376,  342, 1172,  372,  371,  380,  372,
  371,  371,  380,  372,  315,  377,  375,  263,  377,  378,
   51, 1188,  380,  380,  362,  970,  380,  380,  366,  367,
  368,  369,  380,  380,    0,  380,   52,  396,  397,   12,
    5,  820,  928,  381,  256, 1078, 1078, 1238, 1209, 1451,
 1371, 1400, 1410,  265, 1467,  267, 1391,  416,  270, 1276,
 1427,  841,  679,  275,  841,  424,  837,  279,  427,  841,
 1293, 1516,  575, 1224, 1312, 1510,  288, 1420, 1245, 1416,
 1509, 1248, 1415,  295,  422, 1171, 1338,  812,  300, 1256,
  372, 1276,  304,  375, 1172,  377,  378, 1264,  871, 1266,
 1267, 1268,  527, 1270,  316,  862,  318,  874,  369, 1276,
  322,  706,  979,   72,  396,  397,  703,  335,  330,  331,
  673,  400,  334,  401, 1291,  337, 1293,  719, 1295,  402,
  404, 1298,  403,  405,  416,  549, 1155,  777, 1245, 1306,
 1162, 1100,  424, 1044,  159,  427, 1066,  525,  949,  257,
  964, 1096,  996,  261, 1057, 1100, 1045,  424, 1055,  889,
 1327,   -1,   -1,  817,  272, 1139, 1241,   -1,   -1,  277,
   -1,   -1,   -1,  281,  818, 1120,  284,   -1,   -1,   -1,
   -1,   -1,   -1, 1128, 1129,   -1,   -1, 1132,  296,  297,
 1135,   -1,   -1,  301,  302,   -1,  261,   -1,   -1,  307,
  703,  309,  310,  311,  312,   -1,    0,   -1,   -1,  317,
  422,   -1,   -1,  321,   -1,  323,   -1, 1162,   -1,  284,
   -1,   -1,   -1,   -1,   -1,  333,   -1, 1172,  336,   -1,
  338,   -1,  297,   -1,  342, 1402,   -1,  302,   -1,   -1,
  305,   -1,  307, 1188,  309,  310,  311,  312,   -1,   -1,
   -1,   -1,  317,   -1,  362,   -1,  321,   -1,   -1,   -1,
  325,   -1,   -1,   -1,  372,  373,   -1,   -1,  333,   -1,
   -1,  336,   -1,  338,   -1,   -1,   -1,   -1,   -1,   -1,
 1447,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  256,   -1,   -1,   -1,   -1,  261,  262,  362,   -1,   -1,
 1245,   -1,   -1, 1248,   -1,   -1,   -1,   -1,   -1,   -1,
   -1, 1256,   -1,   -1,   -1,   -1,   -1,   -1,  284, 1264,
   -1, 1266, 1267, 1268,   -1, 1270,   -1,   -1,  294,   -1,
   -1,  297,  298,   -1,   -1,   -1,  302,   -1,   -1,  305,
   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,
 1295,  317,   -1, 1298,   -1,  321,   -1,  422,   -1,  325,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,
  336,   -1,  338,  339,   -1,   -1,   -1,    0,  344,   -1,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,   -1,   -1,   -1,   -1,  362,  363,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  371,  372,   -1,  374,  375,
  376,  377,  378,  379,  380,   -1,  382,  383,   -1,  385,
  386,  387,  388,  389,  390,  391,  392,  393,  394,   -1,
  396,  397,  398,  399,  400,  401,  402,  403,  404,  405,
  406,  407,  408,  409,  410,  411,  412,  413,  414,  415,
  416,  417,   -1,   -1,  420,   -1,  422, 1402,  424,   -1,
   -1,  427,  256,  257,   -1,   -1,   -1,  433,   -1,   -1,
  264,  265,  266,  267,  268,   -1,  270,  271,   -1,  273,
  274,  275,  276,  277,  278,  279,  280,   -1,   -1,   -1,
   -1,  285,   -1,  287,  288,  289,  290,  291,  292,   -1,
   -1,  295,   -1,   -1,   -1,  299,  300,   -1,  302,  303,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  314,    0,  316,   -1,  318,  319,   -1,   -1,  322,   -1,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,   -1,  337,   -1,   -1,  340,  341,   -1,   -1,
  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  371,  372,   -1,
   -1,  375,   -1,  385,   -1,   -1,  380,  381,  382,  383,
  384,   -1,   -1,   -1,  388,   -1,  390,   -1,   -1,   -1,
   -1,   -1,  396,  397,  406,  407,  408,  409,  410,  411,
  412,  413,  414,  415,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  421,  422,  423,
  424,   -1,  426,  256,  257,   -1,   -1,   -1,   -1,  433,
   -1,  264,  265,  266,  267,  268,   -1,  270,  271,   -1,
  273,  274,  275,  276,  277,  278,  279,   -1,   -1,   -1,
   -1,   -1,  285,   -1,  287,  288,  289,  290,  291,  292,
   -1,    0,  295,   -1,   -1,   -1,  299,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  314,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,  324,  325,  326,  327,  328,  329,  330,  331,  332,
  333,  334,  335,   -1,  337,   -1,   -1,  340,  341,   -1,
   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,
  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  371,  372,
   -1,   -1,  375,   -1,   -1,   -1,   -1,  380,  381,  382,
  383,  384,   -1,   -1,   -1,  388,   -1,  390,   -1,   -1,
   -1,   -1,   -1,  396,  397,   -1,   -1,  256,   -1,   -1,
   -1,   -1,  261,  262,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  421,  422,
  423,  424,   -1,  426,   -1,  284,   -1,   -1,   -1,   -1,
  433,   -1,   -1,   -1,   -1,  294,   -1,   -1,  297,  298,
   -1,    0,   -1,  302,   -1,   -1,  305,   -1,  307,   -1,
  309,  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,
   -1,   -1,  321,   -1,   -1,   -1,  325,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,   -1,  338,
  339,   -1,   -1,   -1,   -1,  344,   -1,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,  357,   -1,
   -1,   -1,   -1,  362,  363,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  371,  372,  373,  374,  375,  376,  377,  378,
  379,  380,   -1,  382,  383,   -1,   -1,  386,  387,  388,
  389,  390,   -1,   -1,  393,  394,   -1,   -1,   -1,  398,
  399,  400,  401,  402,  403,  404,  405,  256,   -1,   -1,
   -1,   -1,  261,  262,   -1,   -1,   -1,   -1,  417,   -1,
   -1,  420,   -1,  422,   -1,  424,   -1,   -1,  427,   -1,
   -1,   -1,   -1,   -1,  433,  284,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  294,   -1,   -1,  297,  298,
   -1,    0,   -1,  302,   -1,   -1,  305,   -1,  307,   -1,
  309,  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,
   -1,   -1,  321,   -1,   -1,   -1,  325,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,   -1,  338,
  339,   -1,   -1,   -1,   -1,  344,   -1,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,   -1,
   -1,   -1,   -1,  362,  363,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  371,  372,  373,  374,  375,  376,   -1,  378,
  379,  380,   -1,  382,  383,   -1,   -1,  386,  387,  388,
  389,   -1,   -1,   -1,  393,  394,   -1,   -1,   -1,  398,
  399,  400,  401,  402,  403,  404,  405,  256,   -1,   -1,
   -1,   -1,  261,  262,   -1,   -1,   -1,   -1,  417,   -1,
   -1,  420,   -1,  422,   -1,  424,   -1,   -1,  427,   -1,
    0,   -1,   -1,   -1,  433,  284,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  294,   -1,   -1,  297,  298,
   -1,   -1,   -1,  302,   -1,   -1,  305,   -1,  307,   -1,
  309,  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,
   -1,   -1,  321,   -1,   -1,   -1,  325,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,   -1,  338,
  339,   -1,   -1,   -1,   -1,  344,   -1,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,   -1,
   -1,   -1,   -1,  362,  363,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  371,  372,  373,  374,  375,  376,   -1,  378,
  379,  380,   -1,  382,  383,   -1,   -1,  386,  387,  388,
  389,   -1,   -1,   -1,  393,  394,   -1,   -1,   -1,  398,
  399,  400,  401,  402,  403,  404,  405,  256,   -1,   -1,
   -1,   -1,  261,  262,   -1,   -1,   -1,   -1,  417,   -1,
   -1,  420,   -1,  422,   -1,  424,   -1,   -1,  427,   -1,
    0,   -1,   -1,   -1,  433,  284,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  294,   -1,   -1,  297,  298,
   -1,   -1,   -1,  302,   -1,   -1,  305,   -1,  307,   -1,
  309,  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,
   -1,   -1,  321,   -1,   -1,   -1,  325,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,   -1,  338,
  339,   -1,   -1,   -1,   -1,  344,   -1,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,   -1,
   -1,   -1,   -1,  362,  363,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  371,  372,   -1,  374,  375,  376,   -1,  378,
  379,  380,   -1,  382,  383,   -1,  256,  386,  387,  388,
  389,   -1,  262,   -1,  393,  394,   -1,   -1,   -1,  398,
  399,  400,  401,  402,  403,  404,  405,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  417,   -1,
   -1,  420,   -1,  422,  294,   -1,   -1,   -1,  298,   -1,
   -1,   -1,   -1,   -1,  433,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,    0,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  339,
   -1,   -1,   -1,   -1,  344,   -1,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,  357,   -1,   -1,
   -1,   -1,   -1,  363,  256,   -1,   -1,   -1,   -1,   -1,
   -1,  371,  372,  373,  374,  375,  376,  377,  378,  379,
  380,   -1,  382,  383,   -1,   -1,  386,  387,  388,  389,
  390,   -1,   -1,  393,  394,   -1,   -1,   -1,  398,  399,
  400,  401,  402,  403,  404,  405,  256,   -1,   -1,   -1,
    0,   -1,  262,   -1,   -1,   -1,   -1,  417,   -1,   -1,
  420,   -1,  422,   -1,  424,   -1,   -1,  427,   -1,   -1,
   -1,   -1,   -1,  433,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  294,   -1,   -1,  339,  298,   -1,
   -1,   -1,  344,   -1,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,    0,   -1,
  372,   -1,  374,   -1,  376,   -1,  378,  379,  380,  339,
   -1,   -1,   -1,   -1,  344,   -1,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
   -1,   -1,   -1,  363,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  371,  372,   -1,  374,  375,  376,   -1,  378,  379,
  380,   -1,  382,  383,   -1,   -1,  386,  387,  388,  389,
   -1,  433,   -1,  393,  394,    0,   -1,   -1,  398,  399,
  400,  401,  402,  403,  404,  405,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  417,  256,  257,
  420,   -1,  422,  261,   -1,   -1,   -1,  265,   -1,  267,
   -1,   -1,  270,  433,  272,  273,   -1,  275,    0,  277,
   -1,  279,   -1,  281,  282,  283,  284,   -1,   -1,  287,
  288,   -1,   -1,   -1,   -1,  293,   -1,  295,  296,  297,
   -1,   -1,  300,  301,  302,   -1,  304,   -1,   -1,  307,
   -1,  309,  310,  311,  312,   -1,   -1,   -1,  316,  317,
  318,    0,   -1,  321,  322,  323,   -1,   -1,   -1,   -1,
   -1,   -1,  330,  331,   -1,  333,  334,   -1,  336,  337,
  338,   -1,   -1,   -1,  342,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,
   -1,  261,   -1,   -1,  362,   -1,  364,   -1,  366,   -1,
   -1,   -1,  272,   -1,  372,  373,   -1,  277,   -1,   -1,
   -1,  281,   -1,  381,  284,   -1,   -1,   -1,    0,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  296,  297,   -1,   -1,
   -1,  301,  302,   -1,   -1,   -1,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,
   -1,  321,   -1,  323,  422,  257,   -1,   -1,   -1,  261,
   -1,    0,   -1,  333,   -1,  335,  336,   -1,  338,   -1,
  272,   -1,  342,   -1,   -1,  277,   -1,   -1,   -1,  281,
   -1,   -1,  284,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  362,   -1,  296,  297,   -1,   -1,   -1,  301,
  302,   -1,  372,  373,    0,  307,   -1,  309,  310,  311,
  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,   -1,  321,
   -1,  323,  257,   -1,   -1,   -1,  261,   -1,   -1,   -1,
   -1,  333,   -1,  335,  336,   -1,  338,  272,   -1,   -1,
  342,   -1,  277,   -1,   -1,   -1,  281,    0,   -1,  284,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  362,  296,  297,   -1,   -1,  257,  301,  302,   -1,  261,
   -1,  373,  307,   -1,  309,  310,  311,  312,   -1,   -1,
  272,   -1,  317,   -1,   -1,  277,  321,   -1,  323,  281,
   -1,   -1,  284,   -1,   -1,   -1,   -1,   -1,  333,   -1,
   -1,  336,   -1,  338,  296,  297,   -1,  342,  257,  301,
  302,   -1,  261,   -1,   -1,  307,   -1,  309,  310,  311,
  312,   -1,   -1,  272,   -1,  317,   -1,  362,  277,  321,
   -1,  323,  281,   -1,   -1,  284,   -1,  372,  373,   -1,
   -1,  333,   -1,   -1,  336,   -1,  338,  296,  297,   -1,
  342,   -1,  301,  302,   -1,   -1,   -1,   -1,  307,   -1,
  309,  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,
  362,   -1,  321,   -1,  323,  257,   -1,   -1,   -1,  261,
   -1,  373,   -1,   -1,  333,   -1,   -1,  336,   -1,  338,
  272,   -1,   -1,  342,   -1,  277,   -1,   -1,   -1,  281,
   -1,   -1,  284,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  362,  296,  297,   -1,   -1,  257,  301,
  302,   -1,  261,   -1,   -1,  307,   -1,  309,  310,  311,
  312,   -1,   -1,  272,   -1,  317,   -1,   -1,  277,  321,
   -1,  323,  281,   -1,   -1,  284,   -1,   -1,   -1,   -1,
   -1,  333,   -1,   -1,  336,   -1,  338,  296,  297,   -1,
  342,  257,  301,  302,   -1,  261,   -1,   -1,  307,   -1,
  309,  310,  311,  312,   -1,   -1,  272,   -1,  317,   -1,
  362,  277,  321,   -1,  323,  281,   -1,   -1,  284,   -1,
   -1,   -1,   -1,   -1,  333,   -1,   -1,  336,   -1,  338,
  296,  297,   -1,  342,  257,  301,  302,   -1,  261,   -1,
   -1,  307,   -1,  309,  310,  311,  312,   -1,   -1,  272,
   -1,  317,   -1,  362,  277,  321,   -1,  323,  281,   -1,
   -1,  284,   -1,   -1,   -1,   -1,   -1,  333,   -1,   -1,
  336,   -1,  338,  296,  297,   -1,  342,   -1,  301,  302,
   -1,   -1,   -1,   -1,  307,   -1,  309,  310,  311,  312,
   -1,   -1,   -1,   -1,  317,   -1,  362,   -1,  321,   -1,
  323,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  333,   -1,  256,  336,   -1,  338,   -1,   -1,   -1,  342,
  264,  265,  266,  267,   -1,   -1,  270,  271,   -1,  273,
  274,  275,  276,  277,  278,  279,   -1,   -1,   -1,  362,
   -1,  285,   -1,  287,  288,  289,  290,  291,  292,   -1,
   -1,  295,   -1,   -1,   -1,  299,  300,   -1,  302,  303,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  314,   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,
  324,  325,  326,  327,  328,  329,  330,  331,  332,  333,
  334,  335,   -1,  337,   -1,   -1,  340,  341,   -1,   -1,
  344,  345,   -1,  256,   -1,   -1,   -1,   -1,   -1,  262,
   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  371,   -1,   -1,
   -1,  375,   -1,   -1,   -1,   -1,  380,  381,  382,  383,
  384,   -1,   -1,   -1,  388,  298,  390,   -1,   -1,   -1,
   -1,   -1,  396,  397,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,
   -1,   -1,   -1,   -1,   -1,  262,   -1,  421,  422,  423,
  424,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,  433,
   -1,  344,   -1,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,  357,   -1,   -1,   -1,   -1,   -1,
  363,  298,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  372,
  373,  374,  375,  376,  377,  378,  379,  380,   -1,  382,
  383,   -1,  385,  386,  387,  388,  389,  390,  391,  392,
  393,  394,   -1,  396,  397,  398,  399,  400,  401,  402,
  403,  404,  405,  406,  407,  408,  409,  410,  411,  412,
  413,  414,  415,  416,  417,   -1,  256,   -1,   -1,  422,
   -1,  424,  262,   -1,  427,   -1,   -1,   -1,   -1,   -1,
  433,   -1,   -1,   -1,   -1,  372,   -1,   -1,  375,   -1,
  377,  378,   -1,   -1,   -1,  382,  383,   -1,   -1,  386,
  387,  388,  389,  390,  391,  392,  393,  394,  298,  396,
  397,  398,  399,  400,  401,  402,  403,  404,  405,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  416,
  417,   -1,   -1,   -1,   -1,   -1,   -1,  424,   -1,   -1,
  427,   -1,   -1,   -1,   -1,   -1,  433,   -1,   -1,  339,
   -1,   -1,   -1,   -1,  344,   -1,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,  256,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  371,  372,  373,  374,  375,  376,  377,  378,  379,
  380,   -1,  382,  383,   -1,  385,  386,  387,  388,  389,
  390,  391,  392,  393,  394,   -1,  396,  397,  398,  399,
  400,  401,  402,  403,  404,  405,  406,  407,  408,  409,
  410,  411,  412,  413,  414,  415,  416,  417,   -1,  256,
   -1,   -1,   -1,   -1,  424,  262,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  433,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,   -1,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
   -1,  298,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  372,   -1,  374,   -1,  376,
   -1,  378,  379,  380,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  394,   -1,   -1,
   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,  405,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
  417,   -1,  256,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  371,  372,  433,  374,  375,  376,
  377,  378,  379,  380,   -1,  382,  383,   -1,  385,  386,
  387,  388,  389,  390,  391,  392,  393,  394,   -1,  396,
  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,
  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,
  417,   -1,  256,   -1,   -1,   -1,   -1,  424,  262,   -1,
  427,   -1,   -1,   -1,   -1,   -1,  433,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,
  344,   -1,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,   -1,  298,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  372,   -1,
  374,   -1,  376,   -1,  378,  379,  380,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  262,   -1,   -1,   -1,   -1,   -1,
  394,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,
  344,  405,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,  417,   -1,   -1,   -1,   -1,   -1,   -1,
  298,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  372,  433,
  374,  375,  376,  377,  378,  379,  380,   -1,  382,  383,
   -1,  385,  386,  387,  388,  389,  390,  391,  392,  393,
  394,   -1,  396,  397,  398,  399,  400,  401,  402,  403,
  404,  405,  406,  407,  408,  409,  410,  411,  412,  413,
  414,  415,  416,  417,   -1,  256,   -1,   -1,   -1,   -1,
  424,  262,   -1,  427,   -1,  363,   -1,   -1,   -1,  433,
   -1,   -1,   -1,   -1,   -1,  373,   -1,  375,  376,  377,
  378,   -1,  380,   -1,  382,  383,   -1,  385,  386,  387,
  388,  389,   -1,  391,  392,  393,  394,  298,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,
   -1,   -1,   -1,   -1,  422,   -1,  424,   -1,   -1,  427,
   -1,   -1,   -1,   -1,   -1,  433,   -1,   -1,  339,   -1,
   -1,   -1,   -1,  344,   -1,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  372,   -1,  374,  375,  376,  377,  378,  379,  380,
   -1,  382,  383,   -1,  385,  386,  387,  388,  389,  390,
  391,  392,  393,  394,   -1,  396,  397,  398,  399,  400,
  401,  402,  403,  404,  405,  406,  407,  408,  409,  410,
  411,  412,  413,  414,  415,  416,  417,   -1,  256,  256,
   -1,   -1,   -1,  424,  262,   -1,  427,   -1,  265,   -1,
  267,   -1,  433,  270,   -1,   -1,   -1,   -1,  275,   -1,
   -1,   -1,  279,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,
  298,   -1,   -1,  300,   -1,   -1,   -1,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,
   -1,  318,   -1,   -1,   -1,  322,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  330,  331,   -1,   -1,  334,   -1,   -1,
  337,  339,   -1,   -1,   -1,   -1,  344,   -1,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  363,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  372,   -1,  374,  375,  376,  377,
  378,  379,  380,   -1,  382,  383,   -1,  385,  386,  387,
  388,  389,  390,  391,  392,  393,  394,   -1,  396,  397,
  398,  399,  400,  401,  402,  403,  404,  405,  406,  407,
  408,  409,  410,  411,  412,  413,  414,  415,  416,  417,
   -1,  256,  256,   -1,   -1,  422,  424,  262,   -1,  427,
   -1,  265,   -1,  267,   -1,  433,  270,   -1,   -1,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,
   -1,  295,   -1,  298,   -1,   -1,  300,   -1,   -1,   -1,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  316,   -1,  318,   -1,   -1,   -1,  322,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,   -1,
  334,   -1,   -1,  337,  339,   -1,   -1,   -1,   -1,  344,
   -1,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  372,   -1,  374,
  375,  376,  377,  378,  379,  380,   -1,  382,   -1,   -1,
  385,  386,  387,  388,  389,  390,  391,  392,  393,  394,
   -1,  396,  397,  398,  399,  400,  401,  402,  403,  404,
  405,  406,  407,  408,  409,  410,  411,  412,  413,  414,
  415,  416,  417,   -1,  256,  256,   -1,   -1,  422,  424,
  262,   -1,  427,   -1,  265,   -1,  267,   -1,  433,  270,
   -1,   -1,   -1,   -1,  275,   -1,   -1,   -1,  279,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  295,   -1,  298,   -1,   -1,  300,
   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,   -1,   -1,
   -1,  322,   -1,  262,   -1,   -1,   -1,  266,   -1,  330,
  331,   -1,   -1,  334,   -1,   -1,  337,  339,   -1,   -1,
   -1,   -1,  344,   -1,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,  298,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  372,   -1,  374,   -1,  376,  314,  378,  379,  380,   -1,
  382,  383,   -1,  385,  386,  387,  388,  389,  390,  391,
  392,  393,  394,   -1,   -1,   -1,  398,  399,  400,  401,
  402,  403,  404,  405,  406,  407,  408,  409,  410,  411,
  412,  413,  414,  415,  256,  417,   -1,   -1,  357,   -1,
  262,  422,   -1,   -1,  363,   -1,   -1,   -1,   -1,   -1,
   -1,  433,   -1,   -1,  373,  374,  375,  376,  377,  378,
  379,  380,   -1,  382,  383,   -1,  385,  386,  387,  388,
  389,  390,  391,  392,  393,  394,  298,  396,  397,  398,
  399,  400,  401,  402,  403,  404,  405,  406,  407,  408,
  409,  410,  411,  412,  413,  414,  415,  416,  417,   -1,
   -1,   -1,   -1,  422,   -1,  424,  256,   -1,  427,   -1,
   -1,   -1,  262,   -1,  433,   -1,   -1,  339,   -1,   -1,
   -1,   -1,  344,   -1,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  298,   -1,
  372,   -1,  374,   -1,  376,   -1,  378,  379,  380,   -1,
  382,  383,   -1,   -1,  386,  387,  388,  389,  390,  391,
  392,  393,  394,   -1,   -1,   -1,  398,  399,  400,  401,
  402,  403,  404,  405,   -1,   -1,   -1,   -1,   -1,  339,
   -1,   -1,   -1,   -1,  344,  417,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
   -1,  433,   -1,   -1,  256,   -1,   -1,   -1,   -1,   -1,
  262,   -1,  372,   -1,  374,   -1,  376,   -1,  378,  379,
  380,   -1,  382,  383,   -1,   -1,  386,  387,  388,  389,
   -1,   -1,   -1,  393,  394,   -1,   -1,   -1,  398,  399,
  400,  401,  402,  403,  404,  405,  298,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  417,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  433,   -1,   -1,  256,   -1,   -1,   -1,
   -1,   -1,  262,   -1,   -1,   -1,   -1,  339,   -1,   -1,
   -1,   -1,  344,   -1,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  298,   -1,
  372,   -1,  374,   -1,  376,   -1,  378,  379,  380,   -1,
  382,  383,   -1,   -1,  386,  387,  388,  389,   -1,   -1,
   -1,  393,  394,   -1,   -1,   -1,  398,  399,  400,  401,
  402,  403,  404,  405,   -1,   -1,   -1,   -1,   -1,  339,
   -1,   -1,   -1,   -1,  344,  417,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
   -1,  433,   -1,   -1,  256,   -1,   -1,   -1,   -1,   -1,
  262,   -1,  372,   -1,  374,   -1,  376,   -1,  378,  379,
  380,   -1,  382,  383,   -1,   -1,  386,  387,  388,  389,
   -1,   -1,   -1,  393,  394,   -1,   -1,   -1,  398,  399,
  400,  401,  402,  403,  404,  405,  298,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  417,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  433,   -1,   -1,  256,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,
   -1,   -1,  344,   -1,  346,  347,  348,  349,  350,  351,
  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  372,   -1,  374,   -1,  376,   -1,  378,  379,  380,   -1,
  382,  383,   -1,   -1,  386,  387,  388,  389,   -1,   -1,
   -1,  393,  394,   -1,   -1,   -1,  398,  399,  400,  401,
  402,  403,  404,  405,   -1,   -1,   -1,   -1,   -1,  339,
   -1,   -1,   -1,   -1,  344,  417,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,  256,   -1,   -1,
   -1,  433,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  372,   -1,  374,   -1,  376,   -1,  378,  379,
  380,   -1,   -1,   -1,   -1,   -1,  386,  387,  388,  389,
   -1,   -1,   -1,  393,  394,   -1,   -1,   -1,  398,  399,
  400,  401,  402,  403,  404,  405,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  417,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,
   -1,   -1,   -1,  433,   -1,   -1,   -1,   -1,   -1,   -1,
  339,   -1,   -1,   -1,   -1,  344,   -1,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  372,   -1,  374,   -1,  376,   -1,  378,
  379,  380,   -1,   -1,   -1,   -1,   -1,  386,  387,  388,
  389,   -1,   -1,   -1,  393,  394,   -1,   -1,   -1,  398,
  399,  400,  401,  402,  403,  404,  405,   -1,   -1,   -1,
   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,  417,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
  256,   -1,   -1,   -1,  433,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  372,   -1,  374,   -1,  376,
   -1,  378,  379,  380,   -1,   -1,   -1,   -1,   -1,  386,
  387,  388,  389,   -1,   -1,   -1,  393,  394,   -1,   -1,
   -1,  398,  399,  400,  401,  402,  403,  404,  405,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  417,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  256,   -1,   -1,   -1,  433,   -1,   -1,   -1,
   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,   -1,
  346,  347,  348,  349,  350,  351,  352,  353,  354,  355,
  356,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  372,   -1,  374,   -1,
  376,   -1,  378,  379,  380,   -1,   -1,   -1,   -1,   -1,
  386,  387,  388,  389,   -1,   -1,   -1,  393,  394,   -1,
   -1,   -1,   -1,   -1,  400,  401,  402,  403,  404,  405,
   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,
  344,  417,  346,  347,  348,  349,  350,  351,  352,  353,
  354,  355,  356,  256,   -1,   -1,   -1,  433,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  372,   -1,
  374,   -1,  376,   -1,  378,  379,  380,   -1,   -1,   -1,
   -1,   -1,  386,  387,  388,  389,   -1,   -1,   -1,  393,
  394,   -1,   -1,   -1,   -1,   -1,  400,  401,  402,  403,
  404,  405,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  417,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,  433,
   -1,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,
   -1,  344,   -1,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  372,
   -1,  374,   -1,  376,   -1,  378,  379,  380,   -1,   -1,
   -1,   -1,   -1,  386,  387,  388,  389,   -1,   -1,   -1,
  393,  394,   -1,   -1,   -1,   -1,   -1,  400,  401,  402,
  403,  404,  405,   -1,   -1,   -1,   -1,   -1,  339,   -1,
   -1,   -1,   -1,  344,  417,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,  256,   -1,   -1,   -1,
  433,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  372,   -1,  374,   -1,  376,   -1,  378,  379,  380,
   -1,   -1,   -1,   -1,   -1,  386,  387,  388,  389,   -1,
   -1,   -1,  393,  394,   -1,   -1,   -1,   -1,   -1,  400,
  401,  402,  403,  404,  405,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  417,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,
   -1,   -1,  433,   -1,   -1,   -1,   -1,   -1,   -1,  339,
   -1,   -1,   -1,   -1,  344,   -1,  346,  347,  348,  349,
  350,  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  372,   -1,  374,   -1,  376,   -1,  378,  379,
  380,   -1,   -1,   -1,   -1,   -1,  386,  387,  388,  389,
   -1,   -1,   -1,  393,  394,   -1,   -1,   -1,   -1,   -1,
  400,  401,  402,  403,  404,  405,   -1,   -1,   -1,   -1,
   -1,  339,   -1,   -1,   -1,   -1,  344,  417,  346,  347,
  348,  349,  350,  351,  352,  353,  354,  355,  356,  256,
   -1,   -1,  261,  433,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  372,   -1,  374,   -1,  376,   -1,
  378,  379,  380,   -1,   -1,  284,   -1,   -1,   -1,   -1,
  388,  389,   -1,   -1,   -1,  393,  394,   -1,  297,   -1,
   -1,   -1,   -1,  302,  402,  403,  404,  405,  307,   -1,
  309,  310,  311,  312,   -1,   -1,  315,   -1,  317,  417,
   -1,   -1,  321,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  256,   -1,   -1,  333,  433,   -1,  336,   -1,  338,
   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,   -1,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
   -1,   -1,   -1,  362,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  372,  373,  372,   -1,  374,   -1,  376,
   -1,  378,  379,  380,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  388,  389,   -1,   -1,   -1,  393,  394,   -1,   -1,
   -1,   -1,   -1,  256,   -1,  402,  403,  404,  405,   -1,
   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,
  417,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,   -1,   -1,   -1,   -1,  433,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  372,   -1,  374,
   -1,  376,   -1,  378,  379,  380,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  388,  389,   -1,   -1,   -1,  393,  394,
   -1,   -1,   -1,   -1,   -1,  256,   -1,  402,  403,  404,
  405,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,
   -1,  344,  417,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,   -1,   -1,   -1,   -1,  433,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  372,
   -1,  374,   -1,  376,   -1,  378,  379,  380,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  388,  389,   -1,   -1,   -1,
  393,  394,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,
   -1,  404,  405,   -1,   -1,   -1,   -1,   -1,  339,   -1,
   -1,   -1,   -1,  344,  417,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,
  433,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  372,   -1,  374,   -1,  376,   -1,  378,  379,  380,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  388,  389,   -1,
   -1,   -1,  393,  394,   -1,   -1,   -1,   -1,   -1,  256,
   -1,   -1,   -1,  404,  405,   -1,   -1,   -1,   -1,   -1,
  339,   -1,   -1,   -1,   -1,  344,  417,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,   -1,
   -1,   -1,  433,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  372,   -1,  374,   -1,  376,   -1,  378,
  379,  380,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  389,   -1,   -1,   -1,  393,  394,   -1,   -1,   -1,   -1,
   -1,  256,   -1,   -1,   -1,  404,  405,   -1,   -1,   -1,
   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,  417,  346,
  347,  348,  349,  350,  351,  352,  353,  354,  355,  356,
   -1,   -1,   -1,   -1,  433,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  372,   -1,  374,   -1,  376,
   -1,  378,  379,  380,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  389,   -1,   -1,   -1,  393,  394,   -1,   -1,
   -1,   -1,   -1,  256,   -1,   -1,   -1,  404,  405,   -1,
   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,   -1,  344,
  417,  346,  347,  348,  349,  350,  351,  352,  353,  354,
  355,  356,   -1,   -1,   -1,   -1,  433,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  372,   -1,  374,
   -1,  376,   -1,  378,  379,  380,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  389,   -1,   -1,   -1,   -1,  394,
   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,  404,
  405,   -1,   -1,   -1,   -1,   -1,  339,   -1,   -1,   -1,
   -1,  344,  417,  346,  347,  348,  349,  350,  351,  352,
  353,  354,  355,  356,   -1,   -1,   -1,   -1,  433,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  372,
   -1,  374,   -1,  376,   -1,  378,  379,  380,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  389,   -1,   -1,   -1,
   -1,  394,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,
   -1,  404,  405,   -1,   -1,   -1,   -1,   -1,  339,   -1,
   -1,   -1,   -1,  344,  417,  346,  347,  348,  349,  350,
  351,  352,  353,  354,  355,  356,   -1,   -1,   -1,   -1,
  433,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  372,   -1,  374,   -1,  376,   -1,  378,  379,  380,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  394,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  404,  405,   -1,   -1,   -1,   -1,   -1,
  339,   -1,   -1,   -1,   -1,  344,  417,  346,  347,  348,
  349,  350,  351,  352,  353,  354,  355,  356,   -1,   -1,
   -1,   -1,  433,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  372,   -1,  374,   -1,  376,   -1,  378,
  379,  380,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  256,   -1,  394,   -1,   -1,   -1,   -1,
   -1,  264,  265,  266,  267,  404,  405,  270,  271,   -1,
  273,  274,  275,  276,  277,  278,  279,   -1,  417,   -1,
   -1,   -1,  285,   -1,  287,  288,  289,  290,  291,  292,
   -1,   -1,  295,   -1,  433,   -1,  299,  300,   -1,  302,
  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  314,   -1,  316,   -1,  318,  319,   -1,   -1,  322,
   -1,  324,  325,  326,  327,  328,  329,  330,  331,  332,
  333,  334,  335,   -1,  337,   -1,   -1,  340,  341,   -1,
   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,
  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  371,   -1,
   -1,   -1,  375,   -1,   -1,   -1,   -1,  380,  381,  382,
  383,  384,   -1,   -1,   -1,  388,   -1,  390,   -1,   -1,
   -1,   -1,   -1,  396,  397,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,  421,  422,
  423,  424,  264,  265,  266,  267,   -1,   -1,  270,  271,
   -1,  273,  274,  275,  276,  277,  278,  279,   -1,   -1,
   -1,   -1,   -1,  285,   -1,  287,  288,  289,  290,  291,
  292,   -1,   -1,  295,   -1,   -1,   -1,  299,  300,   -1,
  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  314,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,  324,  325,  326,  327,  328,  329,  330,  331,
  332,  333,  334,  335,   -1,  337,   -1,   -1,  340,  341,
   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,
  362,  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  371,
   -1,   -1,   -1,  375,   -1,   -1,   -1,   -1,  380,  381,
  382,  383,  384,   -1,   -1,   -1,  388,   -1,  390,   -1,
   -1,   -1,   -1,   -1,  396,  397,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,  421,
  422,  423,  424,  264,  265,  266,  267,   -1,   -1,  270,
  271,   -1,  273,  274,  275,  276,  277,  278,  279,   -1,
   -1,   -1,   -1,   -1,  285,   -1,  287,  288,  289,  290,
  291,  292,   -1,   -1,  295,   -1,   -1,   -1,  299,  300,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  314,   -1,  316,   -1,  318,  319,   -1,
   -1,  322,   -1,  324,  325,  326,  327,  328,  329,  330,
  331,  332,  333,  334,  335,   -1,  337,   -1,   -1,  340,
  341,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,
  361,  362,  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  371,   -1,   -1,   -1,  375,   -1,   -1,   -1,   -1,  380,
  381,  382,  383,  384,   -1,   -1,   -1,  388,   -1,  390,
   -1,   -1,   -1,   -1,   -1,  396,  397,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,
  421,  422,  423,  424,  264,  265,  266,  267,   -1,   -1,
  270,  271,   -1,  273,  274,  275,  276,  277,  278,  279,
   -1,   -1,   -1,   -1,   -1,  285,   -1,  287,  288,  289,
  290,  291,  292,   -1,   -1,  295,   -1,   -1,   -1,  299,
  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  314,   -1,  316,   -1,  318,  319,
   -1,   -1,  322,   -1,  324,  325,  326,  327,  328,  329,
  330,  331,  332,  333,  334,  335,   -1,  337,   -1,   -1,
  340,  341,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,
  360,  361,  362,  363,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  371,   -1,   -1,   -1,  375,   -1,   -1,   -1,   -1,
  380,  381,  382,  383,  384,   -1,   -1,   -1,  388,   -1,
  390,   -1,   -1,   -1,   -1,   -1,  396,  397,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,
   -1,  421,  422,  423,  424,  264,  265,  266,  267,   -1,
   -1,  270,  271,   -1,  273,  274,  275,  276,  277,  278,
  279,   -1,   -1,   -1,   -1,   -1,  285,   -1,  287,  288,
  289,  290,  291,  292,   -1,   -1,  295,   -1,   -1,   -1,
  299,  300,   -1,  302,  303,  304,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  314,   -1,  316,   -1,  318,
  319,   -1,   -1,  322,   -1,  324,  325,  326,  327,  328,
  329,  330,  331,  332,  333,  334,  335,   -1,  337,   -1,
   -1,  340,  341,   -1,   -1,  344,  345,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  359,  360,  361,  362,  363,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  371,   -1,   -1,   -1,  375,   -1,   -1,   -1,
   -1,  380,  381,  382,  383,  384,   -1,   -1,   -1,  388,
   -1,  390,   -1,   -1,   -1,   -1,   -1,  396,  397,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,
   -1,   -1,  421,  422,  423,  424,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,  256,   -1,  275,  276,  277,
   -1,  279,   -1,   -1,  265,   -1,  267,  285,   -1,  270,
  288,   -1,   -1,   -1,  275,   -1,   -1,  295,  279,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,  316,  300,
  318,  319,   -1,  304,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,  316,  334,  318,   -1,   -1,
   -1,  322,   -1,  341,   -1,   -1,  344,  345,   -1,  330,
  331,   -1,   -1,  334,   -1,   -1,  337,   -1,   -1,   -1,
   -1,  359,  360,  361,  362,  363,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  371,  372,   -1,   -1,  375,   -1,   -1,
   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,   -1,
  388,   -1,  390,   -1,   -1,   -1,   -1,   -1,  396,  397,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,
   -1,   -1,   -1,  421,  422,  423,  424,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,
  277,  422,  279,   -1,   -1,  265,   -1,  267,  285,   -1,
  270,  288,   -1,   -1,   -1,  275,   -1,   -1,  295,  279,
   -1,   -1,   -1,  300,   -1,  302,  303,  304,  288,   -1,
   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,  316,
  300,  318,  319,  320,  304,  322,   -1,   -1,  325,   -1,
  327,   -1,  329,  330,  331,  332,  316,  334,  318,   -1,
   -1,   -1,  322,   -1,  341,   -1,   -1,  344,  345,   -1,
  330,  331,   -1,   -1,  334,   -1,   -1,  337,   -1,   -1,
   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  371,   -1,   -1,   -1,  375,   -1,
   -1,   -1,   -1,  363,  381,  382,  383,  384,   -1,   -1,
   -1,  388,   -1,  390,   -1,   -1,   -1,   -1,   -1,  396,
  397,   -1,   -1,   -1,   -1,   -1,   -1,  264,  265,   -1,
  267,   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,
  277,   -1,  279,   -1,  421,  422,  423,  424,  285,   -1,
   -1,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,
   -1,   -1,  422,  300,   -1,  302,  303,  304,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,
   -1,  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,
  327,   -1,  329,  330,  331,  332,   -1,  334,   -1,   -1,
   -1,   -1,   -1,   -1,  341,   -1,   -1,  344,  345,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  359,  360,  361,  362,  363,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  371,  372,   -1,   -1,  375,   -1,
   -1,   -1,   -1,   -1,  381,  382,  383,  384,   -1,   -1,
   -1,  388,   -1,  390,   -1,   -1,   -1,   -1,   -1,  396,
  397,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  256,   -1,  421,  422,  423,  424,   -1,   -1,
  264,  265,   -1,  267,   -1,  432,  270,  271,   -1,   -1,
   -1,  275,  276,  277,   -1,  279,   -1,   -1,  265,   -1,
  267,  285,   -1,  270,  288,   -1,   -1,   -1,  275,   -1,
   -1,  295,  279,   -1,   -1,   -1,  300,   -1,  302,  303,
  304,  288,   -1,   -1,   -1,   -1,   -1,   -1,  295,   -1,
   -1,   -1,  316,  300,  318,  319,   -1,  304,  322,   -1,
   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,  316,
  334,  318,   -1,  337,   -1,  322,   -1,  341,   -1,   -1,
  344,  345,   -1,  330,  331,   -1,   -1,  334,   -1,   -1,
  337,   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,  382,  383,
  384,   -1,   -1,   -1,  388,   -1,  390,   -1,   -1,  376,
   -1,   -1,  396,  397,   -1,   -1,   -1,   -1,   -1,   -1,
  264,  265,   -1,  267,   -1,   -1,  270,  271,   -1,   -1,
   -1,  275,  276,  277,   -1,  279,   -1,  421,  422,  423,
  424,  285,   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,
   -1,  295,   -1,   -1,   -1,  422,  300,   -1,  302,  303,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  316,   -1,  318,  319,   -1,   -1,  322,   -1,
   -1,  325,   -1,  327,   -1,  329,  330,  331,  332,   -1,
  334,   -1,   -1,   -1,   -1,   -1,   -1,  341,   -1,   -1,
  344,  345,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  359,  360,  361,  362,  363,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  371,   -1,   -1,
   -1,  375,   -1,   -1,   -1,   -1,   -1,  381,  382,  383,
  384,   -1,   -1,   -1,  388,   -1,  390,   -1,   -1,   -1,
   -1,   -1,  396,  397,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,   -1,  421,  422,  423,
  424,   -1,   -1,  264,  265,   -1,  267,   -1,  432,  270,
  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,
   -1,  265,   -1,  267,  285,   -1,  270,  288,   -1,   -1,
   -1,  275,   -1,   -1,  295,  279,   -1,   -1,   -1,  300,
   -1,  302,  303,  304,  288,   -1,   -1,   -1,   -1,   -1,
   -1,  295,   -1,   -1,   -1,  316,  300,  318,  319,   -1,
  304,  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,
  331,  332,  316,  334,  318,   -1,   -1,   -1,  322,   -1,
  341,   -1,   -1,  344,  345,   -1,  330,  331,   -1,   -1,
  334,   -1,   -1,  337,   -1,   -1,   -1,   -1,  359,  360,
  361,  362,  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  371,   -1,   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,
  381,  382,  383,  384,   -1,   -1,   -1,  388,   -1,  390,
  374,   -1,   -1,   -1,   -1,  396,  397,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,
  421,  422,  423,  424,  264,  265,   -1,  267,   -1,   -1,
  270,  271,   -1,   -1,   -1,  275,  276,  277,  422,  279,
   -1,   -1,  265,   -1,  267,  285,   -1,  270,  288,   -1,
   -1,   -1,  275,   -1,   -1,  295,  279,   -1,   -1,   -1,
  300,   -1,  302,  303,  304,  288,   -1,   -1,   -1,   -1,
   -1,   -1,  295,   -1,   -1,   -1,  316,  300,  318,  319,
   -1,  304,  322,   -1,   -1,  325,   -1,  327,   -1,  329,
  330,  331,  332,  316,  334,  318,   -1,   -1,   -1,  322,
   -1,  341,   -1,   -1,  344,  345,   -1,  330,  331,   -1,
   -1,  334,   -1,   -1,  337,   -1,   -1,   -1,   -1,  359,
  360,  361,  362,  363,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  375,   -1,   -1,   -1,   -1,
   -1,  381,  382,  383,  384,   -1,   -1,   -1,  388,   -1,
  390,   -1,   -1,   -1,   -1,   -1,  396,  397,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,
   -1,  421,  422,  423,  424,  264,  265,   -1,  267,   -1,
   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,  422,
  279,   -1,   -1,  265,   -1,  267,  285,   -1,  270,  288,
   -1,   -1,   -1,  275,   -1,   -1,  295,  279,   -1,   -1,
   -1,  300,   -1,  302,  303,  304,  288,   -1,   -1,   -1,
   -1,   -1,   -1,  295,   -1,   -1,   -1,  316,  300,  318,
  319,   -1,  304,  322,   -1,   -1,  325,   -1,  327,   -1,
  329,  330,  331,  332,  316,  334,  318,   -1,   -1,   -1,
  322,   -1,  341,   -1,   -1,  344,  345,   -1,  330,  331,
   -1,   -1,  334,   -1,   -1,  337,   -1,   -1,   -1,   -1,
  359,  360,  361,  362,  363,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  375,   -1,   -1,   -1,
   -1,   -1,  381,  382,  383,  384,   -1,   -1,   -1,  388,
   -1,  390,   -1,   -1,   -1,   -1,   -1,  396,  397,   -1,
   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  262,   -1,   -1,  256,   -1,
   -1,   -1,  421,  422,  423,  424,  264,  265,   -1,  267,
   -1,   -1,  270,  271,   -1,   -1,   -1,  275,  276,  277,
  422,  279,   -1,  327,   -1,   -1,   -1,  285,   -1,   -1,
  288,  298,   -1,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,  302,  303,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,  319,   -1,   -1,  322,   -1,   -1,  325,   -1,  327,
   -1,  329,  330,  331,  332,   -1,  334,  381,  382,  383,
  384,   -1,  386,  387,  388,  389,  390,  391,  392,  393,
   -1,   -1,  396,  397,  398,  399,  400,  401,  402,  403,
   -1,  359,  360,  361,  362,   -1,   -1,   -1,  375,  376,
  377,  378,  379,   -1,   -1,  382,  383,  375,   -1,  386,
  387,  388,  389,  390,  391,  392,  393,  394,   -1,  396,
  397,  398,  399,  400,  401,  402,  403,  404,  405,  406,
  407,  408,  409,  410,  411,  412,  413,  414,  415,  416,
  417,   -1,   -1,   -1,   -1,   -1,   -1,  424,   -1,   -1,
  427,  261,   -1,  421,  422,  265,   -1,  267,   -1,   -1,
  270,   -1,  272,  273,   -1,  275,   -1,  277,   -1,  279,
   -1,  281,  282,  283,  284,   -1,   -1,  287,  288,   -1,
   -1,   -1,   -1,  293,   -1,  295,  296,  297,   -1,   -1,
  300,   -1,  302,   -1,  304,   -1,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,   -1,  316,  317,  318,   -1,
   -1,  321,  322,  323,   -1,   -1,   -1,   -1,   -1,   -1,
  330,  331,   -1,  333,  334,   -1,  336,  337,  338,   -1,
   -1,   -1,  342,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  362,   -1,  261,   -1,  366,   -1,  265,   -1,
  267,   -1,  372,  270,   -1,  272,  273,   -1,  275,   -1,
  277,  381,  279,   -1,  281,  282,  283,  284,   -1,   -1,
  287,  288,   -1,   -1,   -1,   -1,  293,   -1,  295,  296,
  297,   -1,   -1,  300,   -1,  302,   -1,  304,   -1,   -1,
  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,  316,
  317,  318,  422,   -1,  321,  322,  323,   -1,   -1,   -1,
   -1,   -1,   -1,  330,  331,   -1,  333,  334,   -1,  336,
  337,  338,   -1,   -1,   -1,  342,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  362,   -1,  261,   -1,  366,
   -1,  265,   -1,  267,   -1,  372,  270,   -1,  272,  273,
   -1,  275,   -1,  277,  381,  279,   -1,  281,  282,  283,
  284,   -1,   -1,  287,  288,   -1,   -1,   -1,   -1,  293,
   -1,  295,  296,  297,   -1,   -1,  300,   -1,  302,   -1,
  304,   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,
   -1,   -1,  316,  317,  318,  422,   -1,  321,  322,  323,
   -1,   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,  333,
  334,   -1,  336,  337,  338,   -1,   -1,   -1,  342,  261,
   -1,   -1,   -1,  265,   -1,  267,   -1,   -1,  270,   -1,
  272,  273,   -1,  275,   -1,  277,   -1,  279,  362,  281,
  282,  283,  284,   -1,   -1,  287,  288,   -1,  372,   -1,
   -1,  293,   -1,  295,  296,  297,   -1,   -1,  300,   -1,
  302,   -1,  304,   -1,   -1,  307,   -1,  309,  310,  311,
  312,   -1,   -1,   -1,  316,  317,  318,   -1,   -1,  321,
  322,  323,   -1,   -1,   -1,   -1,   -1,   -1,  330,  331,
   -1,  333,  334,   -1,  336,  337,  338,   -1,  422,   -1,
  342,  261,   -1,   -1,   -1,  265,   -1,  267,   -1,   -1,
  270,   -1,  272,  273,   -1,  275,   -1,  277,   -1,  279,
  362,  281,  282,  283,  284,   -1,   -1,  287,  288,   -1,
  372,   -1,   -1,  293,   -1,  295,  296,  297,   -1,   -1,
  300,   -1,  302,  261,  304,   -1,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,   -1,  316,  317,  318,   -1,
   -1,  321,  322,  323,   -1,   -1,  284,   -1,   -1,   -1,
  330,  331,   -1,  333,  334,   -1,  336,  337,  338,  297,
  422,  261,  342,   -1,  302,   -1,   -1,  305,   -1,  307,
   -1,  309,  310,  311,  312,   -1,   -1,   -1,   -1,  317,
   -1,   -1,  362,  321,  284,   -1,   -1,  325,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  333,   -1,  297,  336,   -1,
  338,   -1,  302,   -1,   -1,  305,   -1,  307,   -1,  309,
  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,  357,
   -1,  321,   -1,   -1,  362,  325,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  333,   -1,  373,  336,  375,  338,  377,
   -1,   -1,  422,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,  390,   -1,  275,  276,  277,   -1,  279,   -1,
   -1,   -1,  362,   -1,  285,   -1,   -1,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,
   -1,  302,  303,  304,  422,  306,   -1,   -1,   -1,   -1,
   -1,   -1,  313,   -1,   -1,  316,   -1,  318,  319,   -1,
   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,
  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,
  341,   -1,  422,  344,  345,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,
  361,  362,  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  375,  376,   -1,  378,   -1,   -1,
  381,  382,  383,  384,   -1,   -1,   -1,  388,   -1,  390,
   -1,   -1,   -1,   -1,   -1,  396,  397,   -1,   -1,   -1,
   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,
  421,  422,  423,  424,  285,   -1,   -1,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,
   -1,  302,  303,  304,   -1,  306,   -1,   -1,   -1,   -1,
   -1,   -1,  313,   -1,   -1,  316,   -1,  318,  319,   -1,
   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,
  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,
  341,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,
  361,  362,  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  375,   -1,   -1,  378,   -1,   -1,
  381,  382,  383,  384,   -1,   -1,   -1,  388,   -1,  390,
   -1,   -1,   -1,   -1,   -1,  396,  397,   -1,   -1,   -1,
   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,
  421,  422,  423,  424,  285,   -1,   -1,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,
   -1,  302,  303,  304,   -1,  306,   -1,   -1,   -1,   -1,
   -1,   -1,  313,   -1,   -1,  316,   -1,  318,  319,   -1,
   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,
  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,
  341,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,
  361,  362,  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,
  381,  382,  383,  384,   -1,   -1,   -1,  388,   -1,  390,
   -1,   -1,   -1,   -1,   -1,  396,  397,   -1,   -1,   -1,
   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,
  421,  422,  423,  424,  285,   -1,   -1,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,
   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,
  331,  332,   -1,  334,   -1,   -1,  337,   -1,   -1,   -1,
  341,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,
  361,  362,  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,
  381,  382,  383,  384,   -1,   -1,   -1,  388,   -1,  390,
   -1,   -1,   -1,   -1,   -1,  396,  397,   -1,   -1,   -1,
   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,
  421,  422,  423,  424,  285,   -1,   -1,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,
   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,
  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,
  341,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,
  361,  362,  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  372,   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,
  381,  382,  383,  384,   -1,   -1,   -1,  388,   -1,  390,
   -1,   -1,   -1,   -1,   -1,  396,  397,   -1,   -1,   -1,
   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,
  421,  422,  423,  424,  285,   -1,   -1,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,
   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,
  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,
  341,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,
  361,  362,  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  371,   -1,   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,
  381,  382,  383,  384,   -1,   -1,   -1,  388,   -1,  390,
   -1,   -1,   -1,   -1,   -1,  396,  397,   -1,   -1,   -1,
   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,
  421,  422,  423,  424,  285,   -1,   -1,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,
   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,
  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,
  341,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,
  361,  362,  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  371,   -1,   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,
  381,  382,  383,  384,   -1,   -1,   -1,  388,   -1,  390,
   -1,   -1,   -1,   -1,   -1,  396,  397,   -1,   -1,   -1,
   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,
  421,  422,  423,  424,  285,   -1,   -1,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,
   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,
  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,
  341,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,
  361,  362,  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,
  381,  382,  383,  384,   -1,   -1,   -1,  388,   -1,  390,
   -1,   -1,   -1,   -1,   -1,  396,  397,   -1,   -1,   -1,
   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,
  421,  422,  423,  424,  285,   -1,   -1,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,
   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,
  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,
  341,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,
  361,  362,  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,
  381,  382,  383,  384,   -1,   -1,   -1,  388,   -1,  390,
   -1,   -1,   -1,   -1,   -1,  396,  397,   -1,   -1,   -1,
   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,
  421,  422,  423,  424,  285,   -1,   -1,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,
   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,
  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,
  341,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,
  361,  362,  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,
  381,  382,  383,  384,   -1,   -1,   -1,  388,   -1,  390,
   -1,   -1,   -1,   -1,   -1,  396,  397,   -1,   -1,   -1,
   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,
  421,  422,  423,  424,  285,   -1,   -1,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,
   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,
  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,
  341,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,
  361,  362,  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,
  381,  382,  383,  384,   -1,   -1,   -1,  388,   -1,  390,
   -1,   -1,   -1,   -1,   -1,  396,  397,   -1,   -1,   -1,
   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,
  421,  422,  423,  424,  285,   -1,   -1,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,
   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,
  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,
  341,   -1,   -1,  344,  345,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,
  361,  362,  363,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  375,   -1,   -1,   -1,   -1,   -1,
  381,  382,  383,  384,   -1,   -1,   -1,  388,   -1,  390,
   -1,   -1,   -1,   -1,   -1,  396,  397,   -1,   -1,   -1,
   -1,   -1,   -1,  264,  265,   -1,  267,   -1,   -1,  270,
  271,   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,
  421,  422,  423,  424,  285,   -1,   -1,  288,   -1,   -1,
   -1,   -1,   -1,   -1,  295,   -1,   -1,   -1,   -1,  300,
   -1,  302,  303,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,
   -1,  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,
  331,  332,   -1,  334,   -1,   -1,   -1,   -1,   -1,   -1,
  265,   -1,  267,   -1,   -1,  270,   -1,  272,   -1,   -1,
  275,   -1,   -1,   -1,  279,   -1,   -1,   -1,  359,  360,
  361,  362,  363,  288,   -1,   -1,   -1,   -1,   -1,   -1,
  295,   -1,   -1,   -1,  375,  300,   -1,  302,   -1,  304,
  381,  382,  383,  384,   -1,   -1,   -1,  388,   -1,  390,
   -1,  316,   -1,  318,   -1,  396,  397,  322,  323,   -1,
   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,   -1,  334,
   -1,   -1,  337,   -1,   -1,  263,   -1,  265,   -1,  267,
  421,  422,  270,  424,  272,  273,   -1,  275,   -1,  277,
   -1,  279,   -1,  281,  282,  283,   -1,   -1,   -1,  287,
  288,   -1,   -1,   -1,   -1,  293,   -1,  295,  296,   -1,
   -1,   -1,  300,   -1,   -1,   -1,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  315,  316,   -1,
  318,   -1,   -1,   -1,  322,  323,   -1,   -1,   -1,   -1,
   -1,   -1,  330,  331,   -1,   -1,  334,   -1,   -1,  337,
   -1,   -1,  264,  265,  342,  267,   -1,  422,  270,  271,
   -1,   -1,   -1,  275,  276,  277,   -1,  279,   -1,   -1,
   -1,   -1,   -1,  285,   -1,   -1,  288,   -1,   -1,   -1,
  368,  369,   -1,  295,   -1,   -1,   -1,   -1,  300,   -1,
  302,  303,  304,  381,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  316,   -1,  318,  319,   -1,   -1,
  322,   -1,   -1,  325,   -1,  327,   -1,  329,  330,  331,
  332,   -1,  334,   -1,   -1,  337,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  422,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  359,  360,  361,
  362,   -1,   -1,   -1,  265,   -1,  267,   -1,   -1,  270,
   -1,  272,  273,  375,  275,   -1,  277,   -1,  279,   -1,
  281,  282,  283,   -1,   -1,   -1,  287,  288,   -1,   -1,
   -1,   -1,  293,   -1,  295,  296,   -1,   -1,   -1,  300,
   -1,   -1,   -1,  304,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  316,   -1,  318,   -1,  421,
  422,  322,  323,   -1,   -1,   -1,   -1,   -1,   -1,  330,
  331,   -1,  265,  334,  267,   -1,  337,  270,   -1,  272,
  273,  342,  275,   -1,  277,   -1,  279,   -1,  281,  282,
  283,   -1,   -1,   -1,  287,  288,   -1,   -1,   -1,   -1,
  293,   -1,  295,  296,   -1,   -1,   -1,  300,   -1,   -1,
   -1,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  381,   -1,   -1,  316,   -1,  318,   -1,   -1,   -1,  322,
  323,   -1,   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,
  265,  334,  267,   -1,  337,  270,   -1,   -1,  273,  342,
  275,   -1,  277,   -1,  279,   -1,  281,  282,  283,   -1,
   -1,  422,  287,  288,   -1,   -1,   -1,   -1,  293,   -1,
  295,   -1,   -1,   -1,   -1,  300,   -1,   -1,   -1,  304,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  316,   -1,  318,   -1,   -1,   -1,  322,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  330,  331,   -1,  265,  334,
  267,   -1,  337,  270,   -1,   -1,  273,  342,  275,   -1,
  277,   -1,  279,   -1,  281,  282,  283,   -1,   -1,  422,
  287,  288,   -1,   -1,   -1,   -1,  293,   -1,  295,   -1,
   -1,   -1,   -1,  300,   -1,   -1,   -1,  304,  265,   -1,
  267,   -1,   -1,  270,   -1,   -1,  381,   -1,  275,  316,
   -1,  318,  279,   -1,   -1,  322,   -1,   -1,   -1,   -1,
   -1,  288,   -1,  330,  331,   -1,   -1,  334,  295,   -1,
  337,   -1,   -1,  300,   -1,  342,   -1,  304,  265,  306,
  267,  308,   -1,  270,   -1,   -1,  313,  422,  275,  316,
   -1,  318,  279,   -1,   -1,  322,   -1,   -1,  325,   -1,
   -1,  288,   -1,  330,  331,   -1,   -1,  334,  295,   -1,
  337,   -1,   -1,  300,   -1,   -1,   -1,  304,   -1,  306,
   -1,  308,   -1,   -1,   -1,   -1,  313,   -1,   -1,  316,
   -1,  318,   -1,   -1,   -1,  322,   -1,   -1,  325,   -1,
   -1,   -1,   -1,  330,  331,   -1,   -1,  334,   -1,  376,
  337,  265,   -1,  267,   -1,  422,  270,   -1,   -1,   -1,
   -1,  275,   -1,   -1,   -1,  279,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  288,   -1,   -1,   -1,   -1,   -1,
   -1,  295,   -1,  265,   -1,  267,  300,  374,  270,   -1,
  304,   -1,  306,  275,  308,  422,   -1,  279,   -1,  313,
   -1,   -1,  316,   -1,  318,   -1,  288,   -1,  322,   -1,
   -1,  325,   -1,  295,   -1,   -1,  330,  331,  300,   -1,
  334,   -1,  304,  337,  306,   -1,   -1,  265,   -1,  267,
   -1,  313,  270,   -1,  316,  422,  318,  275,   -1,   -1,
  322,  279,   -1,  325,   -1,   -1,   -1,   -1,  330,  331,
  288,   -1,  334,   -1,   -1,  337,   -1,  295,   -1,   -1,
   -1,   -1,  300,   -1,   -1,   -1,  304,  265,   -1,  267,
   -1,   -1,  270,   -1,   -1,   -1,   -1,  275,  316,   -1,
  318,  279,   -1,   -1,  322,  283,   -1,   -1,   -1,   -1,
  288,   -1,  330,  331,   -1,  293,  334,  295,   -1,  337,
   -1,   -1,  300,   -1,   -1,   -1,  304,  305,  422,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  316,   -1,
  318,   -1,   -1,   -1,  322,   -1,   -1,   -1,   -1,  367,
   -1,   -1,  330,  331,  372,  373,  334,  265,   -1,  267,
  422,   -1,  270,   -1,   -1,   -1,   -1,  275,  265,   -1,
  267,  279,   -1,  270,   -1,   -1,   -1,   -1,  275,   -1,
  288,   -1,  279,   -1,   -1,   -1,   -1,  295,   -1,   -1,
   -1,  288,  300,   -1,   -1,   -1,  304,   -1,  295,   -1,
   -1,   -1,   -1,  300,  422,   -1,   -1,  304,  316,   -1,
  318,   -1,   -1,   -1,  322,   -1,   -1,   -1,   -1,  316,
   -1,  318,  330,  331,   -1,  322,  334,   -1,   -1,  337,
   -1,   -1,   -1,  330,  331,   -1,   -1,  334,   -1,   -1,
  337,   -1,   -1,  265,  422,  267,   -1,   -1,  270,   -1,
   -1,   -1,   -1,  275,   -1,   -1,   -1,  279,   -1,  367,
   -1,   -1,   -1,   -1,  372,   -1,  288,  265,   -1,  267,
  367,   -1,  270,  295,   -1,  372,   -1,  275,  300,   -1,
   -1,  279,  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  288,   -1,   -1,   -1,  316,   -1,  318,  295,   -1,   -1,
  322,   -1,  300,   -1,   -1,   -1,  304,   -1,  330,  331,
   -1,   -1,  334,   -1,  422,  337,   -1,  265,  316,  267,
  318,   -1,  270,   -1,  322,  422,   -1,  275,   -1,   -1,
   -1,  279,  330,  331,   -1,   -1,  334,   -1,   -1,  337,
  288,  265,   -1,  267,   -1,   -1,  270,  295,   -1,   -1,
   -1,  275,  300,   -1,   -1,  279,  304,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  288,   -1,   -1,   -1,  316,   -1,
  318,  295,   -1,   -1,  322,   -1,  300,   -1,   -1,   -1,
  304,   -1,  330,  331,   -1,   -1,  334,   -1,   -1,  337,
   -1,  265,  316,  267,  318,   -1,  270,   -1,  322,   -1,
  422,  275,   -1,   -1,   -1,  279,  330,  331,   -1,   -1,
  334,   -1,   -1,  337,  288,  265,   -1,  267,   -1,   -1,
  270,  295,   -1,   -1,  422,  275,  300,   -1,   -1,  279,
  304,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  288,   -1,
   -1,   -1,  316,   -1,  318,  295,   -1,   -1,  322,   -1,
  300,   -1,   -1,   -1,  304,   -1,  330,  331,   -1,   -1,
  334,   -1,   -1,  337,   -1,  265,  316,  267,  318,   -1,
  270,   -1,  322,   -1,  422,  275,   -1,   -1,   -1,  279,
  330,  331,   -1,   -1,  334,   -1,   -1,  337,  288,  265,
   -1,  267,   -1,   -1,  270,  295,   -1,   -1,  422,  275,
  300,   -1,   -1,  279,  304,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  288,   -1,   -1,   -1,  316,   -1,  318,  295,
   -1,   -1,  322,   -1,  300,   -1,   -1,  261,  304,   -1,
  330,  331,   -1,   -1,  334,   -1,   -1,  337,  272,   -1,
  316,   -1,  318,  277,   -1,   -1,  322,  281,  422,   -1,
  284,   -1,   -1,   -1,  330,  331,   -1,   -1,  334,   -1,
   -1,  337,  296,  297,   -1,   -1,   -1,  301,  302,   -1,
  261,   -1,  422,  307,   -1,  309,  310,  311,  312,   -1,
   -1,  272,   -1,  317,   -1,   -1,  277,  321,   -1,  323,
  281,   -1,   -1,  284,   -1,   -1,   -1,   -1,   -1,  333,
   -1,  335,  336,   -1,  338,  296,  297,   -1,  342,   -1,
  301,  302,  261,   -1,  263,   -1,  307,   -1,  309,  310,
  311,  312,  422,   -1,   -1,   -1,  317,   -1,  362,   -1,
  321,   -1,  323,   -1,   -1,  284,   -1,   -1,  372,  373,
   -1,   -1,  333,   -1,   -1,  336,  422,  338,  297,   -1,
   -1,  342,   -1,  302,   -1,   -1,   -1,   -1,  307,   -1,
  309,  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,
   -1,  362,  321,   -1,   -1,   -1,   -1,   -1,   -1,  261,
   -1,  372,  373,   -1,  333,   -1,   -1,  336,   -1,  338,
  272,   -1,   -1,   -1,   -1,  277,   -1,   -1,   -1,  281,
   -1,   -1,  284,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  362,  296,  297,   -1,   -1,   -1,  301,
  302,   -1,  261,  372,  373,  307,   -1,  309,  310,  311,
  312,   -1,   -1,  272,   -1,  317,   -1,   -1,  277,  321,
   -1,  323,  281,   -1,   -1,  284,   -1,   -1,   -1,   -1,
   -1,  333,   -1,   -1,  336,   -1,  338,  296,  297,   -1,
  342,   -1,  301,  302,  261,   -1,   -1,   -1,  307,   -1,
  309,  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,
  362,   -1,  321,   -1,  323,   -1,   -1,  284,   -1,   -1,
  372,   -1,   -1,   -1,  333,   -1,   -1,  336,   -1,  338,
  297,   -1,  261,  342,   -1,  302,   -1,   -1,   -1,   -1,
  307,   -1,  309,  310,  311,  312,   -1,   -1,   -1,   -1,
  317,   -1,   -1,  362,  321,  284,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  372,   -1,   -1,  333,   -1,  297,  336,
  261,  338,  263,  302,   -1,   -1,   -1,   -1,  307,   -1,
  309,  310,  311,  312,   -1,   -1,   -1,   -1,  317,   -1,
   -1,   -1,  321,  284,   -1,  362,   -1,   -1,   -1,   -1,
  261,  368,  369,   -1,  333,  372,  297,  336,   -1,  338,
   -1,  302,   -1,   -1,   -1,   -1,  307,   -1,  309,  310,
  311,  312,   -1,  284,   -1,   -1,  317,   -1,   -1,   -1,
  321,   -1,   -1,  362,   -1,   -1,  297,   -1,  261,  368,
  369,  302,  333,  372,   -1,  336,  307,  338,  309,  310,
  311,  312,   -1,   -1,   -1,   -1,  317,   -1,   -1,   -1,
  321,  284,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  362,  333,   -1,  297,  336,  261,  338,  263,  302,
   -1,  372,   -1,   -1,  307,   -1,  309,  310,  311,  312,
   -1,   -1,   -1,   -1,  317,   -1,   -1,   -1,  321,  284,
   -1,  362,   -1,   -1,   -1,   -1,  261,  368,  369,   -1,
  333,   -1,  297,  336,   -1,  338,   -1,  302,   -1,   -1,
   -1,   -1,  307,   -1,  309,  310,  311,  312,   -1,  284,
  315,   -1,  317,   -1,   -1,   -1,  321,   -1,  261,  362,
   -1,   -1,  297,  366,   -1,   -1,  301,  302,  333,   -1,
   -1,  336,  307,  338,  309,  310,  311,  312,   -1,   -1,
   -1,  284,  317,   -1,   -1,   -1,  321,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  297,   -1,   -1,  362,  333,  302,
   -1,  336,   -1,  338,  307,   -1,  309,  310,  311,  312,
   -1,   -1,   -1,   -1,  317,   -1,   -1,   -1,  321,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  362,   -1,   -1,
  333,   -1,   -1,  336,   -1,  338,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  362,
  };

#line 6611 "D:\GitHub\M\Marvin\mcs\cs-parser.jay"

// <summary>
//  A class used to hold info about an operator declarator
// </summary>
class OperatorDeclaration {
	public readonly Operator.OpType optype;
	public readonly FullNamedExpression ret_type;
	public readonly Location location;

	public OperatorDeclaration (Operator.OpType op, FullNamedExpression ret_type, Location location)
	{
		optype = op;
		this.ret_type = ret_type;
		this.location = location;
	}
}

void Error_ExpectingTypeName (Expression expr)
{
	if (expr is Invocation){
		report.Error (1002, expr.Location, "Expecting `;'");
	} else {
		Expression.Error_InvalidExpressionStatement (report, expr.Location);
	}
}

void Error_ParameterModifierNotValid (string modifier, Location loc)
{
	report.Error (631, loc, "The parameter modifier `{0}' is not valid in this context",
			              modifier);
}

void Error_DuplicateParameterModifier (Location loc, Parameter.Modifier mod)
{
	report.Error (1107, loc, "Duplicate parameter modifier `{0}'",
  		Parameter.GetModifierSignature (mod));
}

void Error_TypeExpected (Location loc)
{
	report.Error (1031, loc, "Type expected");
}

void Error_UnsafeCodeNotAllowed (Location loc)
{
	report.Error (227, loc, "Unsafe code requires the `unsafe' command line option to be specified");
}

void Warning_EmptyStatement (Location loc)
{
	report.Warning (642, 3, loc, "Possible mistaken empty statement");
}

void Error_NamedArgumentExpected (NamedArgument a)
{
	report.Error (1738, a.Location, "Named arguments must appear after the positional arguments");
}

void Error_MissingInitializer (Location loc)
{
	report.Error (210, loc, "You must provide an initializer in a fixed or using statement declaration");
}

void push_current_class (TypeContainer tc, object partial_token)
{
	if (module.Evaluator != null && current_container is ModuleContainer){
		tc.Definition.Modifiers = tc.ModFlags = (tc.ModFlags & ~Modifiers.AccessibilityMask) | Modifiers.PUBLIC;
		if (undo == null)
			undo = new Undo ();
		undo.AddTypeContainer (current_container, tc);
	}

	if (partial_token != null)
		current_container = current_container.AddPartial (tc);
	else
		current_container = current_container.AddTypeContainer (tc);

	++lexer.parsing_declaration;
	current_class = tc;
}

DeclSpace pop_current_class ()
{
	DeclSpace retval = current_class;

	current_class = current_class.Parent;
	current_container = current_class.PartialContainer;

	return retval;
}

// <summary>
//   Given the @class_name name, it creates a fully qualified name
//   based on the containing declaration space
// </summary>
MemberName
MakeName (MemberName class_name)
{
	Namespace ns = current_namespace.NS;

	if (current_container == module) {
		if (ns.Name.Length != 0)
			return new MemberName (ns.MemberName, class_name);
		else
			return class_name;
	} else {
		return new MemberName (current_container.MemberName, class_name);
	}
}

[System.Diagnostics.Conditional ("FULL_AST")]
void StoreModifierLocation (object token, Location loc)
{
	if (lbag == null)
		return;

	if (mod_locations == null)
  		mod_locations = new List<Tuple<Modifiers, Location>> ();

	mod_locations.Add (Tuple.Create ((Modifiers) token, loc));
}

string CheckAttributeTarget (string a, Location l)
{
	switch (a) {
	case "assembly" : case "module" : case "field" : case "method" : case "param" : case "property" : case "type" :
			return a;
	}

	report.Warning (658, 1, l,
		 "`{0}' is invalid attribute target. All attributes in this attribute section will be ignored", a);
	return string.Empty;
}

static bool IsUnaryOperator (Operator.OpType op)
{
	switch (op) {
		
	case Operator.OpType.LogicalNot: 
	case Operator.OpType.OnesComplement: 
	case Operator.OpType.Increment:
	case Operator.OpType.Decrement:
	case Operator.OpType.True: 
	case Operator.OpType.False: 
	case Operator.OpType.UnaryPlus: 
	case Operator.OpType.UnaryNegation:
		return true;
	}
	return false;
}

void syntax_error (Location l, string msg)
{
	report.Error (1003, l, "Syntax error, " + msg);
}

Tokenizer lexer;

public Tokenizer Lexer {
	get {
		return lexer;
	}
}		   

static CSharpParser ()
{
	oob_stack = new Stack<object> ();
}

public CSharpParser (SeekableStreamReader reader, CompilationSourceFile file)
	: this (reader, file, file.NamespaceContainer.Module.Compiler.Report)
{
}

public CSharpParser (SeekableStreamReader reader, CompilationSourceFile file, Report report)
{
	this.file = file;
	current_namespace = file.NamespaceContainer;
	
	this.module = current_namespace.Module;
	this.compiler = module.Compiler;
	this.settings = compiler.Settings;
	this.report = report;
	
	lang_version = settings.Version;
	doc_support = settings.DocumentationFile != null;
	current_class = current_namespace.SlaveDeclSpace;
	current_container = current_class.PartialContainer; // == RootContest.ToplevelTypes
	oob_stack.Clear ();
	lexer = new Tokenizer (reader, file, compiler);
}

public void parse ()
{
	eof_token = Token.EOF;
	Tokenizer.LocatedToken.Initialize ();
	
	try {
		if (yacc_verbose_flag > 1)
			yyparse (lexer, new yydebug.yyDebugSimple ());
		else
			yyparse (lexer);
			
		Tokenizer tokenizer = lexer as Tokenizer;
		tokenizer.cleanup ();		
	} catch (Exception e){
	  	if (e is yyParser.yyUnexpectedEof) {
			UnexpectedEOF = true;
			return;
		}
			
		if (e is yyParser.yyException) {
			report.Error (-25, lexer.Location, "Parsing error");
		} else {
			// Used by compiler-tester to test internal errors
			//if (yacc_verbose_flag > 0)
				throw;
		
			//report.Error (589, lexer.Location, "Internal compiler error during parsing");
		}
	}
}

void CheckToken (int error, int yyToken, string msg, Location loc)
{
	if (yyToken >= Token.FIRST_KEYWORD && yyToken <= Token.LAST_KEYWORD)
		report.Error (error, loc, "{0}: `{1}' is a keyword", msg, GetTokenName (yyToken));
	else
		report.Error (error, loc, msg);
}

string ConsumeStoredComment ()
{
	string s = tmpComment;
	tmpComment = null;
	Lexer.doc_state = XmlCommentState.Allowed;
	return s;
}

void FeatureIsNotAvailable (Location loc, string feature)
{
	report.FeatureIsNotAvailable (compiler, loc, feature);
}

Location GetLocation (object obj)
{
	var lt = obj as Tokenizer.LocatedToken;
	if (lt != null)
		return lt.Location;
		
	var mn = obj as MemberName;
	if (mn != null)
		return mn.Location;
		
	var expr = obj as Expression;
	if (expr != null)
		return expr.Location;

	return lexer.Location;
}

public LocationsBag LocationsBag {
	get {
		return lbag;
	}
	set {
		lbag = value;
	}
}

void start_block (Location loc)
{ 
	if (current_block == null) {
		current_block = new ToplevelBlock (compiler, current_local_parameters, loc);
		parsing_anonymous_method = false;
	} else if (parsing_anonymous_method) {
		current_block = new ParametersBlock (current_block, current_local_parameters, loc);
		parsing_anonymous_method = false;
	} else {
		current_block = new ExplicitBlock (current_block, loc, Location.Null);
	}
}

Block end_block (Location loc)
{
	Block retval = current_block.Explicit;
	retval.SetEndLocation (loc);
	current_block = retval.Parent;
	return retval;
}

void checkForInteraction(Expression exp){
	if(isInteraction && interactionInitializationDone){
	  var invocation = exp as Invocation;
	  if(invocation == null && !isInteractionArgumentList){
	    report.Error (10003, GetLocation (exp), "Expression not allowed after initialization is complete");
	  }
	} 
}

Field FindField(string name, Location l){
    var c = (Class)current_container;
	var fields = c.Fields; 
	if(fields != null) { 
	  foreach(var f in fields){ 
		  if(f.Name == name){
		  	   return f as Field;
		  }
	  } 
	}
	return null;
}

public static string GetCurrentRoleContractName(string containerName, string roleName){
   var start = containerName.IndexOf("<");
   if(start > 0) {
     var length = containerName.LastIndexOf(">") - start;
     var count = containerName.Substring(start,length).Split(',').Length;
	 containerName = containerName.Substring(0,start) + "`" + count;
   }
   return "I" + containerName + roleName + "Contract";
}

public string GetCurrentRoleContractName(string roleName){
   return GetCurrentRoleContractName(((Class)current_container).Name,current_role.Name);
}

string GetCurrentRoleContractName(){
   return GetCurrentRoleContractName(current_role.Name);
}
  
MemberCore FindMethod(string name, Location l){
	var c = (Class)current_container;
	var methods = c.Methods; 
	if(methods != null) { 
	  foreach(var method in methods){
	     if(method.Name == name){ 
	 	     return method;
	     }
	  }
	 }
	 return null;
}
  
void start_anonymous (bool isLambda, ParametersCompiled parameters, bool isAsync, Location loc)
{
	oob_stack.Push (current_anonymous_method);
	oob_stack.Push (current_local_parameters);
	oob_stack.Push (current_variable);
	oob_stack.Push (async_block);

	current_local_parameters = parameters;
	if (isLambda) {
		if (lang_version <= LanguageVersion.ISO_2)
			FeatureIsNotAvailable (loc, "lambda expressions");

		current_anonymous_method = new LambdaExpression (isAsync, loc);
	} else {
		if (lang_version == LanguageVersion.ISO_1)
			FeatureIsNotAvailable (loc, "anonymous methods");
			
		current_anonymous_method = new AnonymousMethodExpression (isAsync, loc);
	}

	async_block = isAsync;
	// Force the next block to be created as a ToplevelBlock
	parsing_anonymous_method = true;
}

/*
 * Completes the anonymous method processing, if lambda_expr is null, this
 * means that we have a Statement instead of an Expression embedded 
 */
AnonymousMethodExpression end_anonymous (ParametersBlock anon_block)
{
	AnonymousMethodExpression retval;

	current_anonymous_method.Block = anon_block;
	retval = current_anonymous_method;

	async_block = (bool) oob_stack.Pop ();
	current_variable = (BlockVariableDeclaration) oob_stack.Pop ();
	current_local_parameters = (ParametersCompiled) oob_stack.Pop ();
	current_anonymous_method = (AnonymousMethodExpression) oob_stack.Pop ();

	return retval;
}

void Error_SyntaxError (int token)
{
	Error_SyntaxError (0, token, "Unexpected symbol");
}

void Error_SyntaxError (int error_code, int token, string msg)
{
	Lexer.CompleteOnEOF = false;

	// An error message has been reported by tokenizer
	if (token == Token.ERROR)
		return;

	string symbol = GetSymbolName (token);
	string expecting = GetExpecting ();
	var loc = lexer.Location - symbol.Length;
	
	if (error_code == 0) {
		if (expecting == "`identifier'") {
			if (token > Token.FIRST_KEYWORD && token < Token.LAST_KEYWORD) {
				report.Error (1041, loc, "Identifier expected, `{0}' is a keyword", symbol);
				return;
			}
			
			error_code = 1001;
			expecting = "identifier";
		} else if (expecting == "`)'") {
			error_code = 1026;
		} else {
			error_code = 1525;
		}
	}
	
	if (string.IsNullOrEmpty (expecting))
		report.Error (error_code, loc, "{1} `{0}'", symbol, msg);
	else
		report.Error (error_code, loc, "{2} `{0}', expecting {1}", symbol, expecting, msg);	  
}

string GetExpecting ()
{
	int [] tokens = yyExpectingTokens (yyExpectingState);
	var names = new List<string> (tokens.Length);
	bool has_type = false;
	bool has_identifier = false;
	for (int i = 0; i < tokens.Length; i++){
		int token = tokens [i];
		has_identifier |= token == Token.IDENTIFIER;
		
		string name = GetTokenName (token);
		if (name == "<internal>")
			continue;
			
		has_type |= name == "type";
		if (names.Contains (name))
			continue;
		
		names.Add (name);
	}

	//
	// Too many tokens to enumerate
	//
	if (names.Count > 8)
		return null;

	if (has_type && has_identifier)
		names.Remove ("identifier");

	if (names.Count == 1)
		return "`" + GetTokenName (tokens [0]) + "'";
	
	StringBuilder sb = new StringBuilder ();
	names.Sort ();
	int count = names.Count;
	for (int i = 0; i < count; i++){
		bool last = i + 1 == count;
		if (last)
			sb.Append ("or ");
		sb.Append ('`');
		sb.Append (names [i]);
		sb.Append (last ? "'" : count < 3 ? "' " : "', ");
	}
	return sb.ToString ();
}


string GetSymbolName (int token)
{
	switch (token){
	case Token.LITERAL:
		return ((Constant)lexer.Value).GetValue ().ToString ();
	case Token.IDENTIFIER:
		return ((Tokenizer.LocatedToken)lexer.Value).Value;

	case Token.BOOL:
		return "bool";
	case Token.BYTE:
		return "byte";
	case Token.CHAR:
		return "char";
	case Token.VOID:
		return "void";
	case Token.DECIMAL:
		return "decimal";
	case Token.DOUBLE:
		return "double";
	case Token.FLOAT:
		return "float";
	case Token.INT:
		return "int";
	case Token.LONG:
		return "long";
	case Token.SBYTE:
		return "sbyte";
	case Token.SHORT:
		return "short";
	case Token.STRING:
		return "string";
	case Token.UINT:
		return "uint";
	case Token.ULONG:
		return "ulong";
	case Token.USHORT:
		return "ushort";
	case Token.OBJECT:
		return "object";
		
	case Token.PLUS:
		return "+";
	case Token.UMINUS:
	case Token.MINUS:
		return "-";
	case Token.BANG:
		return "!";
	case Token.BITWISE_AND:
		return "&";
	case Token.BITWISE_OR:
		return "|";
	case Token.STAR:
		return "*";
	case Token.PERCENT:
		return "%";
	case Token.DIV:
		return "/";
	case Token.CARRET:
		return "^";
	case Token.OP_INC:
		return "++";
	case Token.OP_DEC:
		return "--";
	case Token.OP_SHIFT_LEFT:
		return "<<";
	case Token.OP_SHIFT_RIGHT:
		return ">>";
	case Token.OP_LT:
		return "<";
	case Token.OP_GT:
		return ">";
	case Token.OP_LE:
		return "<=";
	case Token.OP_GE:
		return ">=";
	case Token.OP_EQ:
		return "==";
	case Token.OP_NE:
		return "!=";
	case Token.OP_AND:
		return "&&";
	case Token.OP_OR:
		return "||";
	case Token.OP_PTR:
		return "->";
	case Token.OP_COALESCING:	
		return "??";
	case Token.OP_MULT_ASSIGN:
		return "*=";
	case Token.OP_DIV_ASSIGN:
		return "/=";
	case Token.OP_MOD_ASSIGN:
		return "%=";
	case Token.OP_ADD_ASSIGN:
		return "+=";
	case Token.OP_SUB_ASSIGN:
		return "-=";
	case Token.OP_SHIFT_LEFT_ASSIGN:
		return "<<=";
	case Token.OP_SHIFT_RIGHT_ASSIGN:
		return ">>=";
	case Token.OP_AND_ASSIGN:
		return "&=";
	case Token.OP_XOR_ASSIGN:
		return "^=";
	case Token.OP_OR_ASSIGN:
		return "|=";
	}

	return GetTokenName (token);
}

static string GetTokenName (int token)
{
	switch (token){
	case Token.ABSTRACT:
		return "abstract";
	case Token.AS:
		return "as";
	case Token.ADD:
		return "add";
	case Token.ASYNC:
		return "async";
	case Token.BASE:
		return "base";
	case Token.BREAK:
		return "break";
	case Token.CASE:
		return "case";
	case Token.CATCH:
		return "catch";
	case Token.CHECKED:
		return "checked";
	case Token.CLASS:
		return "class";
	case Token.CONST:
		return "const";
	case Token.CONTINUE:
		return "continue";
	case Token.DEFAULT:
		return "default";
	case Token.DELEGATE:
		return "delegate";
	case Token.DO:
		return "do";
	case Token.ELSE:
		return "else";
	case Token.ENUM:
		return "enum";
	case Token.EVENT:
		return "event";
	case Token.EXPLICIT:
		return "explicit";
	case Token.EXTERN:
	case Token.EXTERN_ALIAS:
		return "extern";
	case Token.FALSE:
		return "false";
	case Token.FINALLY:
		return "finally";
	case Token.FIXED:
		return "fixed";
	case Token.FOR:
		return "for";
	case Token.FOREACH:
		return "foreach";
	case Token.GOTO:
		return "goto";
	case Token.IF:
		return "if";
	case Token.IMPLICIT:
		return "implicit";
	case Token.IN:
		return "in";
	case Token.INTERFACE:
		return "interface";
	case Token.INTERNAL:
		return "internal";
	case Token.IS:
		return "is";
	case Token.LOCK:
		return "lock";
	case Token.NAMESPACE:
		return "namespace";
	case Token.NEW:
		return "new";
	case Token.NULL:
		return "null";
	case Token.OPERATOR:
		return "operator";
	case Token.OUT:
		return "out";
	case Token.OVERRIDE:
		return "override";
	case Token.PARAMS:
		return "params";
	case Token.PRIVATE:
		return "private";
	case Token.PROTECTED:
		return "protected";
	case Token.PUBLIC:
		return "public";
	case Token.READONLY:
		return "readonly";
	case Token.REF:
		return "ref";
	case Token.RETURN:
		return "return";
	case Token.REMOVE:
		return "remove";
	case Token.SEALED:
		return "sealed";
	case Token.SIZEOF:
		return "sizeof";
	case Token.STACKALLOC:
		return "stackalloc";
	case Token.STATIC:
		return "static";
	case Token.STRUCT:
		return "struct";
	case Token.SWITCH:
		return "switch";
	case Token.THIS:
		return "this";
	case Token.THROW:
		return "throw";
	case Token.TRUE:
		return "true";
	case Token.TRY:
		return "try";
	case Token.TYPEOF:
		return "typeof";
	case Token.UNCHECKED:
		return "unchecked";
	case Token.UNSAFE:
		return "unsafe";
	case Token.USING:
		return "using";
	case Token.VIRTUAL:
		return "virtual";
	case Token.VOLATILE:
		return "volatile";
	case Token.WHERE:
		return "where";
	case Token.WHILE:
		return "while";
	case Token.ARGLIST:
		return "__arglist";
	case Token.REFVALUE:
		return "__refvalue";
	case Token.REFTYPE:
		return "__reftype";
	case Token.MAKEREF:
		return "__makeref";
	case Token.PARTIAL:
		return "partial";
	case Token.ARROW:
		return "=>";
	case Token.FROM:
	case Token.FROM_FIRST:
		return "from";
	case Token.JOIN:
		return "join";
	case Token.ON:
		return "on";
	case Token.EQUALS:
		return "equals";
	case Token.SELECT:
		return "select";
	case Token.GROUP:
		return "group";
	case Token.BY:
		return "by";
	case Token.LET:
		return "let";
	case Token.ORDERBY:
		return "orderby";
	case Token.ASCENDING:
		return "ascending";
	case Token.DESCENDING:
		return "descending";
	case Token.INTO:
		return "into";
	case Token.GET:
		return "get";
	case Token.SET:
		return "set";
	case Token.OPEN_BRACE:
		return "{";
	case Token.CLOSE_BRACE:
		return "}";
	case Token.OPEN_BRACKET:
	case Token.OPEN_BRACKET_EXPR:
		return "[";
	case Token.CLOSE_BRACKET:
		return "]";
	case Token.OPEN_PARENS_CAST:
	case Token.OPEN_PARENS_LAMBDA:
	case Token.OPEN_PARENS:
		return "(";
	case Token.CLOSE_PARENS:
		return ")";
	case Token.DOT:
		return ".";
	case Token.COMMA:
		return ",";
	case Token.DEFAULT_COLON:
		return "default:";
	case Token.COLON:
		return ":";
	case Token.SEMICOLON:
		return ";";
	case Token.TILDE:
		return "~";
		
	case Token.PLUS:
	case Token.UMINUS:
	case Token.MINUS:
	case Token.BANG:
	case Token.OP_LT:
	case Token.OP_GT:
	case Token.BITWISE_AND:
	case Token.BITWISE_OR:
	case Token.STAR:
	case Token.PERCENT:
	case Token.DIV:
	case Token.CARRET:
	case Token.OP_INC:
	case Token.OP_DEC:
	case Token.OP_SHIFT_LEFT:
	case Token.OP_SHIFT_RIGHT:
	case Token.OP_LE:
	case Token.OP_GE:
	case Token.OP_EQ:
	case Token.OP_NE:
	case Token.OP_AND:
	case Token.OP_OR:
	case Token.OP_PTR:
	case Token.OP_COALESCING:	
	case Token.OP_MULT_ASSIGN:
	case Token.OP_DIV_ASSIGN:
	case Token.OP_MOD_ASSIGN:
	case Token.OP_ADD_ASSIGN:
	case Token.OP_SUB_ASSIGN:
	case Token.OP_SHIFT_LEFT_ASSIGN:
	case Token.OP_SHIFT_RIGHT_ASSIGN:
	case Token.OP_AND_ASSIGN:
	case Token.OP_XOR_ASSIGN:
	case Token.OP_OR_ASSIGN:
		return "<operator>";

	case Token.BOOL:
	case Token.BYTE:
	case Token.CHAR:
	case Token.VOID:
	case Token.DECIMAL:
	case Token.DOUBLE:
	case Token.FLOAT:
	case Token.INT:
	case Token.LONG:
	case Token.SBYTE:
	case Token.SHORT:
	case Token.STRING:
	case Token.UINT:
	case Token.ULONG:
	case Token.USHORT:
	case Token.OBJECT:
		return "type";
	
	case Token.ASSIGN:
		return "=";
	case Token.OP_GENERICS_LT:
	case Token.GENERIC_DIMENSION:
		return "<";
	case Token.OP_GENERICS_GT:
		return ">";
	case Token.INTERR:
	case Token.INTERR_NULLABLE:
		return "?";
	case Token.DOUBLE_COLON:
		return "::";
	case Token.LITERAL:
		return "value";
	case Token.IDENTIFIER:
	case Token.AWAIT:
		return "identifier";
	case Token.EOF:
		return "end-of-file";

		// All of these are internal.
	case Token.NONE:
	case Token.ERROR:
	case Token.FIRST_KEYWORD:
	case Token.EVAL_COMPILATION_UNIT_PARSER:
	case Token.EVAL_USING_DECLARATIONS_UNIT_PARSER:
	case Token.EVAL_STATEMENT_PARSER:
	case Token.LAST_KEYWORD:
	case Token.GENERATE_COMPLETION:
	case Token.COMPLETE_COMPLETION:
		return "<internal>";
	case Token.ROLE:
	    return "role";
    case Token.INTERACTION:
        return "interaction";
    case Token.ENTRY:
        return "entry";
	case Token.CONTRACT:
	    return "contract";
		// A bit more robust.
	default:
		return yyNames [token];
        }
}

/* end end end */
}
#line default
namespace yydebug {
        using System;
	 internal interface yyDebug {
		 void push (int state, Object value);
		 void lex (int state, int token, string name, Object value);
		 void shift (int from, int to, int errorFlag);
		 void pop (int state);
		 void discard (int state, int token, string name, Object value);
		 void reduce (int from, int to, int rule, string text, int len);
		 void shift (int from, int to);
		 void accept (Object value);
		 void error (string message);
		 void reject ();
	 }
	 
	 class yyDebugSimple : yyDebug {
		 void println (string s){
			 Console.Error.WriteLine (s);
		 }
		 
		 public void push (int state, Object value) {
			 println ("push\tstate "+state+"\tvalue "+value);
		 }
		 
		 public void lex (int state, int token, string name, Object value) {
			 println("lex\tstate "+state+"\treading "+name+"\tvalue "+value);
		 }
		 
		 public void shift (int from, int to, int errorFlag) {
			 switch (errorFlag) {
			 default:				// normally
				 println("shift\tfrom state "+from+" to "+to);
				 break;
			 case 0: case 1: case 2:		// in error recovery
				 println("shift\tfrom state "+from+" to "+to
					     +"\t"+errorFlag+" left to recover");
				 break;
			 case 3:				// normally
				 println("shift\tfrom state "+from+" to "+to+"\ton error");
				 break;
			 }
		 }
		 
		 public void pop (int state) {
			 println("pop\tstate "+state+"\ton error");
		 }
		 
		 public void discard (int state, int token, string name, Object value) {
			 println("discard\tstate "+state+"\ttoken "+name+"\tvalue "+value);
		 }
		 
		 public void reduce (int from, int to, int rule, string text, int len) {
			 println("reduce\tstate "+from+"\tuncover "+to
				     +"\trule ("+rule+") "+text);
		 }
		 
		 public void shift (int from, int to) {
			 println("goto\tfrom state "+from+" to "+to);
		 }
		 
		 public void accept (Object value) {
			 println("accept\tvalue "+value);
		 }
		 
		 public void error (string message) {
			 println("error\t"+message);
		 }
		 
		 public void reject () {
			 println("reject");
		 }
		 
	 }
}
// %token constants
 class Token {
  public const int EOF = 257;
  public const int NONE = 258;
  public const int ERROR = 259;
  public const int FIRST_KEYWORD = 260;
  public const int ABSTRACT = 261;
  public const int AS = 262;
  public const int ADD = 263;
  public const int BASE = 264;
  public const int BOOL = 265;
  public const int BREAK = 266;
  public const int BYTE = 267;
  public const int CASE = 268;
  public const int CATCH = 269;
  public const int CHAR = 270;
  public const int CHECKED = 271;
  public const int CLASS = 272;
  public const int CONST = 273;
  public const int CONTINUE = 274;
  public const int DECIMAL = 275;
  public const int DEFAULT = 276;
  public const int DELEGATE = 277;
  public const int DO = 278;
  public const int DOUBLE = 279;
  public const int ELSE = 280;
  public const int ENUM = 281;
  public const int EVENT = 282;
  public const int EXPLICIT = 283;
  public const int EXTERN = 284;
  public const int FALSE = 285;
  public const int FINALLY = 286;
  public const int FIXED = 287;
  public const int FLOAT = 288;
  public const int FOR = 289;
  public const int FOREACH = 290;
  public const int GOTO = 291;
  public const int IF = 292;
  public const int IMPLICIT = 293;
  public const int IN = 294;
  public const int INT = 295;
  public const int INTERFACE = 296;
  public const int INTERNAL = 297;
  public const int IS = 298;
  public const int LOCK = 299;
  public const int LONG = 300;
  public const int NAMESPACE = 301;
  public const int NEW = 302;
  public const int NULL = 303;
  public const int OBJECT = 304;
  public const int OPERATOR = 305;
  public const int OUT = 306;
  public const int OVERRIDE = 307;
  public const int PARAMS = 308;
  public const int PRIVATE = 309;
  public const int PROTECTED = 310;
  public const int PUBLIC = 311;
  public const int READONLY = 312;
  public const int REF = 313;
  public const int RETURN = 314;
  public const int REMOVE = 315;
  public const int SBYTE = 316;
  public const int SEALED = 317;
  public const int SHORT = 318;
  public const int SIZEOF = 319;
  public const int STACKALLOC = 320;
  public const int STATIC = 321;
  public const int STRING = 322;
  public const int STRUCT = 323;
  public const int SWITCH = 324;
  public const int THIS = 325;
  public const int THROW = 326;
  public const int TRUE = 327;
  public const int TRY = 328;
  public const int TYPEOF = 329;
  public const int UINT = 330;
  public const int ULONG = 331;
  public const int UNCHECKED = 332;
  public const int UNSAFE = 333;
  public const int USHORT = 334;
  public const int USING = 335;
  public const int VIRTUAL = 336;
  public const int VOID = 337;
  public const int VOLATILE = 338;
  public const int WHERE = 339;
  public const int WHILE = 340;
  public const int ARGLIST = 341;
  public const int PARTIAL = 342;
  public const int ARROW = 343;
  public const int FROM = 344;
  public const int FROM_FIRST = 345;
  public const int JOIN = 346;
  public const int ON = 347;
  public const int EQUALS = 348;
  public const int SELECT = 349;
  public const int GROUP = 350;
  public const int BY = 351;
  public const int LET = 352;
  public const int ORDERBY = 353;
  public const int ASCENDING = 354;
  public const int DESCENDING = 355;
  public const int INTO = 356;
  public const int INTERR_NULLABLE = 357;
  public const int EXTERN_ALIAS = 358;
  public const int REFVALUE = 359;
  public const int REFTYPE = 360;
  public const int MAKEREF = 361;
  public const int ASYNC = 362;
  public const int AWAIT = 363;
  public const int ROLE = 364;
  public const int CONTRACT = 365;
  public const int INTERACTION = 366;
  public const int ENTRY = 367;
  public const int GET = 368;
  public const int SET = 369;
  public const int LAST_KEYWORD = 370;
  public const int OPEN_BRACE = 371;
  public const int CLOSE_BRACE = 372;
  public const int OPEN_BRACKET = 373;
  public const int CLOSE_BRACKET = 374;
  public const int OPEN_PARENS = 375;
  public const int CLOSE_PARENS = 376;
  public const int DOT = 377;
  public const int COMMA = 378;
  public const int COLON = 379;
  public const int SEMICOLON = 380;
  public const int TILDE = 381;
  public const int PLUS = 382;
  public const int MINUS = 383;
  public const int BANG = 384;
  public const int ASSIGN = 385;
  public const int OP_LT = 386;
  public const int OP_GT = 387;
  public const int BITWISE_AND = 388;
  public const int BITWISE_OR = 389;
  public const int STAR = 390;
  public const int PERCENT = 391;
  public const int DIV = 392;
  public const int CARRET = 393;
  public const int INTERR = 394;
  public const int DOUBLE_COLON = 395;
  public const int OP_INC = 396;
  public const int OP_DEC = 397;
  public const int OP_SHIFT_LEFT = 398;
  public const int OP_SHIFT_RIGHT = 399;
  public const int OP_LE = 400;
  public const int OP_GE = 401;
  public const int OP_EQ = 402;
  public const int OP_NE = 403;
  public const int OP_AND = 404;
  public const int OP_OR = 405;
  public const int OP_MULT_ASSIGN = 406;
  public const int OP_DIV_ASSIGN = 407;
  public const int OP_MOD_ASSIGN = 408;
  public const int OP_ADD_ASSIGN = 409;
  public const int OP_SUB_ASSIGN = 410;
  public const int OP_SHIFT_LEFT_ASSIGN = 411;
  public const int OP_SHIFT_RIGHT_ASSIGN = 412;
  public const int OP_AND_ASSIGN = 413;
  public const int OP_XOR_ASSIGN = 414;
  public const int OP_OR_ASSIGN = 415;
  public const int OP_PTR = 416;
  public const int OP_COALESCING = 417;
  public const int OP_GENERICS_LT = 418;
  public const int OP_GENERICS_LT_DECL = 419;
  public const int OP_GENERICS_GT = 420;
  public const int LITERAL = 421;
  public const int IDENTIFIER = 422;
  public const int OPEN_PARENS_LAMBDA = 423;
  public const int OPEN_PARENS_CAST = 424;
  public const int GENERIC_DIMENSION = 425;
  public const int DEFAULT_COLON = 426;
  public const int OPEN_BRACKET_EXPR = 427;
  public const int EVAL_STATEMENT_PARSER = 428;
  public const int EVAL_COMPILATION_UNIT_PARSER = 429;
  public const int EVAL_USING_DECLARATIONS_UNIT_PARSER = 430;
  public const int DOC_SEE = 431;
  public const int GENERATE_COMPLETION = 432;
  public const int COMPLETE_COMPLETION = 433;
  public const int UMINUS = 434;
  public const int yyErrorCode = 256;
 }
 namespace yyParser {
  using System;
  /** thrown for irrecoverable syntax errors and stack overflow.
    */
  internal class yyException : System.Exception {
    public yyException (string message) : base (message) {
    }
  }
  internal class yyUnexpectedEof : yyException {
    public yyUnexpectedEof (string message) : base (message) {
    }
    public yyUnexpectedEof () : base ("") {
    }
  }

  /** must be implemented by a scanner object to supply input to the parser.
    */
  internal interface yyInput {
    /** move on to next token.
        @return false if positioned beyond tokens.
        @throws IOException on input error.
      */
    bool advance (); // throws java.io.IOException;
    /** classifies current token.
        Should not be called if advance() returned false.
        @return current %token or single character.
      */
    int token ();
    /** associated with current token.
        Should not be called if advance() returned false.
        @return value for token().
      */
    Object value ();
  }
 }
} // close outermost namespace, that MUST HAVE BEEN opened in the prolog
